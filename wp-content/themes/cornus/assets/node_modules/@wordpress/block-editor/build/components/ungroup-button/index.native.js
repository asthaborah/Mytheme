"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UngroupButton = UngroupButton;
exports.default = void 0;
var _react = require("react");
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _icons = require("@wordpress/icons");
var _store = require("../../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const noop = () => {};
const EMPTY_BLOCKS_LIST = [];
function UngroupButton({
  onConvertFromGroup,
  isUngroupable = false
}) {
  if (!isUngroupable) {
    return null;
  }
  return (0, _react.createElement)(_components.ToolbarGroup, null, (0, _react.createElement)(_components.ToolbarButton, {
    title: (0, _i18n.__)('Ungroup'),
    icon: _icons.ungroup,
    onClick: onConvertFromGroup
  }));
}
var _default = exports.default = (0, _compose.compose)([(0, _data.withSelect)(select => {
  const {
    getSelectedBlockClientId,
    getBlock
  } = select(_store.store);
  const {
    getGroupingBlockName
  } = select(_blocks.store);
  const selectedId = getSelectedBlockClientId();
  const selectedBlock = getBlock(selectedId);
  const groupingBlockName = getGroupingBlockName();
  const isUngroupable = selectedBlock && selectedBlock.innerBlocks && selectedBlock.innerBlocks.length > 0 && selectedBlock.name === groupingBlockName;
  const innerBlocks = isUngroupable ? selectedBlock.innerBlocks : EMPTY_BLOCKS_LIST;
  return {
    isUngroupable,
    clientId: selectedId,
    innerBlocks
  };
}), (0, _data.withDispatch)((dispatch, {
  clientId,
  innerBlocks,
  onToggle = noop
}) => {
  const {
    replaceBlocks
  } = dispatch(_store.store);
  return {
    onConvertFromGroup() {
      if (!innerBlocks.length) {
        return;
      }
      replaceBlocks(clientId, innerBlocks);
      onToggle();
    }
  };
})])(UngroupButton);
//# sourceMappingURL=index.native.js.map