{"version":3,"names":["createContext","useContext","useMemo","Context","BlockContextProvider","value","children","context","nextValue","createElement","Provider"],"sources":["@wordpress/block-editor/src/components/block-context/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext, useContext, useMemo } from '@wordpress/element';\n\n/** @typedef {import('react').ReactNode} ReactNode */\n\n/**\n * @typedef BlockContextProviderProps\n *\n * @property {Record<string,*>} value    Context value to merge with current\n *                                       value.\n * @property {ReactNode}        children Component children.\n */\n\n/** @type {import('react').Context<Record<string,*>>} */\nconst Context = createContext( {} );\n\n/**\n * Component which merges passed value with current consumed block context.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-context/README.md\n *\n * @param {BlockContextProviderProps} props\n */\nexport function BlockContextProvider( { value, children } ) {\n\tconst context = useContext( Context );\n\tconst nextValue = useMemo(\n\t\t() => ( { ...context, ...value } ),\n\t\t[ context, value ]\n\t);\n\n\treturn <Context.Provider value={ nextValue } children={ children } />;\n}\n\nexport default Context;\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;;AAEvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,OAAO,GAAGH,aAAa,CAAE,CAAC,CAAE,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,oBAAoBA,CAAE;EAAEC,KAAK;EAAEC;AAAS,CAAC,EAAG;EAC3D,MAAMC,OAAO,GAAGN,UAAU,CAAEE,OAAQ,CAAC;EACrC,MAAMK,SAAS,GAAGN,OAAO,CACxB,OAAQ;IAAE,GAAGK,OAAO;IAAE,GAAGF;EAAM,CAAC,CAAE,EAClC,CAAEE,OAAO,EAAEF,KAAK,CACjB,CAAC;EAED,OAAOI,aAAA,CAACN,OAAO,CAACO,QAAQ;IAACL,KAAK,EAAGG,SAAW;IAACF,QAAQ,EAAGA;EAAU,CAAE,CAAC;AACtE;AAEA,eAAeH,OAAO"}