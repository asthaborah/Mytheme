{"version":3,"names":["_blocks","require","_data","_store","useConvertToGroupButtonProps","selectedClientIds","useSelect","select","getBlocksByClientId","getSelectedBlockClientIds","isUngroupable","isGroupable","blockEditorStore","getGroupingBlockName","getBlockType","blocksStore","clientIds","length","blocksSelection","firstSelectedBlock","_isUngroupable","groupingBlockName","onUngroup","name","transforms","ungroup"],"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/use-convert-to-group-button-props.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * Contains the properties `ConvertToGroupButton` component needs.\n *\n * @typedef {Object} ConvertToGroupButtonProps\n * @property {string[]}  clientIds         An array of the selected client ids.\n * @property {boolean}   isGroupable       Indicates if the selected blocks can be grouped.\n * @property {boolean}   isUngroupable     Indicates if the selected blocks can be ungrouped.\n * @property {WPBlock[]} blocksSelection   An array of the selected blocks.\n * @property {string}    groupingBlockName The name of block used for handling grouping interactions.\n */\n\n/**\n * Returns the properties `ConvertToGroupButton` component needs to work properly.\n * It is used in `BlockSettingsMenuControls` to know if `ConvertToGroupButton`\n * should be rendered, to avoid ending up with an empty MenuGroup.\n *\n * @param {?string[]} selectedClientIds An optional array of clientIds to group. The selected blocks\n *                                      from the block editor store are used if this is not provided.\n *\n * @return {ConvertToGroupButtonProps} Returns the properties needed by `ConvertToGroupButton`.\n */\nexport default function useConvertToGroupButtonProps( selectedClientIds ) {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tgetSelectedBlockClientIds,\n\t\t\t\tisUngroupable,\n\t\t\t\tisGroupable,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst { getGroupingBlockName, getBlockType } =\n\t\t\t\tselect( blocksStore );\n\t\t\tconst clientIds = selectedClientIds?.length\n\t\t\t\t? selectedClientIds\n\t\t\t\t: getSelectedBlockClientIds();\n\t\t\tconst blocksSelection = getBlocksByClientId( clientIds );\n\t\t\tconst [ firstSelectedBlock ] = blocksSelection;\n\t\t\tconst _isUngroupable =\n\t\t\t\tclientIds.length === 1 && isUngroupable( clientIds[ 0 ] );\n\t\t\treturn {\n\t\t\t\tclientIds,\n\t\t\t\tisGroupable: isGroupable( clientIds ),\n\t\t\t\tisUngroupable: _isUngroupable,\n\t\t\t\tblocksSelection,\n\t\t\t\tgroupingBlockName: getGroupingBlockName(),\n\t\t\t\tonUngroup:\n\t\t\t\t\t_isUngroupable &&\n\t\t\t\t\tgetBlockType( firstSelectedBlock.name )?.transforms\n\t\t\t\t\t\t?.ungroup,\n\t\t\t};\n\t\t},\n\t\t[ selectedClientIds ]\n\t);\n}\n"],"mappings":";;;;;;AAGA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAKA,IAAAE,MAAA,GAAAF,OAAA;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASG,4BAA4BA,CAAEC,iBAAiB,EAAG;EACzE,OAAO,IAAAC,eAAS,EACbC,MAAM,IAAM;IACb,MAAM;MACLC,mBAAmB;MACnBC,yBAAyB;MACzBC,aAAa;MACbC;IACD,CAAC,GAAGJ,MAAM,CAAEK,YAAiB,CAAC;IAC9B,MAAM;MAAEC,oBAAoB;MAAEC;IAAa,CAAC,GAC3CP,MAAM,CAAEQ,aAAY,CAAC;IACtB,MAAMC,SAAS,GAAGX,iBAAiB,EAAEY,MAAM,GACxCZ,iBAAiB,GACjBI,yBAAyB,CAAC,CAAC;IAC9B,MAAMS,eAAe,GAAGV,mBAAmB,CAAEQ,SAAU,CAAC;IACxD,MAAM,CAAEG,kBAAkB,CAAE,GAAGD,eAAe;IAC9C,MAAME,cAAc,GACnBJ,SAAS,CAACC,MAAM,KAAK,CAAC,IAAIP,aAAa,CAAEM,SAAS,CAAE,CAAC,CAAG,CAAC;IAC1D,OAAO;MACNA,SAAS;MACTL,WAAW,EAAEA,WAAW,CAAEK,SAAU,CAAC;MACrCN,aAAa,EAAEU,cAAc;MAC7BF,eAAe;MACfG,iBAAiB,EAAER,oBAAoB,CAAC,CAAC;MACzCS,SAAS,EACRF,cAAc,IACdN,YAAY,CAAEK,kBAAkB,CAACI,IAAK,CAAC,EAAEC,UAAU,EAChDC;IACL,CAAC;EACF,CAAC,EACD,CAAEpB,iBAAiB,CACpB,CAAC;AACF"}