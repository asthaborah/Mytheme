{"version":3,"names":["_constants","require","_validation","_getBlockAttributes","_applyBuiltInValidationFixes","_utils","stubFalse","applyBlockDeprecatedVersions","block","rawBlock","blockType","parsedAttributes","attrs","deprecated","deprecatedDefinitions","length","i","isEligible","isValid","innerBlocks","blockNode","deprecatedBlockType","Object","assign","omit","DEPRECATED_ENTRY_KEYS","migratedBlock","attributes","getBlockAttributes","originalContent","validateBlock","applyBuiltInValidationFixes","migratedInnerBlocks","migratedAttributes","migrate","migrated","Array","isArray","validationIssues"],"sources":["@wordpress/blocks/src/api/parser/apply-block-deprecated-versions.js"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { DEPRECATED_ENTRY_KEYS } from '../constants';\nimport { validateBlock } from '../validation';\nimport { getBlockAttributes } from './get-block-attributes';\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\nimport { omit } from '../utils';\n\n/**\n * Function that takes no arguments and always returns false.\n *\n * @return {boolean} Always returns false.\n */\nfunction stubFalse() {\n\treturn false;\n}\n\n/**\n * Given a block object, returns a new copy of the block with any applicable\n * deprecated migrations applied, or the original block if it was both valid\n * and no eligible migrations exist.\n *\n * @param {import(\".\").WPBlock}                   block     Parsed and invalid block object.\n * @param {import(\".\").WPRawBlock}                rawBlock  Raw block object.\n * @param {import('../registration').WPBlockType} blockType Block type. This is normalize not necessary and\n *                                                          can be inferred from the block name,\n *                                                          but it's here for performance reasons.\n *\n * @return {import(\".\").WPBlock} Migrated block object.\n */\nexport function applyBlockDeprecatedVersions( block, rawBlock, blockType ) {\n\tconst parsedAttributes = rawBlock.attrs;\n\tconst { deprecated: deprecatedDefinitions } = blockType;\n\t// Bail early if there are no registered deprecations to be handled.\n\tif ( ! deprecatedDefinitions || ! deprecatedDefinitions.length ) {\n\t\treturn block;\n\t}\n\n\t// By design, blocks lack any sort of version tracking. Instead, to process\n\t// outdated content the system operates a queue out of all the defined\n\t// attribute shapes and tries each definition until the input produces a\n\t// valid result. This mechanism seeks to avoid polluting the user-space with\n\t// machine-specific code. An invalid block is thus a block that could not be\n\t// matched successfully with any of the registered deprecation definitions.\n\tfor ( let i = 0; i < deprecatedDefinitions.length; i++ ) {\n\t\t// A block can opt into a migration even if the block is valid by\n\t\t// defining `isEligible` on its deprecation. If the block is both valid\n\t\t// and does not opt to migrate, skip.\n\t\tconst { isEligible = stubFalse } = deprecatedDefinitions[ i ];\n\t\tif (\n\t\t\tblock.isValid &&\n\t\t\t! isEligible( parsedAttributes, block.innerBlocks, {\n\t\t\t\tblockNode: rawBlock,\n\t\t\t\tblock,\n\t\t\t} )\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Block type properties which could impact either serialization or\n\t\t// parsing are not considered in the deprecated block type by default,\n\t\t// and must be explicitly provided.\n\t\tconst deprecatedBlockType = Object.assign(\n\t\t\tomit( blockType, DEPRECATED_ENTRY_KEYS ),\n\t\t\tdeprecatedDefinitions[ i ]\n\t\t);\n\n\t\tlet migratedBlock = {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes(\n\t\t\t\tdeprecatedBlockType,\n\t\t\t\tblock.originalContent,\n\t\t\t\tparsedAttributes\n\t\t\t),\n\t\t};\n\n\t\t// Ignore the deprecation if it produces a block which is not valid.\n\t\tlet [ isValid ] = validateBlock( migratedBlock, deprecatedBlockType );\n\n\t\t// If the migrated block is not valid initially, try the built-in fixes.\n\t\tif ( ! isValid ) {\n\t\t\tmigratedBlock = applyBuiltInValidationFixes(\n\t\t\t\tmigratedBlock,\n\t\t\t\tdeprecatedBlockType\n\t\t\t);\n\t\t\t[ isValid ] = validateBlock( migratedBlock, deprecatedBlockType );\n\t\t}\n\n\t\t// An invalid block does not imply incorrect HTML but the fact block\n\t\t// source information could be lost on re-serialization.\n\t\tif ( ! isValid ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet migratedInnerBlocks = migratedBlock.innerBlocks;\n\t\tlet migratedAttributes = migratedBlock.attributes;\n\n\t\t// A block may provide custom behavior to assign new attributes and/or\n\t\t// inner blocks.\n\t\tconst { migrate } = deprecatedBlockType;\n\t\tif ( migrate ) {\n\t\t\tlet migrated = migrate( migratedAttributes, block.innerBlocks );\n\t\t\tif ( ! Array.isArray( migrated ) ) {\n\t\t\t\tmigrated = [ migrated ];\n\t\t\t}\n\n\t\t\t[\n\t\t\t\tmigratedAttributes = parsedAttributes,\n\t\t\t\tmigratedInnerBlocks = block.innerBlocks,\n\t\t\t] = migrated;\n\t\t}\n\n\t\tblock = {\n\t\t\t...block,\n\t\t\tattributes: migratedAttributes,\n\t\t\tinnerBlocks: migratedInnerBlocks,\n\t\t\tisValid: true,\n\t\t\tvalidationIssues: [],\n\t\t};\n\t}\n\n\treturn block;\n}\n"],"mappings":"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"}