{"version":3,"names":["_i18n","require","_definitions","appendSelectors","selectors","append","split","map","subselector","join","getBlockGapCSS","selector","layoutDefinitions","LAYOUT_DEFINITIONS","layoutType","blockGapValue","output","spacingStyles","length","forEach","gapStyle","trim","Object","entries","rules","cssProperty","value","getAlignmentsInfo","layout","contentSize","wideSize","type","alignmentInfo","sizeRegex","test","none","sprintf","__","wide"],"sources":["@wordpress/block-editor/src/layouts/utils.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { LAYOUT_DEFINITIONS } from './definitions';\n\n/**\n * Utility to generate the proper CSS selector for layout styles.\n *\n * @param {string} selectors CSS selector, also supports multiple comma-separated selectors.\n * @param {string} append    The string to append.\n *\n * @return {string} - CSS selector.\n */\nexport function appendSelectors( selectors, append = '' ) {\n\t// Ideally we shouldn't need the `.editor-styles-wrapper` increased specificity here\n\t// The problem though is that we have a `.editor-styles-wrapper p { margin: reset; }` style\n\t// it's used to reset the default margin added by wp-admin to paragraphs\n\t// so we need this to be higher speficity otherwise, it won't be applied to paragraphs inside containers\n\t// When the post editor is fully iframed, this extra classname could be removed.\n\n\treturn selectors\n\t\t.split( ',' )\n\t\t.map(\n\t\t\t( subselector ) =>\n\t\t\t\t`.editor-styles-wrapper ${ subselector }${\n\t\t\t\t\tappend ? ` ${ append }` : ''\n\t\t\t\t}`\n\t\t)\n\t\t.join( ',' );\n}\n\n/**\n * Get generated blockGap CSS rules based on layout definitions provided in theme.json\n * Falsy values in the layout definition's spacingStyles rules will be swapped out\n * with the provided `blockGapValue`.\n *\n * @param {string} selector          The CSS selector to target for the generated rules.\n * @param {Object} layoutDefinitions Layout definitions object.\n * @param {string} layoutType        The layout type (e.g. `default` or `flex`).\n * @param {string} blockGapValue     The current blockGap value to be applied.\n * @return {string} The generated CSS rules.\n */\nexport function getBlockGapCSS(\n\tselector,\n\tlayoutDefinitions = LAYOUT_DEFINITIONS,\n\tlayoutType,\n\tblockGapValue\n) {\n\tlet output = '';\n\tif (\n\t\tlayoutDefinitions?.[ layoutType ]?.spacingStyles?.length &&\n\t\tblockGapValue\n\t) {\n\t\tlayoutDefinitions[ layoutType ].spacingStyles.forEach( ( gapStyle ) => {\n\t\t\toutput += `${ appendSelectors(\n\t\t\t\tselector,\n\t\t\t\tgapStyle.selector.trim()\n\t\t\t) } { `;\n\t\t\toutput += Object.entries( gapStyle.rules )\n\t\t\t\t.map(\n\t\t\t\t\t( [ cssProperty, value ] ) =>\n\t\t\t\t\t\t`${ cssProperty }: ${ value ? value : blockGapValue }`\n\t\t\t\t)\n\t\t\t\t.join( '; ' );\n\t\t\toutput += '; }';\n\t\t} );\n\t}\n\treturn output;\n}\n\n/**\n * Helper method to assign contextual info to clarify\n * alignment settings.\n *\n * Besides checking if `contentSize` and `wideSize` have a\n * value, we now show this information only if their values\n * are not a `css var`. This needs to change when parsing\n * css variables land.\n *\n * @see https://github.com/WordPress/gutenberg/pull/34710#issuecomment-918000752\n *\n * @param {Object} layout The layout object.\n * @return {Object} An object with contextual info per alignment.\n */\nexport function getAlignmentsInfo( layout ) {\n\tconst { contentSize, wideSize, type = 'default' } = layout;\n\tconst alignmentInfo = {};\n\tconst sizeRegex =\n\t\t/^(?!0)\\d+(px|em|rem|vw|vh|%|svw|lvw|dvw|svh|lvh|dvh|vi|svi|lvi|dvi|vb|svb|lvb|dvb|vmin|svmin|lvmin|dvmin|vmax|svmax|lvmax|dvmax)?$/i;\n\tif ( sizeRegex.test( contentSize ) && type === 'constrained' ) {\n\t\t// translators: %s: container size (i.e. 600px etc)\n\t\talignmentInfo.none = sprintf( __( 'Max %s wide' ), contentSize );\n\t}\n\tif ( sizeRegex.test( wideSize ) ) {\n\t\t// translators: %s: container size (i.e. 600px etc)\n\t\talignmentInfo.wide = sprintf( __( 'Max %s wide' ), wideSize );\n\t}\n\treturn alignmentInfo;\n}\n"],"mappings":";;;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AAKA,IAAAC,YAAA,GAAAD,OAAA;AARA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,eAAeA,CAAEC,SAAS,EAAEC,MAAM,GAAG,EAAE,EAAG;EACzD;EACA;EACA;EACA;EACA;;EAEA,OAAOD,SAAS,CACdE,KAAK,CAAE,GAAI,CAAC,CACZC,GAAG,CACDC,WAAW,IACX,0BAA0BA,WAAa,GACvCH,MAAM,GAAI,IAAIA,MAAQ,EAAC,GAAG,EAC1B,EACH,CAAC,CACAI,IAAI,CAAE,GAAI,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAC7BC,QAAQ,EACRC,iBAAiB,GAAGC,+BAAkB,EACtCC,UAAU,EACVC,aAAa,EACZ;EACD,IAAIC,MAAM,GAAG,EAAE;EACf,IACCJ,iBAAiB,GAAIE,UAAU,CAAE,EAAEG,aAAa,EAAEC,MAAM,IACxDH,aAAa,EACZ;IACDH,iBAAiB,CAAEE,UAAU,CAAE,CAACG,aAAa,CAACE,OAAO,CAAIC,QAAQ,IAAM;MACtEJ,MAAM,IAAK,GAAGb,eAAe,CAC5BQ,QAAQ,EACRS,QAAQ,CAACT,QAAQ,CAACU,IAAI,CAAC,CACxB,CAAG,KAAI;MACPL,MAAM,IAAIM,MAAM,CAACC,OAAO,CAAEH,QAAQ,CAACI,KAAM,CAAC,CACxCjB,GAAG,CACH,CAAE,CAAEkB,WAAW,EAAEC,KAAK,CAAE,KACtB,GAAGD,WAAa,KAAKC,KAAK,GAAGA,KAAK,GAAGX,aAAe,EACvD,CAAC,CACAN,IAAI,CAAE,IAAK,CAAC;MACdO,MAAM,IAAI,KAAK;IAChB,CAAE,CAAC;EACJ;EACA,OAAOA,MAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASW,iBAAiBA,CAAEC,MAAM,EAAG;EAC3C,MAAM;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,IAAI,GAAG;EAAU,CAAC,GAAGH,MAAM;EAC1D,MAAMI,aAAa,GAAG,CAAC,CAAC;EACxB,MAAMC,SAAS,GACd,qIAAqI;EACtI,IAAKA,SAAS,CAACC,IAAI,CAAEL,WAAY,CAAC,IAAIE,IAAI,KAAK,aAAa,EAAG;IAC9D;IACAC,aAAa,CAACG,IAAI,GAAG,IAAAC,aAAO,EAAE,IAAAC,QAAE,EAAE,aAAc,CAAC,EAAER,WAAY,CAAC;EACjE;EACA,IAAKI,SAAS,CAACC,IAAI,CAAEJ,QAAS,CAAC,EAAG;IACjC;IACAE,aAAa,CAACM,IAAI,GAAG,IAAAF,aAAO,EAAE,IAAAC,QAAE,EAAE,aAAc,CAAC,EAAEP,QAAS,CAAC;EAC9D;EACA,OAAOE,aAAa;AACrB"}