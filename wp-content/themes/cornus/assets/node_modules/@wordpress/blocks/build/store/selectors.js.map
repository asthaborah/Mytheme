{"version":3,"names":["_rememo","_interopRequireDefault","require","_removeAccents","_compose","_utils","getNormalizedBlockType","state","nameOrType","getBlockType","getBlockTypes","exports","createSelector","Object","values","blockTypes","name","getBlockStyles","blockStyles","getBlockVariations","blockName","scope","variations","blockVariations","filter","variation","includes","getActiveBlockVariation","attributes","match","find","Array","isArray","isActive","blockType","attributeKeys","keys","definedAttributes","attribute","length","every","getDefaultBlockVariation","defaultVariation","reverse","isDefault","getCategories","categories","getCollections","collections","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getGroupingBlockName","groupingBlockName","getChildBlockNames","parent","map","getBlockSupport","feature","defaultSupports","supports","getValueFromObjectPath","hasBlockSupport","isMatchingSearchTerm","searchTerm","getNormalizedSearchTerm","pipe","term","removeAccents","toLowerCase","trim","normalizedSearchTerm","isSearchMatch","normalizedCandidate","title","keywords","some","category","description","hasChildBlocks","hasChildBlocksWithInserterSupport","childBlockName","__experimentalHasContentRoleAttribute","blockTypeName","entries","__experimentalRole"],"sources":["@wordpress/blocks/src/store/selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport removeAccents from 'remove-accents';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getValueFromObjectPath } from './utils';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('../api/registration').WPBlockVariationScope} WPBlockVariationScope */\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\n\n/**\n * Given a block name or block type object, returns the corresponding\n * normalized block type object.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object\n *\n * @return {Object} Block type object.\n */\nconst getNormalizedBlockType = ( state, nameOrType ) =>\n\t'string' === typeof nameOrType\n\t\t? getBlockType( state, nameOrType )\n\t\t: nameOrType;\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockTypes = useSelect(\n *         ( select ) => select( blocksStore ).getBlockTypes(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { blockTypes.map( ( block ) => (\n *                 <li key={ block.name }>{ block.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => Object.values( state.blockTypes ),\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlock = useSelect( ( select ) =>\n *         ( select ) => select( blocksStore ).getBlockType( 'core/paragraph' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { paragraphBlock &&\n *                 Object.entries( paragraphBlock.supports ).map(\n *                     ( blockSupportsEntry ) => {\n *                         const [ propertyName, value ] = blockSupportsEntry;\n *                         return (\n *                             <li\n *                                 key={ propertyName }\n *                             >{ `${ propertyName } : ${ value }` }</li>\n *                         );\n *                     }\n *                 ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns block styles by block name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const buttonBlockStyles = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockStyles( 'core/button' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { buttonBlockStyles &&\n *                 buttonBlockStyles.map( ( style ) => (\n *                     <li key={ style.name }>{ style.label }</li>\n *                 ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array?} Block Styles.\n */\nexport function getBlockStyles( state, name ) {\n\treturn state.blockStyles[ name ];\n}\n\n/**\n * Returns block variations by block name.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const socialLinkVariations = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockVariations( 'core/social-link' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { socialLinkVariations &&\n *                 socialLinkVariations.map( ( variation ) => (\n *                     <li key={ variation.name }>{ variation.title }</li>\n *             ) ) }\n *     </ul>\n *     );\n * };\n * ```\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = createSelector(\n\t( state, blockName, scope ) => {\n\t\tconst variations = state.blockVariations[ blockName ];\n\t\tif ( ! variations || ! scope ) {\n\t\t\treturn variations;\n\t\t}\n\t\treturn variations.filter( ( variation ) => {\n\t\t\t// For backward compatibility reasons, variation's scope defaults to\n\t\t\t// `block` and `inserter` when not set.\n\t\t\treturn ( variation.scope || [ 'block', 'inserter' ] ).includes(\n\t\t\t\tscope\n\t\t\t);\n\t\t} );\n\t},\n\t( state, blockName ) => [ state.blockVariations[ blockName ] ]\n);\n\n/**\n * Returns the active block variation for a given block based on its attributes.\n * Variations are determined by their `isActive` property.\n * Which is either an array of block attribute keys or a function.\n *\n * In case of an array of block attribute keys, the `attributes` are compared\n * to the variation's attributes using strict equality check.\n *\n * In case of function type, the function should accept a block's attributes\n * and the variation's attributes and determines if a variation is active.\n * A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.\n *\n * @param {Object}                state      Data state.\n * @param {string}                blockName  Name of block (example: “core/columns”).\n * @param {Object}                attributes Block attributes used to determine active variation.\n * @param {WPBlockVariationScope} [scope]    Block variation scope name.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { store as blockEditorStore } from '@wordpress/block-editor';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     // This example assumes that a core/embed block is the first block in the Block Editor.\n *     const activeBlockVariation = useSelect( ( select ) => {\n *         // Retrieve the list of blocks.\n *         const [ firstBlock ] = select( blockEditorStore ).getBlocks()\n *\n *         // Return the active block variation for the first block.\n *         return select( blocksStore ).getActiveBlockVariation(\n *             firstBlock.name,\n *             firstBlock.attributes\n *         );\n *     }, [] );\n *\n *     return activeBlockVariation && activeBlockVariation.name === 'spotify' ? (\n *         <p>{ __( 'Spotify variation' ) }</p>\n *         ) : (\n *         <p>{ __( 'Other variation' ) }</p>\n *     );\n * };\n * ```\n *\n * @return {(WPBlockVariation|undefined)} Active block variation.\n */\nexport function getActiveBlockVariation( state, blockName, attributes, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\tconst match = variations?.find( ( variation ) => {\n\t\tif ( Array.isArray( variation.isActive ) ) {\n\t\t\tconst blockType = getBlockType( state, blockName );\n\t\t\tconst attributeKeys = Object.keys( blockType?.attributes || {} );\n\t\t\tconst definedAttributes = variation.isActive.filter(\n\t\t\t\t( attribute ) => attributeKeys.includes( attribute )\n\t\t\t);\n\t\t\tif ( definedAttributes.length === 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn definedAttributes.every(\n\t\t\t\t( attribute ) =>\n\t\t\t\t\tattributes[ attribute ] ===\n\t\t\t\t\tvariation.attributes[ attribute ]\n\t\t\t);\n\t\t}\n\n\t\treturn variation.isActive?.( attributes, variation.attributes );\n\t} );\n\n\treturn match;\n}\n\n/**\n * Returns the default block variation for the given block type.\n * When there are multiple variations annotated as the default one,\n * the last added item is picked. This simplifies registering overrides.\n * When there is no default variation set, it returns the first item.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const defaultEmbedBlockVariation = useSelect( ( select ) =>\n *         select( blocksStore ).getDefaultBlockVariation( 'core/embed' ),\n *         []\n *     );\n *\n *     return (\n *         defaultEmbedBlockVariation && (\n *             <p>\n *                 { sprintf(\n *                     __( 'core/embed default variation: %s' ),\n *                     defaultEmbedBlockVariation.title\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {?WPBlockVariation} The default block variation.\n */\nexport function getDefaultBlockVariation( state, blockName, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\tconst defaultVariation = [ ...variations ]\n\t\t.reverse()\n\t\t.find( ( { isDefault } ) => !! isDefault );\n\n\treturn defaultVariation || variations[ 0 ];\n}\n\n/**\n * Returns all the available block categories.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect, } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockCategories = useSelect( ( select ) =>\n *         select( blocksStore ).getCategories(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { blockCategories.map( ( category ) => (\n *                 <li key={ category.slug }>{ category.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {WPBlockCategory[]} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns all the available collections.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockCollections = useSelect( ( select ) =>\n *         select( blocksStore ).getCollections(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { Object.values( blockCollections ).length > 0 &&\n *                 Object.values( blockCollections ).map( ( collection ) => (\n *                     <li key={ collection.title }>{ collection.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Object} Collections list.\n */\nexport function getCollections( state ) {\n\treturn state.collections;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const defaultBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getDefaultBlockName(),\n *         []\n *     );\n *\n *     return (\n *         defaultBlockName && (\n *             <p>\n *                 { sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const freeformFallbackBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getFreeformFallbackBlockName(),\n *         []\n *     );\n *\n *     return (\n *         freeformFallbackBlockName && (\n *             <p>\n *                 { sprintf( __(\n *                     'Freeform fallback block name: %s' ),\n *                     freeformFallbackBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const unregisteredFallbackBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getUnregisteredFallbackBlockName(),\n *         []\n *     );\n *\n *     return (\n *         unregisteredFallbackBlockName && (\n *             <p>\n *                 { sprintf( __(\n *                     'Unregistered fallback block name: %s' ),\n *                     unregisteredFallbackBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling the grouping of blocks.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const groupingBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getGroupingBlockName(),\n *         []\n *     );\n *\n *     return (\n *         groupingBlockName && (\n *             <p>\n *                 { sprintf(\n *                     __( 'Default grouping block name: %s' ),\n *                     groupingBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling the grouping of blocks.\n */\nexport function getGroupingBlockName( state ) {\n\treturn state.groupingBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const childBlockNames = useSelect( ( select ) =>\n *         select( blocksStore ).getChildBlockNames( 'core/navigation' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { childBlockNames &&\n *                 childBlockNames.map( ( child ) => (\n *                     <li key={ child }>{ child }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn getBlockTypes( state )\n\t\t\t.filter( ( blockType ) => {\n\t\t\t\treturn blockType.parent?.includes( blockName );\n\t\t\t} )\n\t\t\t.map( ( { name } ) => name );\n\t},\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {Array|string}    feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlockSupportValue = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockSupport( 'core/paragraph', 'anchor' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/paragraph supports.anchor value: %s' ),\n *                 paragraphBlockSupportValue\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = (\n\tstate,\n\tnameOrType,\n\tfeature,\n\tdefaultSupports\n) => {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\tif ( ! blockType?.supports ) {\n\t\treturn defaultSupports;\n\t}\n\n\treturn getValueFromObjectPath(\n\t\tblockType.supports,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlockSupportClassName = useSelect( ( select ) =>\n *         select( blocksStore ).hasBlockSupport( 'core/paragraph', 'className' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/paragraph supports custom class name?: %s' ),\n *                 paragraphBlockSupportClassName\n *             ) }\n *         /p>\n *     );\n * };\n * ```\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block type by the given name or object value matches a\n * search term, or false otherwise.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object.\n * @param {string}          searchTerm Search term by which to filter.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const termFound = useSelect(\n *         ( select ) =>\n *             select( blocksStore ).isMatchingSearchTerm(\n *                 'core/navigation',\n *                 'theme'\n *             ),\n *             []\n *         );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __(\n *                     'Search term was found in the title, keywords, category or description in block.json: %s'\n *                 ),\n *                 termFound\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {Object[]} Whether block type matches search term.\n */\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm ) {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\tconst getNormalizedSearchTerm = pipe( [\n\t\t// Disregard diacritics.\n\t\t//  Input: \"média\"\n\t\t( term ) => removeAccents( term ?? '' ),\n\n\t\t// Lowercase.\n\t\t//  Input: \"MEDIA\"\n\t\t( term ) => term.toLowerCase(),\n\n\t\t// Strip leading and trailing whitespace.\n\t\t//  Input: \" media \"\n\t\t( term ) => term.trim(),\n\t] );\n\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\n\n\tconst isSearchMatch = pipe( [\n\t\tgetNormalizedSearchTerm,\n\t\t( normalizedCandidate ) =>\n\t\t\tnormalizedCandidate.includes( normalizedSearchTerm ),\n\t] );\n\n\treturn (\n\t\tisSearchMatch( blockType.title ) ||\n\t\tblockType.keywords?.some( isSearchMatch ) ||\n\t\tisSearchMatch( blockType.category ) ||\n\t\t( typeof blockType.description === 'string' &&\n\t\t\tisSearchMatch( blockType.description ) )\n\t);\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const navigationBlockHasChildBlocks = useSelect( ( select ) =>\n *         select( blocksStore ).hasChildBlocks( 'core/navigation' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/navigation has child blocks: %s' ),\n *                 navigationBlockHasChildBlocks\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const navigationBlockHasChildBlocksWithInserterSupport = useSelect( ( select ) =>\n *         select( blocksStore ).hasChildBlocksWithInserterSupport(\n *             'core/navigation'\n *         ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/navigation has child blocks with inserter support: %s' ),\n *                 navigationBlockHasChildBlocksWithInserterSupport\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).some( ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __experimentalHasContentRoleAttribute = createSelector(\n\t( state, blockTypeName ) => {\n\t\tconst blockType = getBlockType( state, blockTypeName );\n\t\tif ( ! blockType ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.entries( blockType.attributes ).some(\n\t\t\t( [ , { __experimentalRole } ] ) => __experimentalRole === 'content'\n\t\t);\n\t},\n\t( state, blockTypeName ) => [\n\t\tstate.blockTypes[ blockTypeName ]?.attributes,\n\t]\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,cAAA,GAAAF,sBAAA,CAAAC,OAAA;AAKA,IAAAE,QAAA,GAAAF,OAAA;AAKA,IAAAG,MAAA,GAAAH,OAAA;AAdA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,GAAGA,CAAEC,KAAK,EAAEC,UAAU,KACjD,QAAQ,KAAK,OAAOA,UAAU,GAC3BC,YAAY,CAAEF,KAAK,EAAEC,UAAW,CAAC,GACjCA,UAAU;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAME,aAAa,GAAAC,OAAA,CAAAD,aAAA,GAAG,IAAAE,eAAc,EACxCL,KAAK,IAAMM,MAAM,CAACC,MAAM,CAAEP,KAAK,CAACQ,UAAW,CAAC,EAC5CR,KAAK,IAAM,CAAEA,KAAK,CAACQ,UAAU,CAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASN,YAAYA,CAAEF,KAAK,EAAES,IAAI,EAAG;EAC3C,OAAOT,KAAK,CAACQ,UAAU,CAAEC,IAAI,CAAE;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAAEV,KAAK,EAAES,IAAI,EAAG;EAC7C,OAAOT,KAAK,CAACW,WAAW,CAA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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAAExC,KAAK,EAAG;EACvC,OAAOA,KAAK,CAACyC,WAAW;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,mBAAmBA,CAAE1C,KAAK,EAAG;EAC5C,OAAOA,KAAK,CAAC2C,gBAAgB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,4BAA4BA,CAAE5C,KAAK,EAAG;EACrD,OAAOA,KAAK,CAAC6C,yBAAyB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,gCAAgCA,CAAE9C,KAAK,EAAG;EACzD,OAAOA,KAAK,CAAC+C,6BAA6B;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,CAAEhD,KAAK,EAAG;EAC7C,OAAOA,KAAK,CAACiD,iBAAiB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"}