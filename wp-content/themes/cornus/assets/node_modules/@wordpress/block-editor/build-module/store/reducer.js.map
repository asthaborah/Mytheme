{"version":3,"names":["fastDeepEqual","pipe","combineReducers","select","store","blocksStore","PREFERENCES_DEFAULTS","SETTINGS_DEFAULTS","insertAt","moveTo","identity","x","mapBlockOrder","blocks","rootClientId","result","Map","current","set","forEach","block","clientId","innerBlocks","push","order","subClientId","mapBlockParents","stack","length","parent","currentBlocks","shift","flattenBlocks","transform","getFlattenedClientIds","getFlattenedBlocksWithoutAttributes","attributes","restBlock","getFlattenedBlockAttributes","hasSameKeys","a","b","Object","keys","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","updateBlockTreeForBlocks","state","treeToUpdate","tree","flattenedBlocks","assign","get","byClientId","map","subBlock","updateParentInnerBlocksInTree","updatedClientIds","updateChildrenOfUpdatedClientIds","uncontrolledParents","Set","controlledParents","parents","controlledInnerBlocks","add","withBlockTree","reducer","newState","inserterClientIds","replacedClientIds","concat","filter","key","delete","parentsOfRemovedBlocks","removedClientIds","updatedBlockUids","fromRootClientId","toRootClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","explicitPersistent","nextState","nextIsPersistentChange","_state$isPersistentCh","isPersistentChange","isExplicitPersistentChange","_state$isPersistentCh2","withIgnoredBlockChange","IGNORED_ACTION_TYPES","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","keepControlledInnerBlocks","withBlockReset","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","stateAfterInsertOrder","_key","withSaveReusableBlock","id","withResetControlledBlocks","tempState","value","changes","updates","values","every","hasChange","_action$attributes","updatedAttributeEntries","entries","uniqueByBlock","hasUpdatedAttributes","existingAttributes","newAttributes","_state$get","blockOrder","subState","mappedBlocks","_state$get$filter","fromIndex","indexOf","includes","firstClientId","firstIndex","lastClientId","newSubOrder","reduce","_order$filter","hasControlledInnerBlocks","isBlockInterfaceHidden","isTyping","isDragging","draggedBlocks","blockVisibility","selectionHelper","updateSelection","blockToSelect","indexToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","removalPromptData","selectPrevious","message","blockRemovalRules","rules","initialPosition","blocksMode","insertionPoint","__unstableWithInserter","operation","nearestSide","template","isValid","settings","reset","preferences","prevState","blockName","match","getActiveBlockVariation","insertUsage","time","count","blockListSettings","fromEntries","hasOwnProperty","removedBlock","restBlocks","editorMode","mode","hasBlockMovingClientId","lastBlockAttributesChange","accumulator","highlightedBlock","isHighlighted","lastBlockInserted","source","meta","temporarilyEditingAsBlocks","temporarilyEditingFocusModeRevert","focusModeToRevert","blockEditingModes","openedBlockSettingsMenu","_action$clientId","styleOverrides","style","registeredInserterMediaCategories","category","lastFocus","combinedReducers","withAutomaticChangeReset","automaticChangeStatus"],"sources":["@wordpress/block-editor/src/store/reducer.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\nimport { combineReducers, select } from '@wordpress/data';\nimport { store as blocksStore } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\nconst identity = ( x ) => x;\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = new Map();\n\tconst current = [];\n\tresult.set( rootClientId, current );\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\t\tcurrent.push( clientId );\n\t\tmapBlockOrder( innerBlocks, clientId ).forEach(\n\t\t\t( order, subClientId ) => {\n\t\t\t\tresult.set( subClientId, order );\n\t\t\t}\n\t\t);\n\t} );\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\tconst result = [];\n\tconst stack = [ [ rootClientId, blocks ] ];\n\twhile ( stack.length ) {\n\t\tconst [ parent, currentBlocks ] = stack.shift();\n\t\tcurrentBlocks.forEach( ( { innerBlocks, ...block } ) => {\n\t\t\tresult.push( [ block.clientId, parent ] );\n\t\t\tif ( innerBlocks?.length ) {\n\t\t\t\tstack.push( [ block.clientId, innerBlocks ] );\n\t\t\t}\n\t\t} );\n\t}\n\treturn result;\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array}    blocks    Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Array} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = [];\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult.push( [ block.clientId, transform( block ) ] );\n\t}\n\n\treturn result;\n}\n\nfunction getFlattenedClientIds( blocks ) {\n\tconst result = {};\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = true;\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => {\n\t\tconst { attributes, ...restBlock } = block;\n\t\treturn restBlock;\n\t} );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn fastDeepEqual( Object.keys( a ), Object.keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tfastDeepEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\nfunction updateBlockTreeForBlocks( state, blocks ) {\n\tconst treeToUpdate = state.tree;\n\tconst stack = [ ...blocks ];\n\tconst flattenedBlocks = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst block = stack.shift();\n\t\tstack.push( ...block.innerBlocks );\n\t\tflattenedBlocks.push( ...block.innerBlocks );\n\t}\n\t// Create objects before mutating them, that way it's always defined.\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set( block.clientId, {} );\n\t}\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set(\n\t\t\tblock.clientId,\n\t\t\tObject.assign( treeToUpdate.get( block.clientId ), {\n\t\t\t\t...state.byClientId.get( block.clientId ),\n\t\t\t\tattributes: state.attributes.get( block.clientId ),\n\t\t\t\tinnerBlocks: block.innerBlocks.map( ( subBlock ) =>\n\t\t\t\t\ttreeToUpdate.get( subBlock.clientId )\n\t\t\t\t),\n\t\t\t} )\n\t\t);\n\t}\n}\n\nfunction updateParentInnerBlocksInTree(\n\tstate,\n\tupdatedClientIds,\n\tupdateChildrenOfUpdatedClientIds = false\n) {\n\tconst treeToUpdate = state.tree;\n\tconst uncontrolledParents = new Set( [] );\n\tconst controlledParents = new Set();\n\tfor ( const clientId of updatedClientIds ) {\n\t\tlet current = updateChildrenOfUpdatedClientIds\n\t\t\t? clientId\n\t\t\t: state.parents.get( clientId );\n\t\tdo {\n\t\t\tif ( state.controlledInnerBlocks[ current ] ) {\n\t\t\t\t// Should stop on controlled blocks.\n\t\t\t\t// If we reach a controlled parent, break out of the loop.\n\t\t\t\tcontrolledParents.add( current );\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// Else continue traversing up through parents.\n\t\t\t\tuncontrolledParents.add( current );\n\t\t\t\tcurrent = state.parents.get( current );\n\t\t\t}\n\t\t} while ( current !== undefined );\n\t}\n\n\t// To make sure the order of assignments doesn't matter,\n\t// we first create empty objects and mutates the inner blocks later.\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.set( clientId, { ...treeToUpdate.get( clientId ) } );\n\t}\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.get( clientId ).innerBlocks = (\n\t\t\tstate.order.get( clientId ) || []\n\t\t).map( ( subClientId ) => treeToUpdate.get( subClientId ) );\n\t}\n\n\t// Controlled parent blocks, need a dedicated key for their inner blocks\n\t// to be used when doing getBlocks( controlledBlockClientId ).\n\tfor ( const clientId of controlledParents ) {\n\t\ttreeToUpdate.set( 'controlled||' + clientId, {\n\t\t\tinnerBlocks: ( state.order.get( clientId ) || [] ).map(\n\t\t\t\t( subClientId ) => treeToUpdate.get( subClientId )\n\t\t\t),\n\t\t} );\n\t}\n}\n\n/**\n * Higher-order reducer intended to compute full block objects key for each block in the post.\n * This is a denormalization to optimize the performance of the getBlock selectors and avoid\n * recomputing the block objects and avoid heavy memoization.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockTree =\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\tconst newState = reducer( state, action );\n\n\t\tif ( newState === state ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tnewState.tree = state.tree ? state.tree : new Map();\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.rootClientId ? [ action.rootClientId ] : [ '' ],\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tnewState.tree.set( action.clientId, {\n\t\t\t\t\t...newState.tree.get( action.clientId ),\n\t\t\t\t\t...newState.byClientId.get( action.clientId ),\n\t\t\t\t\tattributes: newState.attributes.get( action.clientId ),\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t[ action.clientId ],\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.clientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.tree.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.clientIds,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst inserterClientIds = getFlattenedClientIds(\n\t\t\t\t\taction.blocks\n\t\t\t\t);\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.replacedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\t// Controlled inner blocks are only removed\n\t\t\t\t\t\t// if the block doesn't move to another position\n\t\t\t\t\t\t// otherwise their content will be lost.\n\t\t\t\t\t\taction.replacedClientIds\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t( clientId ) => ! inserterClientIds[ clientId ]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.map( ( clientId ) => 'controlled||' + clientId )\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.blocks.map( ( b ) => b.clientId ),\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\t// If there are no replaced blocks, it means we're removing blocks so we need to update their parent.\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.removedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\taction.removedClientIds.map(\n\t\t\t\t\t\t\t( clientId ) => 'controlled||' + clientId\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t\t} else {\n\t\t\t\t\tupdatedBlockUids.push( '' );\n\t\t\t\t}\n\t\t\t\tif ( action.toRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_UP':\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst updatedBlockUids = [\n\t\t\t\t\taction.rootClientId ? action.rootClientId : '',\n\t\t\t\t];\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tnewState.attributes.forEach( ( attributes, clientId ) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnewState.byClientId.get( clientId ).name ===\n\t\t\t\t\t\t\t'core/block' &&\n\t\t\t\t\t\tattributes.ref === action.updatedId\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdatedBlockUids.push( clientId );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdatedBlockUids.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.byClientId.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t\tinnerBlocks: newState.tree.get( clientId ).innerBlocks,\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn newState;\n\t};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\tlet explicitPersistent;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tlet nextIsPersistentChange;\n\t\tif ( action.type === 'SET_EXPLICIT_PERSISTENT' ) {\n\t\t\texplicitPersistent = action.isPersistentChange;\n\t\t\tnextIsPersistentChange = state.isPersistentChange ?? true;\n\t\t}\n\n\t\tif ( explicitPersistent !== undefined ) {\n\t\t\tnextIsPersistentChange = explicitPersistent;\n\t\t\treturn nextIsPersistentChange === nextState.isPersistentChange\n\t\t\t\t? nextState\n\t\t\t\t: {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t\t  };\n\t\t}\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tnextIsPersistentChange = state?.isPersistentChange ?? true;\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order.get( result[ i ] ) ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order.get( result[ i ] ) );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'RESET_BLOCKS' ) {\n\t\tconst newState = {\n\t\t\t...state,\n\t\t\tbyClientId: new Map(\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks )\n\t\t\t),\n\t\t\tattributes: new Map( getFlattenedBlockAttributes( action.blocks ) ),\n\t\t\torder: mapBlockOrder( action.blocks ),\n\t\t\tparents: new Map( mapBlockParents( action.blocks ) ),\n\t\t\tcontrolledInnerBlocks: {},\n\t\t};\n\n\t\tnewState.tree = new Map( state?.tree );\n\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\tnewState.tree.set( '', {\n\t\t\tinnerBlocks: action.blocks.map( ( subBlock ) =>\n\t\t\t\tnewState.tree.get( subBlock.clientId )\n\t\t\t),\n\t\t} );\n\n\t\treturn newState;\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order.get( action.rootClientId ) ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order.get( action.rootClientId ),\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the controlled inner blocks to the blocks tree and\n\t\t// preserve their block order. Otherwise, an inner block controller's blocks\n\t\t// will be deleted entirely from its entity.\n\t\tconst stateAfterInsertOrder = new Map( stateAfterInsert.order );\n\t\tObject.keys( nestedControllers ).forEach( ( key ) => {\n\t\t\tif ( state.order.get( key ) ) {\n\t\t\t\tstateAfterInsertOrder.set( key, state.order.get( key ) );\n\t\t\t}\n\t\t} );\n\t\tstateAfterInsert.order = stateAfterInsertOrder;\n\t\tstateAfterInsert.tree = new Map( stateAfterInsert.tree );\n\t\tObject.keys( nestedControllers ).forEach( ( _key ) => {\n\t\t\tconst key = `controlled||${ _key }`;\n\t\t\tif ( state.tree.has( key ) ) {\n\t\t\t\tstateAfterInsert.tree.set( key, state.tree.get( key ) );\n\t\t\t}\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one.\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\t\tstate.attributes = new Map( state.attributes );\n\t\tstate.attributes.forEach( ( attributes, clientId ) => {\n\t\t\tconst { name } = state.byClientId.get( clientId );\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\tstate.attributes.set( clientId, {\n\t\t\t\t\t...attributes,\n\t\t\t\t\tref: updatedId,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn reducer( state, action );\n};\n/**\n * Higher-order reducer which removes blocks from state when switching parent block controlled state.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withResetControlledBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t// when switching a block from controlled to uncontrolled or inverse,\n\t\t// we need to remove its content first.\n\t\tconst tempState = reducer( state, {\n\t\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\t\trootClientId: action.clientId,\n\t\t\tblocks: [],\n\t\t} );\n\t\treturn reducer( tempState, action );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = pipe(\n\tcombineReducers,\n\twithSaveReusableBlock, // Needs to be before withBlockCache.\n\twithBlockTree, // Needs to be before withInnerBlocksRemoveCascade.\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // Needs to be after withInnerBlocksRemoveCascade.\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange,\n\twithResetControlledBlocks\n)( {\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tbyClientId( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known.\n\t\t\t\tif ( ! state.has( action.clientId ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst { attributes, ...changes } = action.updates;\n\t\t\t\tif ( Object.values( changes ).length === 0 ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...changes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tattributes( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state.get( action.clientId ) ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state.get( id ) ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tlet hasChange = false;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tconst updatedAttributeEntries = Object.entries(\n\t\t\t\t\t\taction.uniqueByBlock\n\t\t\t\t\t\t\t? action.attributes[ clientId ]\n\t\t\t\t\t\t\t: action.attributes ?? {}\n\t\t\t\t\t);\n\t\t\t\t\tif ( updatedAttributeEntries.length === 0 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet hasUpdatedAttributes = false;\n\t\t\t\t\tconst existingAttributes = state.get( clientId );\n\t\t\t\t\tconst newAttributes = {};\n\t\t\t\t\tupdatedAttributeEntries.forEach( ( [ key, value ] ) => {\n\t\t\t\t\t\tif ( existingAttributes[ key ] !== value ) {\n\t\t\t\t\t\t\thasUpdatedAttributes = true;\n\t\t\t\t\t\t\tnewAttributes[ key ] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\thasChange = hasChange || hasUpdatedAttributes;\n\t\t\t\t\tif ( hasUpdatedAttributes ) {\n\t\t\t\t\t\tnewState.set( clientId, {\n\t\t\t\t\t\t\t...existingAttributes,\n\t\t\t\t\t\t\t...newAttributes,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn hasChange ? newState : state;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\torder( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst blockOrder = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tblockOrder.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\t'',\n\t\t\t\t\t( state.get( '' ) ?? [] ).concat( blockOrder[ '' ] )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state.get( rootClientId ) || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tinsertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks.get( rootClientId ),\n\t\t\t\t\t\tindex\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state.get( toRootClientId ).length } = action;\n\n\t\t\t\t// Moving inside the same parent block.\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state.get( toRootClientId );\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\tconst newState = new Map( state );\n\t\t\t\t\tnewState.set(\n\t\t\t\t\t\ttoRootClientId,\n\t\t\t\t\t\tmoveTo(\n\t\t\t\t\t\t\tstate.get( toRootClientId ),\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn newState;\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another.\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\tfromRootClientId,\n\t\t\t\t\tstate\n\t\t\t\t\t\t.get( fromRootClientId )\n\t\t\t\t\t\t?.filter( ( id ) => ! clientIds.includes( id ) ) ?? []\n\t\t\t\t);\n\t\t\t\tnewState.set(\n\t\t\t\t\ttoRootClientId,\n\t\t\t\t\tinsertAt( state.get( toRootClientId ), clientIds, index )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif ( ! subState.length || firstClientId === subState[ 0 ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst lastClientId = clientIds[ clientIds.length - 1 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tlastClientId === subState[ subState.length - 1 ]\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder = Object.values( order ).reduce(\n\t\t\t\t\t\t( result, subClientId ) => {\n\t\t\t\t\t\t\tif ( subClientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\treturn [ ...result, ...mappedBlocks.get( '' ) ];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( clientIds.indexOf( subClientId ) === -1 ) {\n\t\t\t\t\t\t\t\tresult.push( subClientId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[]\n\t\t\t\t\t);\n\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\t// Remove inner block ordering for removed blocks.\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder =\n\t\t\t\t\t\torder?.filter(\n\t\t\t\t\t\t\t( id ) => ! action.removedClientIds.includes( id )\n\t\t\t\t\t\t) ?? [];\n\t\t\t\t\tif ( newSubOrder.length !== order.length ) {\n\t\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.clientIds.forEach( ( id ) => {\n\t\t\t\t\tnewState.set( id, action.toRootClientId || '' );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\tstate.get( action.clientIds[ 0 ] )\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning visibility status of block interface.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isBlockInterfaceHidden( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'HIDE_BLOCK_INTERFACE':\n\t\t\treturn true;\n\n\t\tcase 'SHOW_BLOCK_INTERFACE':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragging state. It is possible for a user to be dragging\n * data from outside of the editor, so this state is separate from `draggedBlocks`.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isDragging( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_DRAGGING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}   action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking the visible blocks.\n *\n * @param {Record<string,boolean>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string,boolean>} Block visibility.\n */\nexport function blockVisibility( state = {}, action ) {\n\tif ( action.type === 'SET_BLOCK_VISIBILITY' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.updates,\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selectionHelper( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst blockToSelect =\n\t\t\t\taction.blocks[ action.indexToSelect ] ||\n\t\t\t\taction.blocks[ action.blocks.length - 1 ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the selection state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\tif ( action.clientId ) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t\t},\n\t\t\t\t\tselectionEnd: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: action.start || state.selectionStart,\n\t\t\t\tselectionEnd: action.end || state.selectionEnd,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\tconst { selectionStart, selectionEnd } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart,\n\t\t\t\tselectionEnd,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\tconst { start, end } = action;\n\n\t\t\tif (\n\t\t\t\tstart === state.selectionStart?.clientId &&\n\t\t\t\tend === state.selectionEnd?.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: { clientId: start },\n\t\t\t\tselectionEnd: { clientId: end },\n\t\t\t};\n\t\tcase 'RESET_BLOCKS':\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\n\n\t\t\t// Do nothing if there's no selected block.\n\t\t\tif ( ! startClientId && ! endClientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === startClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {},\n\t\t\t\t\tselectionEnd: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === endClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tselectionEnd: state.selectionStart,\n\t\t\t\t};\n\t\t\t}\n\t}\n\n\tconst selectionStart = selectionHelper( state.selectionStart, action );\n\tconst selectionEnd = selectionHelper( state.selectionEnd, action );\n\n\tif (\n\t\tselectionStart === state.selectionStart &&\n\t\tselectionEnd === state.selectionEnd\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\tselectionStart,\n\t\tselectionEnd,\n\t};\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the data needed to display a prompt when certain blocks\n * are removed, or `false` if no such prompt is requested.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nfunction removalPromptData( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'DISPLAY_BLOCK_REMOVAL_PROMPT':\n\t\t\tconst { clientIds, selectPrevious, message } = action;\n\t\t\treturn {\n\t\t\t\tclientIds,\n\t\t\t\tselectPrevious,\n\t\t\t\tmessage,\n\t\t\t};\n\t\tcase 'CLEAR_BLOCK_REMOVAL_PROMPT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning any rules that a block editor may provide in order to\n * prevent a user from accidentally removing certain blocks. These rules are\n * then used to display a confirmation prompt to the user. For instance, in the\n * Site Editor, the Query Loop block is important enough to warrant such\n * confirmation.\n *\n * The data is a record whose keys are block types (e.g. 'core/query') and\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\n * displays a list of posts or pages.').\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {Record<string,string>} Updated state.\n */\nfunction blockRemovalRules( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_BLOCK_REMOVAL_RULES':\n\t\t\treturn action.rules;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the initial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {number|null} Initial position: 0, -1 or null.\n */\nexport function initialPosition( state = null, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\taction.initialPosition !== undefined\n\t) {\n\t\treturn action.initialPosition;\n\t} else if (\n\t\t[\n\t\t\t'MULTI_SELECT',\n\t\t\t'SELECT_BLOCK',\n\t\t\t'RESET_SELECTION',\n\t\t\t'INSERT_BLOCKS',\n\t\t\t'REPLACE_INNER_BLOCKS',\n\t\t].includes( action.type )\n\t) {\n\t\treturn action.initialPosition;\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT': {\n\t\t\tconst {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t\tnearestSide,\n\t\t\t} = action;\n\t\t\tconst nextState = {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t\tnearestSide,\n\t\t\t};\n\n\t\t\t// Bail out updates if the states are the same.\n\t\t\treturn fastDeepEqual( state, nextState ) ? state : nextState;\n\t\t}\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\tif ( action.reset ) {\n\t\t\t\treturn {\n\t\t\t\t\t...SETTINGS_DEFAULTS,\n\t\t\t\t\t...action.settings,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tconst { attributes, name: blockName } = block;\n\t\t\t\tlet id = blockName;\n\t\t\t\t// If a block variation match is found change the name to be the same with the\n\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\n\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\n\t\t\t\t\tblockName,\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\tif ( match?.name ) {\n\t\t\t\t\tid += '/' + match.name;\n\t\t\t\t}\n\t\t\t\tif ( blockName === 'core/block' ) {\n\t\t\t\t\tid += '/' + attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).filter(\n\t\t\t\t\t( [ id ] ) => ! action.clientIds.includes( id )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\tconst { [ clientId ]: removedBlock, ...restBlocks } = state;\n\t\t\t\t\treturn restBlocks;\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( fastDeepEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning which mode is enabled.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function editorMode( state = 'edit', action ) {\n\t// Let inserting block in navigation mode always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' && state === 'navigation' ) {\n\t\treturn 'edit';\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn action.mode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.uniqueByBlock\n\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion event list state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function lastBlockInserted( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst clientIds = action.blocks.map( ( block ) => {\n\t\t\t\treturn block.clientId;\n\t\t\t} );\n\n\t\t\tconst source = action.meta?.source;\n\n\t\t\treturn { clientIds, source };\n\t\tcase 'RESET_BLOCKS':\n\t\t\treturn {};\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the block that is eding temporarily edited as blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingAsBlocks( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.temporarilyEditingAsBlocks;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the focus mode that should be used when temporarily edit as blocks finishes.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingFocusModeRevert( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.focusModeToRevert;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of block client IDs to block editing modes.\n *\n * @param {Map}    state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Map} Updated state.\n */\nexport function blockEditingModes( state = new Map(), action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_BLOCK_EDITING_MODE':\n\t\t\treturn new Map( state ).set( action.clientId, action.mode );\n\t\tcase 'UNSET_BLOCK_EDITING_MODE': {\n\t\t\tconst newState = new Map( state );\n\t\t\tnewState.delete( action.clientId );\n\t\t\treturn newState;\n\t\t}\n\t\tcase 'RESET_BLOCKS': {\n\t\t\treturn state.has( '' )\n\t\t\t\t? new Map().set( '', state.get( '' ) )\n\t\t\t\t: state;\n\t\t}\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the clientId of the block settings menu that is currently open.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function openedBlockSettingsMenu( state = null, action ) {\n\tif ( 'SET_OPENED_BLOCK_SETTINGS_MENU' === action.type ) {\n\t\treturn action?.clientId ?? null;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of style IDs to style overrides.\n *\n * @param {Map}    state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Map} Updated state.\n */\nexport function styleOverrides( state = new Map(), action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_STYLE_OVERRIDE':\n\t\t\treturn new Map( state ).set( action.id, action.style );\n\t\tcase 'DELETE_STYLE_OVERRIDE': {\n\t\t\tconst newState = new Map( state );\n\t\t\tnewState.delete( action.id );\n\t\t\treturn newState;\n\t\t}\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of the registered inserter media categories.\n *\n * @param {Array}  state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Array} Updated state.\n */\nexport function registeredInserterMediaCategories( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REGISTER_INSERTER_MEDIA_CATEGORY':\n\t\t\treturn [ ...state, action.category ];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer setting last focused element\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function lastFocus( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LAST_FOCUS':\n\t\t\treturn action.lastFocus;\n\t}\n\n\treturn state;\n}\n\nconst combinedReducers = combineReducers( {\n\tblocks,\n\tisDragging,\n\tisTyping,\n\tisBlockInterfaceHidden,\n\tdraggedBlocks,\n\tselection,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tlastFocus,\n\teditorMode,\n\thasBlockMovingClientId,\n\thighlightedBlock,\n\tlastBlockInserted,\n\ttemporarilyEditingAsBlocks,\n\ttemporarilyEditingFocusModeRevert,\n\tblockVisibility,\n\tblockEditingModes,\n\tstyleOverrides,\n\tremovalPromptData,\n\tblockRemovalRules,\n\topenedBlockSettingsMenu,\n\tregisteredInserterMediaCategories,\n} );\n\nfunction withAutomaticChangeReset( reducer ) {\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( ! state ) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Take over the last value without creating a new reference.\n\t\tnextState.automaticChangeStatus = state.automaticChangeStatus;\n\n\t\tif ( action.type === 'MARK_AUTOMATIC_CHANGE' ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'pending',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\taction.type === 'MARK_AUTOMATIC_CHANGE_FINAL' &&\n\t\t\tstate.automaticChangeStatus === 'pending'\n\t\t) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'final',\n\t\t\t};\n\t\t}\n\n\t\t// If there's a change that doesn't affect blocks or selection, maintain\n\t\t// the current status.\n\t\tif (\n\t\t\tnextState.blocks === state.blocks &&\n\t\t\tnextState.selection === state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// As long as the state is not final, ignore any selection changes.\n\t\tif (\n\t\t\tnextState.automaticChangeStatus !== 'final' &&\n\t\t\tnextState.selection !== state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Reset the status if blocks change or selection changes (when status is final).\n\t\treturn {\n\t\t\t...nextState,\n\t\t\tautomaticChangeStatus: undefined,\n\t\t};\n\t};\n}\n\nexport default withAutomaticChangeReset( combinedReducers );\n"],"mappings":"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"}