{"version":3,"names":["v4","uuid","createHooks","applyFilters","getBlockType","getBlockTypes","getGroupingBlockName","normalizeBlockType","__experimentalSanitizeBlockAttributes","createBlock","name","attributes","innerBlocks","sanitizedAttributes","clientId","isValid","createBlocksFromInnerBlocksTemplate","innerBlocksOrTemplate","map","innerBlock","innerBlockTemplate","Array","isArray","__experimentalCloneSanitizedBlock","block","mergeAttributes","newInnerBlocks","cloneBlock","isPossibleTransformForSource","transform","direction","blocks","length","isMultiBlock","firstBlockName","isValidForMultiBlocks","isWildcardBlockTransform","every","isBlockType","type","sourceBlock","hasMatchingName","indexOf","isContainerGroupBlock","blockName","maybeCheckTransformIsMatch","getBlockTypesForPossibleFromTransforms","allBlockTypes","blockTypesWithPossibleFromTransforms","filter","blockType","fromTransforms","getBlockTransforms","findTransform","getBlockTypesForPossibleToTransforms","transformsTo","possibleTransforms","blockNames","transformation","flat","t","includes","getPossibleBlockTransformations","blockTypesForFromTransforms","blockTypesForToTransforms","Set","transforms","predicate","hooks","i","candidate","addFilter","toString","result","priority","blockTypeOrName","undefined","usingMobileTransformations","supportedMobileTransforms","filteredTransforms","transformBlockName","isMatch","switchToBlockType","blocksArray","firstBlock","sourceName","transformationsFrom","transformationsTo","transformationResults","__experimentalConvert","currentBlock","some","hasSwitchedBlock","ret","index","results","getBlockFromExample","example","_example$innerBlocks","originalName","originalContent","originalUndelimitedContent"],"sources":["@wordpress/blocks/src/api/factory.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuid } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport { createHooks, applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetGroupingBlockName,\n} from './registration';\nimport {\n\tnormalizeBlockType,\n\t__experimentalSanitizeBlockAttributes,\n} from './utils';\n\n/**\n * Returns a block object given its type and attributes.\n *\n * @param {string} name        Block name.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {Object} Block object.\n */\nexport function createBlock( name, attributes = {}, innerBlocks = [] ) {\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tname,\n\t\tattributes\n\t);\n\n\tconst clientId = uuid();\n\n\t// Blocks are stored with a unique ID, the assigned type name, the block\n\t// attributes, and their inner blocks.\n\treturn {\n\t\tclientId,\n\t\tname,\n\t\tisValid: true,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks,\n\t};\n}\n\n/**\n * Given an array of InnerBlocks templates or Block Objects,\n * returns an array of created Blocks from them.\n * It handles the case of having InnerBlocks as Blocks by\n * converting them to the proper format to continue recursively.\n *\n * @param {Array} innerBlocksOrTemplate Nested blocks or InnerBlocks templates.\n *\n * @return {Object[]} Array of Block objects.\n */\nexport function createBlocksFromInnerBlocksTemplate(\n\tinnerBlocksOrTemplate = []\n) {\n\treturn innerBlocksOrTemplate.map( ( innerBlock ) => {\n\t\tconst innerBlockTemplate = Array.isArray( innerBlock )\n\t\t\t? innerBlock\n\t\t\t: [\n\t\t\t\t\tinnerBlock.name,\n\t\t\t\t\tinnerBlock.attributes,\n\t\t\t\t\tinnerBlock.innerBlocks,\n\t\t\t  ];\n\t\tconst [ name, attributes, innerBlocks = [] ] = innerBlockTemplate;\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\tattributes,\n\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks )\n\t\t);\n\t} );\n}\n\n/**\n * Given a block object, returns a copy of the block object while sanitizing its attributes,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block           Block instance.\n * @param {Object} mergeAttributes Block attributes.\n * @param {?Array} newInnerBlocks  Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function __experimentalCloneSanitizedBlock(\n\tblock,\n\tmergeAttributes = {},\n\tnewInnerBlocks\n) {\n\tconst clientId = uuid();\n\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tblock.name,\n\t\t{\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t}\n\t);\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) =>\n\t\t\t\t__experimentalCloneSanitizedBlock( innerBlock )\n\t\t\t),\n\t};\n}\n\n/**\n * Given a block object, returns a copy of the block object,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block           Block instance.\n * @param {Object} mergeAttributes Block attributes.\n * @param {?Array} newInnerBlocks  Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function cloneBlock( block, mergeAttributes = {}, newInnerBlocks ) {\n\tconst clientId = uuid();\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: {\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t},\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) ),\n\t};\n}\n\n/**\n * Returns a boolean indicating whether a transform is possible based on\n * various bits of context.\n *\n * @param {Object} transform The transform object to validate.\n * @param {string} direction Is this a 'from' or 'to' transform.\n * @param {Array}  blocks    The blocks to transform from.\n *\n * @return {boolean} Is the transform possible?\n */\nconst isPossibleTransformForSource = ( transform, direction, blocks ) => {\n\tif ( ! blocks.length ) {\n\t\treturn false;\n\t}\n\n\t// If multiple blocks are selected, only multi block transforms\n\t// or wildcard transforms are allowed.\n\tconst isMultiBlock = blocks.length > 1;\n\tconst firstBlockName = blocks[ 0 ].name;\n\tconst isValidForMultiBlocks =\n\t\tisWildcardBlockTransform( transform ) ||\n\t\t! isMultiBlock ||\n\t\ttransform.isMultiBlock;\n\tif ( ! isValidForMultiBlocks ) {\n\t\treturn false;\n\t}\n\n\t// Check non-wildcard transforms to ensure that transform is valid\n\t// for a block selection of multiple blocks of different types.\n\tif (\n\t\t! isWildcardBlockTransform( transform ) &&\n\t\t! blocks.every( ( block ) => block.name === firstBlockName )\n\t) {\n\t\treturn false;\n\t}\n\n\t// Only consider 'block' type transforms as valid.\n\tconst isBlockType = transform.type === 'block';\n\tif ( ! isBlockType ) {\n\t\treturn false;\n\t}\n\n\t// Check if the transform's block name matches the source block (or is a wildcard)\n\t// only if this is a transform 'from'.\n\tconst sourceBlock = blocks[ 0 ];\n\tconst hasMatchingName =\n\t\tdirection !== 'from' ||\n\t\ttransform.blocks.indexOf( sourceBlock.name ) !== -1 ||\n\t\tisWildcardBlockTransform( transform );\n\tif ( ! hasMatchingName ) {\n\t\treturn false;\n\t}\n\n\t// Don't allow single Grouping blocks to be transformed into\n\t// a Grouping block.\n\tif (\n\t\t! isMultiBlock &&\n\t\tdirection === 'from' &&\n\t\tisContainerGroupBlock( sourceBlock.name ) &&\n\t\tisContainerGroupBlock( transform.blockName )\n\t) {\n\t\treturn false;\n\t}\n\n\t// If the transform has a `isMatch` function specified, check that it returns true.\n\tif ( ! maybeCheckTransformIsMatch( transform, blocks ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * 'from' transforms on other blocks.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the blocks can be transformed into.\n */\nconst getBlockTypesForPossibleFromTransforms = ( blocks ) => {\n\tif ( ! blocks.length ) {\n\t\treturn [];\n\t}\n\n\tconst allBlockTypes = getBlockTypes();\n\n\t// filter all blocks to find those with a 'from' transform.\n\tconst blockTypesWithPossibleFromTransforms = allBlockTypes.filter(\n\t\t( blockType ) => {\n\t\t\tconst fromTransforms = getBlockTransforms( 'from', blockType.name );\n\t\t\treturn !! findTransform( fromTransforms, ( transform ) => {\n\t\t\t\treturn isPossibleTransformForSource(\n\t\t\t\t\ttransform,\n\t\t\t\t\t'from',\n\t\t\t\t\tblocks\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t);\n\n\treturn blockTypesWithPossibleFromTransforms;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * the source block's own 'to' transforms.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the source can be transformed into.\n */\nconst getBlockTypesForPossibleToTransforms = ( blocks ) => {\n\tif ( ! blocks.length ) {\n\t\treturn [];\n\t}\n\n\tconst sourceBlock = blocks[ 0 ];\n\tconst blockType = getBlockType( sourceBlock.name );\n\tconst transformsTo = blockType\n\t\t? getBlockTransforms( 'to', blockType.name )\n\t\t: [];\n\n\t// filter all 'to' transforms to find those that are possible.\n\tconst possibleTransforms = transformsTo.filter( ( transform ) => {\n\t\treturn (\n\t\t\ttransform && isPossibleTransformForSource( transform, 'to', blocks )\n\t\t);\n\t} );\n\n\t// Build a list of block names using the possible 'to' transforms.\n\tconst blockNames = possibleTransforms\n\t\t.map( ( transformation ) => transformation.blocks )\n\t\t.flat();\n\n\t// Map block names to block types.\n\treturn blockNames.map( getBlockType );\n};\n\n/**\n * Determines whether transform is a \"block\" type\n * and if so whether it is a \"wildcard\" transform\n * ie: targets \"any\" block type\n *\n * @param {Object} t the Block transform object\n *\n * @return {boolean} whether transform is a wildcard transform\n */\nexport const isWildcardBlockTransform = ( t ) =>\n\tt &&\n\tt.type === 'block' &&\n\tArray.isArray( t.blocks ) &&\n\tt.blocks.includes( '*' );\n\n/**\n * Determines whether the given Block is the core Block which\n * acts as a container Block for other Blocks as part of the\n * Grouping mechanics\n *\n * @param {string} name the name of the Block to test against\n *\n * @return {boolean} whether or not the Block is the container Block type\n */\nexport const isContainerGroupBlock = ( name ) =>\n\tname === getGroupingBlockName();\n\n/**\n * Returns an array of block types that the set of blocks received as argument\n * can be transformed into.\n *\n * @param {Array} blocks Blocks array.\n *\n * @return {Array} Block types that the blocks argument can be transformed to.\n */\nexport function getPossibleBlockTransformations( blocks ) {\n\tif ( ! blocks.length ) {\n\t\treturn [];\n\t}\n\n\tconst blockTypesForFromTransforms =\n\t\tgetBlockTypesForPossibleFromTransforms( blocks );\n\tconst blockTypesForToTransforms =\n\t\tgetBlockTypesForPossibleToTransforms( blocks );\n\n\treturn [\n\t\t...new Set( [\n\t\t\t...blockTypesForFromTransforms,\n\t\t\t...blockTypesForToTransforms,\n\t\t] ),\n\t];\n}\n\n/**\n * Given an array of transforms, returns the highest-priority transform where\n * the predicate function returns a truthy value. A higher-priority transform\n * is one with a lower priority value (i.e. first in priority order). Returns\n * null if the transforms set is empty or the predicate function returns a\n * falsey value for all entries.\n *\n * @param {Object[]} transforms Transforms to search.\n * @param {Function} predicate  Function returning true on matching transform.\n *\n * @return {?Object} Highest-priority transform candidate.\n */\nexport function findTransform( transforms, predicate ) {\n\t// The hooks library already has built-in mechanisms for managing priority\n\t// queue, so leverage via locally-defined instance.\n\tconst hooks = createHooks();\n\n\tfor ( let i = 0; i < transforms.length; i++ ) {\n\t\tconst candidate = transforms[ i ];\n\t\tif ( predicate( candidate ) ) {\n\t\t\thooks.addFilter(\n\t\t\t\t'transform',\n\t\t\t\t'transform/' + i.toString(),\n\t\t\t\t( result ) => ( result ? result : candidate ),\n\t\t\t\tcandidate.priority\n\t\t\t);\n\t\t}\n\t}\n\n\t// Filter name is arbitrarily chosen but consistent with above aggregation.\n\treturn hooks.applyFilters( 'transform', null );\n}\n\n/**\n * Returns normal block transforms for a given transform direction, optionally\n * for a specific block by name, or an empty array if there are no transforms.\n * If no block name is provided, returns transforms for all blocks. A normal\n * transform object includes `blockName` as a property.\n *\n * @param {string}        direction       Transform direction (\"to\", \"from\").\n * @param {string|Object} blockTypeOrName Block type or name.\n *\n * @return {Array} Block transforms for direction.\n */\nexport function getBlockTransforms( direction, blockTypeOrName ) {\n\t// When retrieving transforms for all block types, recurse into self.\n\tif ( blockTypeOrName === undefined ) {\n\t\treturn getBlockTypes()\n\t\t\t.map( ( { name } ) => getBlockTransforms( direction, name ) )\n\t\t\t.flat();\n\t}\n\n\t// Validate that block type exists and has array of direction.\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst { name: blockName, transforms } = blockType || {};\n\tif ( ! transforms || ! Array.isArray( transforms[ direction ] ) ) {\n\t\treturn [];\n\t}\n\n\tconst usingMobileTransformations =\n\t\ttransforms.supportedMobileTransforms &&\n\t\tArray.isArray( transforms.supportedMobileTransforms );\n\tconst filteredTransforms = usingMobileTransformations\n\t\t? transforms[ direction ].filter( ( t ) => {\n\t\t\t\tif ( t.type === 'raw' ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( ! t.blocks || ! t.blocks.length ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( isWildcardBlockTransform( t ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn t.blocks.every( ( transformBlockName ) =>\n\t\t\t\t\ttransforms.supportedMobileTransforms.includes(\n\t\t\t\t\t\ttransformBlockName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t  } )\n\t\t: transforms[ direction ];\n\n\t// Map transforms to normal form.\n\treturn filteredTransforms.map( ( transform ) => ( {\n\t\t...transform,\n\t\tblockName,\n\t\tusingMobileTransformations,\n\t} ) );\n}\n\n/**\n * Checks that a given transforms isMatch method passes for given source blocks.\n *\n * @param {Object} transform A transform object.\n * @param {Array}  blocks    Blocks array.\n *\n * @return {boolean} True if given blocks are a match for the transform.\n */\nfunction maybeCheckTransformIsMatch( transform, blocks ) {\n\tif ( typeof transform.isMatch !== 'function' ) {\n\t\treturn true;\n\t}\n\tconst sourceBlock = blocks[ 0 ];\n\tconst attributes = transform.isMultiBlock\n\t\t? blocks.map( ( block ) => block.attributes )\n\t\t: sourceBlock.attributes;\n\tconst block = transform.isMultiBlock ? blocks : sourceBlock;\n\n\treturn transform.isMatch( attributes, block );\n}\n\n/**\n * Switch one or more blocks into one or more blocks of the new block type.\n *\n * @param {Array|Object} blocks Blocks array or block object.\n * @param {string}       name   Block name.\n *\n * @return {?Array} Array of blocks or null.\n */\nexport function switchToBlockType( blocks, name ) {\n\tconst blocksArray = Array.isArray( blocks ) ? blocks : [ blocks ];\n\tconst isMultiBlock = blocksArray.length > 1;\n\tconst firstBlock = blocksArray[ 0 ];\n\tconst sourceName = firstBlock.name;\n\n\t// Find the right transformation by giving priority to the \"to\"\n\t// transformation.\n\tconst transformationsFrom = getBlockTransforms( 'from', name );\n\tconst transformationsTo = getBlockTransforms( 'to', sourceName );\n\n\tconst transformation =\n\t\tfindTransform(\n\t\t\ttransformationsTo,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( name ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock ) &&\n\t\t\t\tmaybeCheckTransformIsMatch( t, blocksArray )\n\t\t) ||\n\t\tfindTransform(\n\t\t\ttransformationsFrom,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( sourceName ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock ) &&\n\t\t\t\tmaybeCheckTransformIsMatch( t, blocksArray )\n\t\t);\n\n\t// Stop if there is no valid transformation.\n\tif ( ! transformation ) {\n\t\treturn null;\n\t}\n\n\tlet transformationResults;\n\n\tif ( transformation.isMultiBlock ) {\n\t\tif ( '__experimentalConvert' in transformation ) {\n\t\t\ttransformationResults =\n\t\t\t\ttransformation.__experimentalConvert( blocksArray );\n\t\t} else {\n\t\t\ttransformationResults = transformation.transform(\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.attributes ),\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.innerBlocks )\n\t\t\t);\n\t\t}\n\t} else if ( '__experimentalConvert' in transformation ) {\n\t\ttransformationResults =\n\t\t\ttransformation.__experimentalConvert( firstBlock );\n\t} else {\n\t\ttransformationResults = transformation.transform(\n\t\t\tfirstBlock.attributes,\n\t\t\tfirstBlock.innerBlocks\n\t\t);\n\t}\n\n\t// Ensure that the transformation function returned an object or an array\n\t// of objects.\n\tif (\n\t\ttransformationResults === null ||\n\t\ttypeof transformationResults !== 'object'\n\t) {\n\t\treturn null;\n\t}\n\n\t// If the transformation function returned a single object, we want to work\n\t// with an array instead.\n\ttransformationResults = Array.isArray( transformationResults )\n\t\t? transformationResults\n\t\t: [ transformationResults ];\n\n\t// Ensure that every block object returned by the transformation has a\n\t// valid block type.\n\tif (\n\t\ttransformationResults.some(\n\t\t\t( result ) => ! getBlockType( result.name )\n\t\t)\n\t) {\n\t\treturn null;\n\t}\n\n\tconst hasSwitchedBlock = transformationResults.some(\n\t\t( result ) => result.name === name\n\t);\n\n\t// Ensure that at least one block object returned by the transformation has\n\t// the expected \"destination\" block type.\n\tif ( ! hasSwitchedBlock ) {\n\t\treturn null;\n\t}\n\n\tconst ret = transformationResults.map( ( result, index, results ) => {\n\t\t/**\n\t\t * Filters an individual transform result from block transformation.\n\t\t * All of the original blocks are passed, since transformations are\n\t\t * many-to-many, not one-to-one.\n\t\t *\n\t\t * @param {Object}   transformedBlock The transformed block.\n\t\t * @param {Object[]} blocks           Original blocks transformed.\n\t\t * @param {Object[]} index            Index of the transformed block on the array of results.\n\t\t * @param {Object[]} results          An array all the blocks that resulted from the transformation.\n\t\t */\n\t\treturn applyFilters(\n\t\t\t'blocks.switchToBlockType.transformedBlock',\n\t\t\tresult,\n\t\t\tblocks,\n\t\t\tindex,\n\t\t\tresults\n\t\t);\n\t} );\n\n\treturn ret;\n}\n\n/**\n * Create a block object from the example API.\n *\n * @param {string} name\n * @param {Object} example\n *\n * @return {Object} block.\n */\nexport const getBlockFromExample = ( name, example ) => {\n\ttry {\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\texample.attributes,\n\t\t\t( example.innerBlocks ?? [] ).map( ( innerBlock ) =>\n\t\t\t\tgetBlockFromExample( innerBlock.name, innerBlock )\n\t\t\t)\n\t\t);\n\t} catch {\n\t\treturn createBlock( 'core/missing', {\n\t\t\toriginalName: name,\n\t\t\toriginalContent: '',\n\t\t\toriginalUndelimitedContent: '',\n\t\t} );\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAEjC;AACA;AACA;AACA,SAASC,WAAW,EAAEC,YAAY,QAAQ,kBAAkB;;AAE5D;AACA;AACA;AACA,SACCC,YAAY,EACZC,aAAa,EACbC,oBAAoB,QACd,gBAAgB;AACvB,SACCC,kBAAkB,EAClBC,qCAAqC,QAC/B,SAAS;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAEC,IAAI,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEC,WAAW,GAAG,EAAE,EAAG;EACtE,MAAMC,mBAAmB,GAAGL,qCAAqC,CAChEE,IAAI,EACJC,UACD,CAAC;EAED,MAAMG,QAAQ,GAAGb,IAAI,CAAC,CAAC;;EAEvB;EACA;EACA,OAAO;IACNa,QAAQ;IACRJ,IAAI;IACJK,OAAO,EAAE,IAAI;IACbJ,UAAU,EAAEE,mBAAmB;IAC/BD;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,mCAAmCA,CAClDC,qBAAqB,GAAG,EAAE,EACzB;EACD,OAAOA,qBAAqB,CAACC,GAAG,CAAIC,UAAU,IAAM;IACnD,MAAMC,kBAAkB,GAAGC,KAAK,CAACC,OAAO,CAAEH,UAAW,CAAC,GACnDA,UAAU,GACV,CACAA,UAAU,CAACT,IAAI,EACfS,UAAU,CAACR,UAAU,EACrBQ,UAAU,CAACP,WAAW,CACrB;IACJ,MAAM,CAAEF,IAAI,EAAEC,UAAU,EAAEC,WAAW,GAAG,EAAE,CAAE,GAAGQ,kBAAkB;IACjE,OAAOX,WAAW,CACjBC,IAAI,EACJC,UAAU,EACVK,mCAAmC,CAAEJ,WAAY,CAClD,CAAC;EACF,CAAE,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,iCAAiCA,CAChDC,KAAK,EACLC,eAAe,GAAG,CAAC,CAAC,EACpBC,cAAc,EACb;EACD,MAAMZ,QAAQ,GAAGb,IAAI,CAAC,CAAC;EAEvB,MAAMY,mBAAmB,GAAGL,qCAAqC,CAChEgB,KAAK,CAACd,IAAI,EACV;IACC,GAAGc,KAAK,CAACb,UAAU;IACnB,GAAGc;EACJ,CACD,CAAC;EAED,OAAO;IACN,GAAGD,KAAK;IACRV,QAAQ;IACRH,UAAU,EAAEE,mBAAmB;IAC/BD,WAAW,EACVc,cAAc,IACdF,KAAK,CAACZ,WAAW,CAACM,GAAG,CAAIC,UAAU,IAClCI,iCAAiC,CAAEJ,UAAW,CAC/C;EACF,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,UAAUA,CAAEH,KAAK,EAAEC,eAAe,GAAG,CAAC,CAAC,EAAEC,cAAc,EAAG;EACzE,MAAMZ,QAAQ,GAAGb,IAAI,CAAC,CAAC;EAEvB,OAAO;IACN,GAAGuB,KAAK;IACRV,QAAQ;IACRH,UAAU,EAAE;MACX,GAAGa,KAAK,CAACb,UAAU;MACnB,GAAGc;IACJ,CAAC;IACDb,WAAW,EACVc,cAAc,IACdF,KAAK,CAACZ,WAAW,CAACM,GAAG,CAAIC,UAAU,IAAMQ,UAAU,CAAER,UAAW,CAAE;EACpE,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,4BAA4B,GAAGA,CAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,KAAM;EACxE,IAAK,CAAEA,MAAM,CAACC,MAAM,EAAG;IACtB,OAAO,KAAK;EACb;;EAEA;EACA;EACA,MAAMC,YAAY,GAAGF,MAAM,CAACC,MAAM,GAAG,CAAC;EACtC,MAAME,cAAc,GAAGH,MAAM,CAAE,CAAC,CAAE,CAACrB,IAAI;EACvC,MAAMyB,qBAAqB,GAC1BC,wBAAwB,CAAEP,SAAU,CAAC,IACrC,CAAEI,YAAY,IACdJ,SAAS,CAACI,YAAY;EACvB,IAAK,CAAEE,qBAAqB,EAAG;IAC9B,OAAO,KAAK;EACb;;EAEA;EACA;EACA,IACC,CAAEC,wBAAwB,CAAEP,SAAU,CAAC,IACvC,CAAEE,MAAM,CAACM,KAAK,CAAIb,KAAK,IAAMA,KAAK,CAACd,IAAI,KAAKwB,cAAe,CAAC,EAC3D;IACD,OAAO,KAAK;EACb;;EAEA;EACA,MAAMI,WAAW,GAAGT,SAAS,CAACU,IAAI,KAAK,OAAO;EAC9C,IAAK,CAAED,WAAW,EAAG;IACpB,OAAO,KAAK;EACb;;EAEA;EACA;EACA,MAAME,WAAW,GAAGT,MAAM,CAAE,CAAC,CAAE;EAC/B,MAAMU,eAAe,GACpBX,SAAS,KAAK,MAAM,IACpBD,SAAS,CAACE,MAAM,CAACW,OAAO,CAAEF,WAAW,CAAC9B,IAAK,CAAC,KAAK,CAAC,CAAC,IACnD0B,wBAAwB,CAAEP,SAAU,CAAC;EACtC,IAAK,CAAEY,eAAe,EAAG;IACxB,OAAO,KAAK;EACb;;EAEA;EACA;EACA,IACC,CAAER,YAAY,IACdH,SAAS,KAAK,MAAM,IACpBa,qBAAqB,CAAEH,WAAW,CAAC9B,IAAK,CAAC,IACzCiC,qBAAqB,CAAEd,SAAS,CAACe,SAAU,CAAC,EAC3C;IACD,OAAO,KAAK;EACb;;EAEA;EACA,IAAK,CAAEC,0BAA0B,CAAEhB,SAAS,EAAEE,MAAO,CAAC,EAAG;IACxD,OAAO,KAAK;EACb;EAEA,OAAO,IAAI;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMe,sCAAsC,GAAKf,MAAM,IAAM;EAC5D,IAAK,CAAEA,MAAM,CAACC,MAAM,EAAG;IACtB,OAAO,EAAE;EACV;EAEA,MAAMe,aAAa,GAAG1C,aAAa,CAAC,CAAC;;EAErC;EACA,MAAM2C,oCAAoC,GAAGD,aAAa,CAACE,MAAM,CAC9DC,SAAS,IAAM;IAChB,MAAMC,cAAc,GAAGC,kBAAkB,CAAE,MAAM,EAAEF,SAAS,CAACxC,IAAK,CAAC;IACnE,OAAO,CAAC,CAAE2C,aAAa,CAAEF,cAAc,EAAItB,SAAS,IAAM;MACzD,OAAOD,4BAA4B,CAClCC,SAAS,EACT,MAAM,EACNE,MACD,CAAC;IACF,CAAE,CAAC;EACJ,CACD,CAAC;EAED,OAAOiB,oCAAoC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,oCAAoC,GAAKvB,MAAM,IAAM;EAC1D,IAAK,CAAEA,MAAM,CAACC,MAAM,EAAG;IACtB,OAAO,EAAE;EACV;EAEA,MAAMQ,WAAW,GAAGT,MAAM,CAAE,CAAC,CAAE;EAC/B,MAAMmB,SAAS,GAAG9C,YAAY,CAAEoC,WAAW,CAAC9B,IAAK,CAAC;EAClD,MAAM6C,YAAY,GAAGL,SAAS,GAC3BE,kBAAkB,CAAE,IAAI,EAAEF,SAAS,CAACxC,IAAK,CAAC,GAC1C,EAAE;;EAEL;EACA,MAAM8C,kBAAkB,GAAGD,YAAY,CAACN,MAAM,CAAIpB,SAAS,IAAM;IAChE,OACCA,SAAS,IAAID,4BAA4B,CAAEC,SAAS,EAAE,IAAI,EAAEE,MAAO,CAAC;EAEtE,CAAE,CAAC;;EAEH;EACA,MAAM0B,UAAU,GAAGD,kBAAkB,CACnCtC,GAAG,CAAIwC,cAAc,IAAMA,cAAc,CAAC3B,MAAO,CAAC,CAClD4B,IAAI,CAAC,CAAC;;EAER;EACA,OAAOF,UAAU,CAACvC,GAAG,CAAEd,YAAa,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgC,wBAAwB,GAAKwB,CAAC,IAC1CA,CAAC,IACDA,CAAC,CAACrB,IAAI,KAAK,OAAO,IAClBlB,KAAK,CAACC,OAAO,CAAEsC,CAAC,CAAC7B,MAAO,CAAC,IACzB6B,CAAC,CAAC7B,MAAM,CAAC8B,QAAQ,CAAE,GAAI,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMlB,qBAAqB,GAAKjC,IAAI,IAC1CA,IAAI,KAAKJ,oBAAoB,CAAC,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwD,+BAA+BA,CAAE/B,MAAM,EAAG;EACzD,IAAK,CAAEA,MAAM,CAACC,MAAM,EAAG;IACtB,OAAO,EAAE;EACV;EAEA,MAAM+B,2BAA2B,GAChCjB,sCAAsC,CAAEf,MAAO,CAAC;EACjD,MAAMiC,yBAAyB,GAC9BV,oCAAoC,CAAEvB,MAAO,CAAC;EAE/C,OAAO,CACN,GAAG,IAAIkC,GAAG,CAAE,CACX,GAAGF,2BAA2B,EAC9B,GAAGC,yBAAyB,CAC3B,CAAC,CACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASX,aAAaA,CAAEa,UAAU,EAAEC,SAAS,EAAG;EACtD;EACA;EACA,MAAMC,KAAK,GAAGlE,WAAW,CAAC,CAAC;EAE3B,KAAM,IAAImE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAAClC,MAAM,EAAEqC,CAAC,EAAE,EAAG;IAC7C,MAAMC,SAAS,GAAGJ,UAAU,CAAEG,CAAC,CAAE;IACjC,IAAKF,SAAS,CAAEG,SAAU,CAAC,EAAG;MAC7BF,KAAK,CAACG,SAAS,CACd,WAAW,EACX,YAAY,GAAGF,CAAC,CAACG,QAAQ,CAAC,CAAC,EACzBC,MAAM,IAAQA,MAAM,GAAGA,MAAM,GAAGH,SAAW,EAC7CA,SAAS,CAACI,QACX,CAAC;IACF;EACD;;EAEA;EACA,OAAON,KAAK,CAACjE,YAAY,CAAE,WAAW,EAAE,IAAK,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiD,kBAAkBA,CAAEtB,SAAS,EAAE6C,eAAe,EAAG;EAChE;EACA,IAAKA,eAAe,KAAKC,SAAS,EAAG;IACpC,OAAOvE,aAAa,CAAC,CAAC,CACpBa,GAAG,CAAE,CAAE;MAAER;IAAK,CAAC,KAAM0C,kBAAkB,CAAEtB,SAAS,EAAEpB,IAAK,CAAE,CAAC,CAC5DiD,IAAI,CAAC,CAAC;EACT;;EAEA;EACA,MAAMT,SAAS,GAAG3C,kBAAkB,CAAEoE,eAAgB,CAAC;EACvD,MAAM;IAAEjE,IAAI,EAAEkC,SAAS;IAAEsB;EAAW,CAAC,GAAGhB,SAAS,IAAI,CAAC,CAAC;EACvD,IAAK,CAAEgB,UAAU,IAAI,CAAE7C,KAAK,CAACC,OAAO,CAAE4C,UAAU,CAAEpC,SAAS,CAAG,CAAC,EAAG;IACjE,OAAO,EAAE;EACV;EAEA,MAAM+C,0BAA0B,GAC/BX,UAAU,CAACY,yBAAyB,IACpCzD,KAAK,CAACC,OAAO,CAAE4C,UAAU,CAACY,yBAA0B,CAAC;EACtD,MAAMC,kBAAkB,GAAGF,0BAA0B,GAClDX,UAAU,CAAEpC,SAAS,CAAE,CAACmB,MAAM,CAAIW,CAAC,IAAM;IACzC,IAAKA,CAAC,CAACrB,IAAI,KAAK,KAAK,EAAG;MACvB,OAAO,IAAI;IACZ;IAEA,IAAK,CAAEqB,CAAC,CAAC7B,MAAM,IAAI,CAAE6B,CAAC,CAAC7B,MAAM,CAACC,MAAM,EAAG;MACtC,OAAO,KAAK;IACb;IAEA,IAAKI,wBAAwB,CAAEwB,CAAE,CAAC,EAAG;MACpC,OAAO,IAAI;IACZ;IAEA,OAAOA,CAAC,CAAC7B,MAAM,CAACM,KAAK,CAAI2C,kBAAkB,IAC1Cd,UAAU,CAACY,yBAAyB,CAACjB,QAAQ,CAC5CmB,kBACD,CACD,CAAC;EACD,CAAE,CAAC,GACHd,UAAU,CAAEpC,SAAS,CAAE;;EAE1B;EACA,OAAOiD,kBAAkB,CAAC7D,GAAG,CAAIW,SAAS,KAAQ;IACjD,GAAGA,SAAS;IACZe,SAAS;IACTiC;EACD,CAAC,CAAG,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAShC,0BAA0BA,CAAEhB,SAAS,EAAEE,MAAM,EAAG;EACxD,IAAK,OAAOF,SAAS,CAACoD,OAAO,KAAK,UAAU,EAAG;IAC9C,OAAO,IAAI;EACZ;EACA,MAAMzC,WAAW,GAAGT,MAAM,CAAE,CAAC,CAAE;EAC/B,MAAMpB,UAAU,GAAGkB,SAAS,CAACI,YAAY,GACtCF,MAAM,CAACb,GAAG,CAAIM,KAAK,IAAMA,KAAK,CAACb,UAAW,CAAC,GAC3C6B,WAAW,CAAC7B,UAAU;EACzB,MAAMa,KAAK,GAAGK,SAAS,CAACI,YAAY,GAAGF,MAAM,GAAGS,WAAW;EAE3D,OAAOX,SAAS,CAACoD,OAAO,CAAEtE,UAAU,EAAEa,KAAM,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0D,iBAAiBA,CAAEnD,MAAM,EAAErB,IAAI,EAAG;EACjD,MAAMyE,WAAW,GAAG9D,KAAK,CAACC,OAAO,CAAES,MAAO,CAAC,GAAGA,MAAM,GAAG,CAAEA,MAAM,CAAE;EACjE,MAAME,YAAY,GAAGkD,WAAW,CAACnD,MAAM,GAAG,CAAC;EAC3C,MAAMoD,UAAU,GAAGD,WAAW,CAAE,CAAC,CAAE;EACnC,MAAME,UAAU,GAAGD,UAAU,CAAC1E,IAAI;;EAElC;EACA;EACA,MAAM4E,mBAAmB,GAAGlC,kBAAkB,CAAE,MAAM,EAAE1C,IAAK,CAAC;EAC9D,MAAM6E,iBAAiB,GAAGnC,kBAAkB,CAAE,IAAI,EAAEiC,UAAW,CAAC;EAEhE,MAAM3B,cAAc,GACnBL,aAAa,CACZkC,iBAAiB,EACf3B,CAAC,IACFA,CAAC,CAACrB,IAAI,KAAK,OAAO,KAChBH,wBAAwB,CAAEwB,CAAE,CAAC,IAC9BA,CAAC,CAAC7B,MAAM,CAACW,OAAO,CAAEhC,IAAK,CAAC,KAAK,CAAC,CAAC,CAAE,KAChC,CAAEuB,YAAY,IAAI2B,CAAC,CAAC3B,YAAY,CAAE,IACpCY,0BAA0B,CAAEe,CAAC,EAAEuB,WAAY,CAC7C,CAAC,IACD9B,aAAa,CACZiC,mBAAmB,EACjB1B,CAAC,IACFA,CAAC,CAACrB,IAAI,KAAK,OAAO,KAChBH,wBAAwB,CAAEwB,CAAE,CAAC,IAC9BA,CAAC,CAAC7B,MAAM,CAACW,OAAO,CAAE2C,UAAW,CAAC,KAAK,CAAC,CAAC,CAAE,KACtC,CAAEpD,YAAY,IAAI2B,CAAC,CAAC3B,YAAY,CAAE,IACpCY,0BAA0B,CAAEe,CAAC,EAAEuB,WAAY,CAC7C,CAAC;;EAEF;EACA,IAAK,CAAEzB,cAAc,EAAG;IACvB,OAAO,IAAI;EACZ;EAEA,IAAI8B,qBAAqB;EAEzB,IAAK9B,cAAc,CAACzB,YAAY,EAAG;IAClC,IAAK,uBAAuB,IAAIyB,cAAc,EAAG;MAChD8B,qBAAqB,GACpB9B,cAAc,CAAC+B,qBAAqB,CAAEN,WAAY,CAAC;IACrD,CAAC,MAAM;MACNK,qBAAqB,GAAG9B,cAAc,CAAC7B,SAAS,CAC/CsD,WAAW,CAACjE,GAAG,CAAIwE,YAAY,IAAMA,YAAY,CAAC/E,UAAW,CAAC,EAC9DwE,WAAW,CAACjE,GAAG,CAAIwE,YAAY,IAAMA,YAAY,CAAC9E,WAAY,CAC/D,CAAC;IACF;EACD,CAAC,MAAM,IAAK,uBAAuB,IAAI8C,cAAc,EAAG;IACvD8B,qBAAqB,GACpB9B,cAAc,CAAC+B,qBAAqB,CAAEL,UAAW,CAAC;EACpD,CAAC,MAAM;IACNI,qBAAqB,GAAG9B,cAAc,CAAC7B,SAAS,CAC/CuD,UAAU,CAACzE,UAAU,EACrByE,UAAU,CAACxE,WACZ,CAAC;EACF;;EAEA;EACA;EACA,IACC4E,qBAAqB,KAAK,IAAI,IAC9B,OAAOA,qBAAqB,KAAK,QAAQ,EACxC;IACD,OAAO,IAAI;EACZ;;EAEA;EACA;EACAA,qBAAqB,GAAGnE,KAAK,CAACC,OAAO,CAAEkE,qBAAsB,CAAC,GAC3DA,qBAAqB,GACrB,CAAEA,qBAAqB,CAAE;;EAE5B;EACA;EACA,IACCA,qBAAqB,CAACG,IAAI,CACvBlB,MAAM,IAAM,CAAErE,YAAY,CAAEqE,MAAM,CAAC/D,IAAK,CAC3C,CAAC,EACA;IACD,OAAO,IAAI;EACZ;EAEA,MAAMkF,gBAAgB,GAAGJ,qBAAqB,CAACG,IAAI,CAChDlB,MAAM,IAAMA,MAAM,CAAC/D,IAAI,KAAKA,IAC/B,CAAC;;EAED;EACA;EACA,IAAK,CAAEkF,gBAAgB,EAAG;IACzB,OAAO,IAAI;EACZ;EAEA,MAAMC,GAAG,GAAGL,qBAAqB,CAACtE,GAAG,CAAE,CAAEuD,MAAM,EAAEqB,KAAK,EAAEC,OAAO,KAAM;IACpE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,OAAO5F,YAAY,CAClB,2CAA2C,EAC3CsE,MAAM,EACN1C,MAAM,EACN+D,KAAK,EACLC,OACD,CAAC;EACF,CAAE,CAAC;EAEH,OAAOF,GAAG;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAGA,CAAEtF,IAAI,EAAEuF,OAAO,KAAM;EACvD,IAAI;IAAA,IAAAC,oBAAA;IACH,OAAOzF,WAAW,CACjBC,IAAI,EACJuF,OAAO,CAACtF,UAAU,EAClB,EAAAuF,oBAAA,GAAED,OAAO,CAACrF,WAAW,cAAAsF,oBAAA,cAAAA,oBAAA,GAAI,EAAE,EAAGhF,GAAG,CAAIC,UAAU,IAC9C6E,mBAAmB,CAAE7E,UAAU,CAACT,IAAI,EAAES,UAAW,CAClD,CACD,CAAC;EACF,CAAC,CAAC,MAAM;IACP,OAAOV,WAAW,CAAE,cAAc,EAAE;MACnC0F,YAAY,EAAEzF,IAAI;MAClB0F,eAAe,EAAE,EAAE;MACnBC,0BAA0B,EAAE;IAC7B,CAAE,CAAC;EACJ;AACD,CAAC"}