import { createElement, Fragment } from "react";
/**
 * External dependencies
 */
import classnames from 'classnames';

/**
 * WordPress dependencies
 */
import { __experimentalSpacer as Spacer, __experimentalToolsPanel as ToolsPanel } from '@wordpress/components';
import { useRegistry } from '@wordpress/data';
import { useInstanceId } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import ColorGradientSettingsDropdown from './dropdown';
import useColorsAndGradientsPalettes from './use-multiple-origin-colors-and-gradients';
const colorsAndGradientKeys = ['colors', 'disableCustomColors', 'gradients', 'disableCustomGradients'];
export const PanelColorGradientSettingsInner = ({
  className,
  colors,
  gradients,
  disableCustomColors,
  disableCustomGradients,
  children,
  settings,
  title,
  showTitle = true,
  __experimentalIsRenderedInSidebar,
  enableAlpha
}) => {
  const panelId = useInstanceId(PanelColorGradientSettingsInner);
  const {
    batch
  } = useRegistry();
  if ((!colors || colors.length === 0) && (!gradients || gradients.length === 0) && disableCustomColors && disableCustomGradients && settings?.every(setting => (!setting.colors || setting.colors.length === 0) && (!setting.gradients || setting.gradients.length === 0) && (setting.disableCustomColors === undefined || setting.disableCustomColors) && (setting.disableCustomGradients === undefined || setting.disableCustomGradients))) {
    return null;
  }
  return createElement(ToolsPanel, {
    className: classnames('block-editor-panel-color-gradient-settings', className),
    label: showTitle ? title : undefined,
    resetAll: () => {
      batch(() => {
        settings.forEach(({
          colorValue,
          gradientValue,
          onColorChange,
          onGradientChange
        }) => {
          if (colorValue) {
            onColorChange();
          } else if (gradientValue) {
            onGradientChange();
          }
        });
      });
    },
    panelId: panelId,
    __experimentalFirstVisibleItemClass: "first",
    __experimentalLastVisibleItemClass: "last"
  }, createElement(ColorGradientSettingsDropdown, {
    settings: settings,
    panelId: panelId,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients,
    __experimentalIsRenderedInSidebar,
    enableAlpha
  }), !!children && createElement(Fragment, null, createElement(Spacer, {
    marginY: 4
  }), " ", children));
};
const PanelColorGradientSettingsSelect = props => {
  const colorGradientSettings = useColorsAndGradientsPalettes();
  return createElement(PanelColorGradientSettingsInner, {
    ...colorGradientSettings,
    ...props
  });
};
const PanelColorGradientSettings = props => {
  if (colorsAndGradientKeys.every(key => props.hasOwnProperty(key))) {
    return createElement(PanelColorGradientSettingsInner, {
      ...props
    });
  }
  return createElement(PanelColorGradientSettingsSelect, {
    ...props
  });
};
export default PanelColorGradientSettings;
//# sourceMappingURL=panel-color-gradient-settings.js.map