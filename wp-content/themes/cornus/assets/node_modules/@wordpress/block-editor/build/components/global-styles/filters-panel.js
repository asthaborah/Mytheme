"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FiltersPanel;
exports.useHasFiltersPanel = useHasFiltersPanel;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _utils = require("./utils");
var _object = require("../../utils/object");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const EMPTY_ARRAY = [];
function useMultiOriginColorPresets(settings, {
  presetSetting,
  defaultSetting
}) {
  const disableDefault = !settings?.color?.[defaultSetting];
  const userPresets = settings?.color?.[presetSetting]?.custom || EMPTY_ARRAY;
  const themePresets = settings?.color?.[presetSetting]?.theme || EMPTY_ARRAY;
  const defaultPresets = settings?.color?.[presetSetting]?.default || EMPTY_ARRAY;
  return (0, _element.useMemo)(() => [...userPresets, ...themePresets, ...(disableDefault ? EMPTY_ARRAY : defaultPresets)], [disableDefault, userPresets, themePresets, defaultPresets]);
}
function useHasFiltersPanel(settings) {
  return useHasDuotoneControl(settings);
}
function useHasDuotoneControl(settings) {
  return settings.color.customDuotone || settings.color.defaultDuotone || settings.color.duotone.length > 0;
}
function FiltersToolsPanel({
  resetAllFilter,
  onChange,
  value,
  panelId,
  children
}) {
  const resetAll = () => {
    const updatedValue = resetAllFilter(value);
    onChange(updatedValue);
  };
  return (0, _react.createElement)(_components.__experimentalToolsPanel, {
    label: (0, _i18n._x)('Filters', 'Name for applying graphical effects'),
    resetAll: resetAll,
    panelId: panelId,
    dropdownMenuProps: _utils.TOOLSPANEL_DROPDOWNMENU_PROPS
  }, children);
}
const DEFAULT_CONTROLS = {
  duotone: true
};
const popoverProps = {
  placement: 'left-start',
  offset: 36,
  shift: true,
  className: 'block-editor-duotone-control__popover',
  headerTitle: (0, _i18n.__)('Duotone')
};
const LabeledColorIndicator = ({
  indicator,
  label
}) => (0, _react.createElement)(_components.__experimentalHStack, {
  justify: "flex-start"
}, (0, _react.createElement)(_components.__experimentalZStack, {
  isLayered: false,
  offset: -8
}, (0, _react.createElement)(_components.Flex, {
  expanded: false
}, indicator === 'unset' || !indicator ? (0, _react.createElement)(_components.ColorIndicator, {
  className: "block-editor-duotone-control__unset-indicator"
}) : (0, _react.createElement)(_components.DuotoneSwatch, {
  values: indicator
}))), (0, _react.createElement)(_components.FlexItem, {
  title: label
}, label));
function FiltersPanel({
  as: Wrapper = FiltersToolsPanel,
  value,
  onChange,
  inheritedValue = value,
  settings,
  panelId,
  defaultControls = DEFAULT_CONTROLS
}) {
  const decodeValue = rawValue => (0, _utils.getValueFromVariable)({
    settings
  }, '', rawValue);

  // Duotone
  const hasDuotoneEnabled = useHasDuotoneControl(settings);
  const duotonePalette = useMultiOriginColorPresets(settings, {
    presetSetting: 'duotone',
    defaultSetting: 'defaultDuotone'
  });
  const colorPalette = useMultiOriginColorPresets(settings, {
    presetSetting: 'palette',
    defaultSetting: 'defaultPalette'
  });
  const duotone = decodeValue(inheritedValue?.filter?.duotone);
  const setDuotone = newValue => {
    const duotonePreset = duotonePalette.find(({
      colors
    }) => {
      return colors === newValue;
    });
    const settedValue = duotonePreset ? `var:preset|duotone|${duotonePreset.slug}` : newValue;
    onChange((0, _object.setImmutably)(value, ['filter', 'duotone'], settedValue));
  };
  const hasDuotone = () => !!value?.filter?.duotone;
  const resetDuotone = () => setDuotone(undefined);
  const resetAllFilter = (0, _element.useCallback)(previousValue => {
    return {
      ...previousValue,
      filter: {
        ...previousValue.filter,
        duotone: undefined
      }
    };
  }, []);
  return (0, _react.createElement)(Wrapper, {
    resetAllFilter: resetAllFilter,
    value: value,
    onChange: onChange,
    panelId: panelId
  }, hasDuotoneEnabled && (0, _react.createElement)(_components.__experimentalToolsPanelItem, {
    label: (0, _i18n.__)('Duotone'),
    hasValue: hasDuotone,
    onDeselect: resetDuotone,
    isShownByDefault: defaultControls.duotone,
    panelId: panelId
  }, (0, _react.createElement)(_components.Dropdown, {
    popoverProps: popoverProps,
    className: "block-editor-global-styles-filters-panel__dropdown",
    renderToggle: ({
      onToggle,
      isOpen
    }) => {
      const toggleProps = {
        onClick: onToggle,
        className: (0, _classnames.default)({
          'is-open': isOpen
        }),
        'aria-expanded': isOpen
      };
      return (0, _react.createElement)(_components.__experimentalItemGroup, {
        isBordered: true,
        isSeparated: true
      }, (0, _react.createElement)(_components.Button, {
        ...toggleProps
      }, (0, _react.createElement)(LabeledColorIndicator, {
        indicator: duotone,
        label: (0, _i18n.__)('Duotone')
      })));
    },
    renderContent: () => (0, _react.createElement)(_components.__experimentalDropdownContentWrapper, {
      paddingSize: "small"
    }, (0, _react.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Duotone')
    }, (0, _react.createElement)("p", null, (0, _i18n.__)('Create a two-tone color effect without losing your original image.')), (0, _react.createElement)(_components.DuotonePicker, {
      colorPalette: colorPalette,
      duotonePalette: duotonePalette
      // TODO: Re-enable both when custom colors are supported for block-level styles.
      ,
      disableCustomColors: true,
      disableCustomDuotone: true,
      value: duotone,
      onChange: setDuotone
    })))
  })));
}
//# sourceMappingURL=filters-panel.js.map