"use client";
import {
  usePopoverDisclosure
} from "../__chunks/4ZEZYKUR.js";
import "../__chunks/H3TG2CZP.js";
import "../__chunks/BHEJ6NUH.js";
import "../__chunks/JCH6MLL2.js";
import "../__chunks/VDNZBO4W.js";
import {
  useCompositeItem
} from "../__chunks/QZLXIDNP.js";
import "../__chunks/NWCBQ4CV.js";
import "../__chunks/UH3I23HL.js";
import "../__chunks/3IEDWLST.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import "../__chunks/KK7H3W2B.js";
import "../__chunks/SHA3WOPI.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import "../__chunks/EKQEJRUF.js";
import {
  useEvent,
  useMergeRefs
} from "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/composite/composite-overflow-disclosure.ts
import { useEffect, useRef, useState } from "react";
import { sync } from "@ariakit/core/utils/store";
var useCompositeOverflowDisclosure = createHook((_a) => {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const ref = useRef(null);
  const [shouldRegisterItem, setShouldRegisterItem] = useState(false);
  useEffect(() => {
    return sync(store, ["disclosureElement"], () => {
      store.setDisclosureElement(ref.current);
    });
  }, [store]);
  const onFocusProp = props.onFocus;
  const onFocus = useEvent((event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(true);
  });
  const onBlurProp = props.onBlur;
  const onBlur = useEvent((event) => {
    onBlurProp == null ? void 0 : onBlurProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(false);
  });
  props = __spreadProps(__spreadValues({
    "aria-hidden": !shouldRegisterItem
  }, props), {
    ref: useMergeRefs(props.ref, ref),
    onFocus,
    onBlur
  });
  props = useCompositeItem(__spreadProps(__spreadValues({}, props), { shouldRegisterItem }));
  props = usePopoverDisclosure(__spreadValues({ store }, props));
  return props;
});
var CompositeOverflowDisclosure = createComponent((props) => {
  const htmlProps = useCompositeOverflowDisclosure(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  CompositeOverflowDisclosure.displayName = "CompositeOverflowDisclosure";
}
export {
  CompositeOverflowDisclosure,
  useCompositeOverflowDisclosure
};
