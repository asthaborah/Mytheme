"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _icons = require("@wordpress/icons");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _i18n = require("@wordpress/i18n");
var _keycodes = require("@wordpress/keycodes");
var _leaf = _interopRequireDefault(require("./leaf"));
var _useListViewScrollIntoView = _interopRequireDefault(require("./use-list-view-scroll-into-view"));
var _button = require("../block-mover/button");
var _blockContents = _interopRequireDefault(require("./block-contents"));
var _context = require("./context");
var _utils = require("./utils");
var _store = require("../../store");
var _useBlockDisplayInformation = _interopRequireDefault(require("../use-block-display-information"));
var _blockLock = require("../block-lock");
var _ariaReferencedText = _interopRequireDefault(require("./aria-referenced-text"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ListViewBlock({
  block: {
    clientId
  },
  displacement,
  isAfterDraggedBlocks,
  isDragged,
  isNesting,
  isSelected,
  isBranchSelected,
  selectBlock,
  position,
  level,
  rowCount,
  siblingBlockCount,
  showBlockMovers,
  path,
  isExpanded,
  selectedClientIds,
  isSyncedBranch
}) {
  const cellRef = (0, _element.useRef)(null);
  const rowRef = (0, _element.useRef)(null);
  const settingsRef = (0, _element.useRef)(null);
  const [isHovered, setIsHovered] = (0, _element.useState)(false);
  const [settingsAnchorRect, setSettingsAnchorRect] = (0, _element.useState)();
  const {
    isLocked,
    canEdit,
    canMove
  } = (0, _blockLock.useBlockLock)(clientId);
  const isFirstSelectedBlock = isSelected && selectedClientIds[0] === clientId;
  const isLastSelectedBlock = isSelected && selectedClientIds[selectedClientIds.length - 1] === clientId;
  const {
    toggleBlockHighlight
  } = (0, _data.useDispatch)(_store.store);
  const blockInformation = (0, _useBlockDisplayInformation.default)(clientId);
  const blockTitle = blockInformation?.name || blockInformation?.title || (0, _i18n.__)('Untitled');
  const {
    block,
    blockName,
    blockEditingMode
  } = (0, _data.useSelect)(select => {
    const {
      getBlock,
      getBlockName,
      getBlockEditingMode
    } = select(_store.store);
    return {
      block: getBlock(clientId),
      blockName: getBlockName(clientId),
      blockEditingMode: getBlockEditingMode(clientId)
    };
  }, [clientId]);
  const allowRightClickOverrides = (0, _data.useSelect)(select => select(_store.store).getSettings().allowRightClickOverrides, []);
  const showBlockActions =
  // When a block hides its toolbar it also hides the block settings menu,
  // since that menu is part of the toolbar in the editor canvas.
  // List View respects this by also hiding the block settings menu.
  (0, _blocks.hasBlockSupport)(blockName, '__experimentalToolbar', true) &&
  // Don't show the settings menu if block is disabled or content only.
  blockEditingMode === 'default';
  const instanceId = (0, _compose.useInstanceId)(ListViewBlock);
  const descriptionId = `list-view-block-select-button__${instanceId}`;
  const {
    expand,
    collapse,
    BlockSettingsMenu,
    listViewInstanceId,
    expandedState,
    setInsertedBlock,
    treeGridElementRef
  } = (0, _context.useListViewContext)();

  // If multiple blocks are selected, deselect all blocks when the user
  // presses the escape key.
  const onKeyDown = event => {
    if (event.keyCode === _keycodes.ESCAPE && !event.defaultPrevented && selectedClientIds.length > 0) {
      event.stopPropagation();
      event.preventDefault();
      selectBlock(event, undefined);
    }
  };
  const onMouseEnter = (0, _element.useCallback)(() => {
    setIsHovered(true);
    toggleBlockHighlight(clientId, true);
  }, [clientId, setIsHovered, toggleBlockHighlight]);
  const onMouseLeave = (0, _element.useCallback)(() => {
    setIsHovered(false);
    toggleBlockHighlight(clientId, false);
  }, [clientId, setIsHovered, toggleBlockHighlight]);
  const selectEditorBlock = (0, _element.useCallback)(event => {
    selectBlock(event, clientId);
    event.preventDefault();
  }, [clientId, selectBlock]);
  const updateFocusAndSelection = (0, _element.useCallback)((focusClientId, shouldSelectBlock) => {
    if (shouldSelectBlock) {
      selectBlock(undefined, focusClientId, null, null);
    }
    (0, _utils.focusListItem)(focusClientId, treeGridElementRef?.current);
  }, [selectBlock, treeGridElementRef]);
  const toggleExpanded = (0, _element.useCallback)(event => {
    // Prevent shift+click from opening link in a new window when toggling.
    event.preventDefault();
    event.stopPropagation();
    if (isExpanded === true) {
      collapse(clientId);
    } else if (isExpanded === false) {
      expand(clientId);
    }
  }, [clientId, expand, collapse, isExpanded]);

  // Allow right-clicking an item in the List View to open up the block settings dropdown.
  const onContextMenu = (0, _element.useCallback)(event => {
    if (showBlockActions && allowRightClickOverrides) {
      settingsRef.current?.click();
      // Ensure the position of the settings dropdown is at the cursor.
      setSettingsAnchorRect(new window.DOMRect(event.clientX, event.clientY, 0, 0));
      event.preventDefault();
    }
  }, [allowRightClickOverrides, settingsRef, showBlockActions]);
  const onMouseDown = (0, _element.useCallback)(event => {
    // Prevent right-click from focusing the block,
    // because focus will be handled when opening the block settings dropdown.
    if (allowRightClickOverrides && event.button === 2) {
      event.preventDefault();
    }
  }, [allowRightClickOverrides]);
  const settingsPopoverAnchor = (0, _element.useMemo)(() => {
    const {
      ownerDocument
    } = rowRef?.current || {};

    // If no custom position is set, the settings dropdown will be anchored to the
    // DropdownMenu toggle button.
    if (!settingsAnchorRect || !ownerDocument) {
      return undefined;
    }

    // Position the settings dropdown at the cursor when right-clicking a block.
    return {
      ownerDocument,
      getBoundingClientRect() {
        return settingsAnchorRect;
      }
    };
  }, [settingsAnchorRect]);
  const clearSettingsAnchorRect = (0, _element.useCallback)(() => {
    // Clear the custom position for the settings dropdown so that it is restored back
    // to being anchored to the DropdownMenu toggle button.
    setSettingsAnchorRect(undefined);
  }, [setSettingsAnchorRect]);

  // Pass in a ref to the row, so that it can be scrolled
  // into view when selected. For long lists, the placeholder for the
  // selected block is also observed, within ListViewLeafPlaceholder.
  (0, _useListViewScrollIntoView.default)({
    isSelected,
    rowItemRef: rowRef,
    selectedClientIds
  });

  // When switching between rendering modes (such as template preview and content only),
  // it is possible for a block to temporarily be unavailable. In this case, we should not
  // render the leaf, to avoid errors further down the tree.
  if (!block) {
    return null;
  }
  const blockPositionDescription = (0, _utils.getBlockPositionDescription)(position, siblingBlockCount, level);
  const blockAriaLabel = isLocked ? (0, _i18n.sprintf)(
  // translators: %s: The title of the block. This string indicates a link to select the locked block.
  (0, _i18n.__)('%s (locked)'), blockTitle) : blockTitle;
  const settingsAriaLabel = (0, _i18n.sprintf)(
  // translators: %s: The title of the block.
  (0, _i18n.__)('Options for %s'), blockTitle);
  const hasSiblings = siblingBlockCount > 0;
  const hasRenderedMovers = showBlockMovers && hasSiblings;
  const moverCellClassName = (0, _classnames.default)('block-editor-list-view-block__mover-cell', {
    'is-visible': isHovered || isSelected
  });
  const listViewBlockSettingsClassName = (0, _classnames.default)('block-editor-list-view-block__menu-cell', {
    'is-visible': isHovered || isFirstSelectedBlock
  });
  let colSpan;
  if (hasRenderedMovers) {
    colSpan = 2;
  } else if (!showBlockActions) {
    colSpan = 3;
  }
  const classes = (0, _classnames.default)({
    'is-selected': isSelected,
    'is-first-selected': isFirstSelectedBlock,
    'is-last-selected': isLastSelectedBlock,
    'is-branch-selected': isBranchSelected,
    'is-synced-branch': isSyncedBranch,
    'is-dragging': isDragged,
    'has-single-cell': !showBlockActions,
    'is-synced': blockInformation?.isSynced,
    'is-draggable': canMove,
    'is-displacement-normal': displacement === 'normal',
    'is-displacement-up': displacement === 'up',
    'is-displacement-down': displacement === 'down',
    'is-after-dragged-blocks': isAfterDraggedBlocks,
    'is-nesting': isNesting
  });

  // Only include all selected blocks if the currently clicked on block
  // is one of the selected blocks. This ensures that if a user attempts
  // to alter a block that isn't part of the selection, they're still able
  // to do so.
  const dropdownClientIds = selectedClientIds.includes(clientId) ? selectedClientIds : [clientId];

  // Detect if there is a block in the canvas currently being edited and multi-selection is not happening.
  const currentlyEditingBlockInCanvas = isSelected && selectedClientIds.length === 1;
  return (0, _react.createElement)(_leaf.default, {
    className: classes,
    isDragged: isDragged,
    onKeyDown: onKeyDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onMouseEnter,
    onBlur: onMouseLeave,
    level: level,
    position: position,
    rowCount: rowCount,
    path: path,
    id: `list-view-${listViewInstanceId}-block-${clientId}`,
    "data-block": clientId,
    "data-expanded": canEdit ? isExpanded : undefined,
    ref: rowRef
  }, (0, _react.createElement)(_components.__experimentalTreeGridCell, {
    className: "block-editor-list-view-block__contents-cell",
    colSpan: colSpan,
    ref: cellRef,
    "aria-selected": !!isSelected
  }, ({
    ref,
    tabIndex,
    onFocus
  }) => (0, _react.createElement)("div", {
    className: "block-editor-list-view-block__contents-container"
  }, (0, _react.createElement)(_blockContents.default, {
    block: block,
    onClick: selectEditorBlock,
    onContextMenu: onContextMenu,
    onMouseDown: onMouseDown,
    onToggleExpanded: toggleExpanded,
    isSelected: isSelected,
    position: position,
    siblingBlockCount: siblingBlockCount,
    level: level,
    ref: ref,
    tabIndex: currentlyEditingBlockInCanvas ? 0 : tabIndex,
    onFocus: onFocus,
    isExpanded: canEdit ? isExpanded : undefined,
    selectedClientIds: selectedClientIds,
    ariaLabel: blockAriaLabel,
    ariaDescribedBy: descriptionId,
    updateFocusAndSelection: updateFocusAndSelection
  }), (0, _react.createElement)(_ariaReferencedText.default, {
    id: descriptionId
  }, blockPositionDescription))), hasRenderedMovers && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.__experimentalTreeGridCell, {
    className: moverCellClassName,
    withoutGridItem: true
  }, (0, _react.createElement)(_components.__experimentalTreeGridItem, null, ({
    ref,
    tabIndex,
    onFocus
  }) => (0, _react.createElement)(_button.BlockMoverUpButton, {
    orientation: "vertical",
    clientIds: [clientId],
    ref: ref,
    tabIndex: tabIndex,
    onFocus: onFocus
  })), (0, _react.createElement)(_components.__experimentalTreeGridItem, null, ({
    ref,
    tabIndex,
    onFocus
  }) => (0, _react.createElement)(_button.BlockMoverDownButton, {
    orientation: "vertical",
    clientIds: [clientId],
    ref: ref,
    tabIndex: tabIndex,
    onFocus: onFocus
  })))), showBlockActions && BlockSettingsMenu && (0, _react.createElement)(_components.__experimentalTreeGridCell, {
    className: listViewBlockSettingsClassName,
    "aria-selected": !!isSelected,
    ref: settingsRef
  }, ({
    ref,
    tabIndex,
    onFocus
  }) => (0, _react.createElement)(BlockSettingsMenu, {
    clientIds: dropdownClientIds,
    block: block,
    icon: _icons.moreVertical,
    label: settingsAriaLabel,
    popoverProps: {
      anchor: settingsPopoverAnchor // Used to position the settings at the cursor on right-click.
    },
    toggleProps: {
      ref,
      className: 'block-editor-list-view-block__menu',
      tabIndex,
      onClick: clearSettingsAnchorRect,
      onFocus
    },
    disableOpenOnArrowDown: true,
    expand: expand,
    expandedState: expandedState,
    setInsertedBlock: setInsertedBlock,
    __experimentalSelectBlock: updateFocusAndSelection
  })));
}
var _default = exports.default = (0, _element.memo)(ListViewBlock);
//# sourceMappingURL=block.js.map