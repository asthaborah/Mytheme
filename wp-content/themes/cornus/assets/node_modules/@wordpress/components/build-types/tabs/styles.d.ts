/// <reference types="react" />
import * as Ariakit from '@ariakit/react';
export declare const TabListWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Tab: import("@emotion/styled").StyledComponent<Ariakit.TabOptions<"button"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement>> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, "children" | keyof Ariakit.TabOptions<"button">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const TabPanel: import("@emotion/styled").StyledComponent<Ariakit.TabPanelOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.TabPanelOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map