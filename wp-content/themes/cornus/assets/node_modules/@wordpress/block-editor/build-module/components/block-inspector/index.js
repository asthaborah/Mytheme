import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { getBlockType, getUnregisteredTypeHandlerName, store as blocksStore } from '@wordpress/blocks';
import { PanelBody, __unstableMotion as motion } from '@wordpress/components';
import { useSelect } from '@wordpress/data';

/**
 * Internal dependencies
 */
import SkipToSelectedBlock from '../skip-to-selected-block';
import BlockCard from '../block-card';
import MultiSelectionInspector from '../multi-selection-inspector';
import BlockVariationTransforms from '../block-variation-transforms';
import useBlockDisplayInformation from '../use-block-display-information';
import { store as blockEditorStore } from '../../store';
import BlockStyles from '../block-styles';
import { default as InspectorControls } from '../inspector-controls';
import { default as InspectorControlsTabs } from '../inspector-controls-tabs';
import useInspectorControlsTabs from '../inspector-controls-tabs/use-inspector-controls-tabs';
import AdvancedControls from '../inspector-controls-tabs/advanced-controls-panel';
import PositionControls from '../inspector-controls-tabs/position-controls-panel';
import useBlockInspectorAnimationSettings from './useBlockInspectorAnimationSettings';
import BlockInfo from '../block-info-slot-fill';
import BlockQuickNavigation from '../block-quick-navigation';
import { useBorderPanelLabel } from '../../hooks/border';
function BlockInspectorLockedBlocks({
  topLevelLockedBlock
}) {
  const contentClientIds = useSelect(select => {
    const {
      getClientIdsOfDescendants,
      getBlockName,
      getBlockEditingMode
    } = select(blockEditorStore);
    return getClientIdsOfDescendants(topLevelLockedBlock).filter(clientId => getBlockName(clientId) !== 'core/list-item' && getBlockEditingMode(clientId) === 'contentOnly');
  }, [topLevelLockedBlock]);
  const blockInformation = useBlockDisplayInformation(topLevelLockedBlock);
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, {
    ...blockInformation,
    className: blockInformation.isSynced && 'is-synced'
  }), createElement(BlockVariationTransforms, {
    blockClientId: topLevelLockedBlock
  }), createElement(BlockInfo.Slot, null), contentClientIds.length > 0 && createElement(PanelBody, {
    title: __('Content')
  }, createElement(BlockQuickNavigation, {
    clientIds: contentClientIds
  })));
}
const BlockInspector = ({
  showNoBlockSelectedMessage = true
}) => {
  const {
    count,
    selectedBlockName,
    selectedBlockClientId,
    blockType,
    topLevelLockedBlock
  } = useSelect(select => {
    const {
      getSelectedBlockClientId,
      getSelectedBlockCount,
      getBlockName,
      __unstableGetContentLockingParent,
      getTemplateLock
    } = select(blockEditorStore);
    const _selectedBlockClientId = getSelectedBlockClientId();
    const _selectedBlockName = _selectedBlockClientId && getBlockName(_selectedBlockClientId);
    const _blockType = _selectedBlockName && getBlockType(_selectedBlockName);
    return {
      count: getSelectedBlockCount(),
      selectedBlockClientId: _selectedBlockClientId,
      selectedBlockName: _selectedBlockName,
      blockType: _blockType,
      topLevelLockedBlock: __unstableGetContentLockingParent(_selectedBlockClientId) || (getTemplateLock(_selectedBlockClientId) === 'contentOnly' || _selectedBlockName === 'core/block' ? _selectedBlockClientId : undefined)
    };
  }, []);
  const availableTabs = useInspectorControlsTabs(blockType?.name);
  const showTabs = availableTabs?.length > 1;

  // The block inspector animation settings will be completely
  // removed in the future to create an API which allows the block
  // inspector to transition between what it
  // displays based on the relationship between the selected block
  // and its parent, and only enable it if the parent is controlling
  // its children blocks.
  const blockInspectorAnimationSettings = useBlockInspectorAnimationSettings(blockType, selectedBlockClientId);
  const borderPanelLabel = useBorderPanelLabel({
    blockName: selectedBlockName
  });
  if (count > 1) {
    return createElement("div", {
      className: "block-editor-block-inspector"
    }, createElement(MultiSelectionInspector, null), showTabs ? createElement(InspectorControlsTabs, {
      tabs: availableTabs
    }) : createElement(Fragment, null, createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
      group: "color",
      label: __('Color'),
      className: "color-block-support-panel__inner-wrapper"
    }), createElement(InspectorControls.Slot, {
      group: "typography",
      label: __('Typography')
    }), createElement(InspectorControls.Slot, {
      group: "dimensions",
      label: __('Dimensions')
    }), createElement(InspectorControls.Slot, {
      group: "border",
      label: borderPanelLabel
    }), createElement(InspectorControls.Slot, {
      group: "styles"
    })));
  }
  const isSelectedBlockUnregistered = selectedBlockName === getUnregisteredTypeHandlerName();

  /*
   * If the selected block is of an unregistered type, avoid showing it as an actual selection
   * because we want the user to focus on the unregistered block warning, not block settings.
   */
  if (!blockType || !selectedBlockClientId || isSelectedBlockUnregistered) {
    if (showNoBlockSelectedMessage) {
      return createElement("span", {
        className: "block-editor-block-inspector__no-blocks"
      }, __('No block selected.'));
    }
    return null;
  }
  if (topLevelLockedBlock) {
    return createElement(BlockInspectorLockedBlocks, {
      topLevelLockedBlock: topLevelLockedBlock
    });
  }
  return createElement(BlockInspectorSingleBlockWrapper, {
    animate: blockInspectorAnimationSettings,
    wrapper: children => createElement(AnimatedContainer, {
      blockInspectorAnimationSettings: blockInspectorAnimationSettings,
      selectedBlockClientId: selectedBlockClientId
    }, children)
  }, createElement(BlockInspectorSingleBlock, {
    clientId: selectedBlockClientId,
    blockName: blockType.name
  }));
};
const BlockInspectorSingleBlockWrapper = ({
  animate,
  wrapper,
  children
}) => {
  return animate ? wrapper(children) : children;
};
const AnimatedContainer = ({
  blockInspectorAnimationSettings,
  selectedBlockClientId,
  children
}) => {
  const animationOrigin = blockInspectorAnimationSettings && blockInspectorAnimationSettings.enterDirection === 'leftToRight' ? -50 : 50;
  return createElement(motion.div, {
    animate: {
      x: 0,
      opacity: 1,
      transition: {
        ease: 'easeInOut',
        duration: 0.14
      }
    },
    initial: {
      x: animationOrigin,
      opacity: 0
    },
    key: selectedBlockClientId
  }, children);
};
const BlockInspectorSingleBlock = ({
  clientId,
  blockName
}) => {
  const availableTabs = useInspectorControlsTabs(blockName);
  const showTabs = availableTabs?.length > 1;
  const hasBlockStyles = useSelect(select => {
    const {
      getBlockStyles
    } = select(blocksStore);
    const blockStyles = getBlockStyles(blockName);
    return blockStyles && blockStyles.length > 0;
  }, [blockName]);
  const blockInformation = useBlockDisplayInformation(clientId);
  const borderPanelLabel = useBorderPanelLabel({
    blockName
  });
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, {
    ...blockInformation,
    className: blockInformation.isSynced && 'is-synced'
  }), createElement(BlockVariationTransforms, {
    blockClientId: clientId
  }), createElement(BlockInfo.Slot, null), showTabs && createElement(InspectorControlsTabs, {
    hasBlockStyles: hasBlockStyles,
    clientId: clientId,
    blockName: blockName,
    tabs: availableTabs
  }), !showTabs && createElement(Fragment, null, hasBlockStyles && createElement("div", null, createElement(PanelBody, {
    title: __('Styles')
  }, createElement(BlockStyles, {
    clientId: clientId
  }))), createElement(InspectorControls.Slot, null), createElement(InspectorControls.Slot, {
    group: "list"
  }), createElement(InspectorControls.Slot, {
    group: "color",
    label: __('Color'),
    className: "color-block-support-panel__inner-wrapper"
  }), createElement(InspectorControls.Slot, {
    group: "typography",
    label: __('Typography')
  }), createElement(InspectorControls.Slot, {
    group: "dimensions",
    label: __('Dimensions')
  }), createElement(InspectorControls.Slot, {
    group: "border",
    label: borderPanelLabel
  }), createElement(InspectorControls.Slot, {
    group: "styles"
  }), createElement(InspectorControls.Slot, {
    group: "background",
    label: __('Background')
  }), createElement(PositionControls, null), createElement("div", null, createElement(AdvancedControls, null))), createElement(SkipToSelectedBlock, {
    key: "back"
  }));
};

/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-inspector/README.md
 */
export default BlockInspector;
//# sourceMappingURL=index.js.map