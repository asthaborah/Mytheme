{"version":3,"names":["_element","require","_data","_store","_lockUnlock","useCommandContext","context","getContext","useSelect","commandsStore","initialContext","useRef","setContext","unlock","useDispatch","useEffect","initialContextRef","current"],"sources":["@wordpress/commands/src/hooks/use-command-context.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useDispatch, useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as commandsStore } from '../store';\nimport { unlock } from '../lock-unlock';\n\n/**\n * Sets the active context of the command palette\n *\n * @param {string} context Context to set.\n */\nexport default function useCommandContext( context ) {\n\tconst { getContext } = useSelect( commandsStore );\n\tconst initialContext = useRef( getContext() );\n\tconst { setContext } = unlock( useDispatch( commandsStore ) );\n\n\tuseEffect( () => {\n\t\tsetContext( context );\n\t}, [ context, setContext ] );\n\n\t// This effects ensures that on unmount, we restore the context\n\t// that was set before the component actually mounts.\n\tuseEffect( () => {\n\t\tconst initialContextRef = initialContext.current;\n\t\treturn () => setContext( initialContextRef );\n\t}, [ setContext ] );\n}\n"],"mappings":";;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAKA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AAVA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACe,SAASI,iBAAiBA,CAAEC,OAAO,EAAG;EACpD,MAAM;IAAEC;EAAW,CAAC,GAAG,IAAAC,eAAS,EAAEC,YAAc,CAAC;EACjD,MAAMC,cAAc,GAAG,IAAAC,eAAM,EAAEJ,UAAU,CAAC,CAAE,CAAC;EAC7C,MAAM;IAAEK;EAAW,CAAC,GAAG,IAAAC,kBAAM,EAAE,IAAAC,iBAAW,EAAEL,YAAc,CAAE,CAAC;EAE7D,IAAAM,kBAAS,EAAE,MAAM;IAChBH,UAAU,CAAEN,OAAQ,CAAC;EACtB,CAAC,EAAE,CAAEA,OAAO,EAAEM,UAAU,CAAG,CAAC;;EAE5B;EACA;EACA,IAAAG,kBAAS,EAAE,MAAM;IAChB,MAAMC,iBAAiB,GAAGN,cAAc,CAACO,OAAO;IAChD,OAAO,MAAML,UAAU,CAAEI,iBAAkB,CAAC;EAC7C,CAAC,EAAE,CAAEJ,UAAU,CAAG,CAAC;AACpB"}