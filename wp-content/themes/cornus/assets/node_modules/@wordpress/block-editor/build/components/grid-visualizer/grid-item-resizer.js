"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridItemResizer = GridItemResizer;
var _react = require("react");
var _components = require("@wordpress/components");
var _useBlockRefs = require("../block-list/use-block-props/use-block-refs");
var _cover = _interopRequireDefault(require("../block-popover/cover"));
var _utils = require("./utils");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function GridItemResizer({
  clientId,
  onChange
}) {
  const blockElement = (0, _useBlockRefs.__unstableUseBlockElement)(clientId);
  if (!blockElement) {
    return null;
  }
  return (0, _react.createElement)(_cover.default, {
    className: "block-editor-grid-item-resizer",
    clientId: clientId,
    __unstablePopoverSlot: "block-toolbar"
  }, (0, _react.createElement)(_components.ResizableBox, {
    className: "block-editor-grid-item-resizer__box",
    size: {
      width: '100%',
      height: '100%'
    },
    enable: {
      bottom: true,
      bottomLeft: false,
      bottomRight: false,
      left: false,
      right: true,
      top: false,
      topLeft: false,
      topRight: false
    },
    onResizeStop: (event, direction, boxElement) => {
      const gridElement = blockElement.parentElement;
      const columnGap = parseFloat((0, _utils.getComputedCSS)(gridElement, 'column-gap'));
      const rowGap = parseFloat((0, _utils.getComputedCSS)(gridElement, 'row-gap'));
      const gridColumnLines = getGridLines((0, _utils.getComputedCSS)(gridElement, 'grid-template-columns'), columnGap);
      const gridRowLines = getGridLines((0, _utils.getComputedCSS)(gridElement, 'grid-template-rows'), rowGap);
      const columnStart = getClosestLine(gridColumnLines, blockElement.offsetLeft);
      const rowStart = getClosestLine(gridRowLines, blockElement.offsetTop);
      const columnEnd = getClosestLine(gridColumnLines, blockElement.offsetLeft + boxElement.offsetWidth);
      const rowEnd = getClosestLine(gridRowLines, blockElement.offsetTop + boxElement.offsetHeight);
      onChange({
        columnSpan: Math.max(columnEnd - columnStart, 1),
        rowSpan: Math.max(rowEnd - rowStart, 1)
      });
    }
  }));
}
function getGridLines(template, gap) {
  const lines = [0];
  for (const size of template.split(' ')) {
    const line = parseFloat(size);
    lines.push(lines[lines.length - 1] + line + gap);
  }
  return lines;
}
function getClosestLine(lines, position) {
  return lines.reduce((closest, line, index) => Math.abs(line - position) < Math.abs(lines[closest] - position) ? index : closest, 0);
}
//# sourceMappingURL=grid-item-resizer.js.map