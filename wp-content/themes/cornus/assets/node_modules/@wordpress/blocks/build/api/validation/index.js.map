{"version":3,"names":["_simpleHtmlTokenizer","require","_es","_interopRequireDefault","_deprecated","_htmlEntities","_logger","_serializer","_registration","_utils","identity","x","REGEXP_WHITESPACE","REGEXP_ONLY_WHITESPACE","REGEXP_STYLE_URL_TYPE","BOOLEAN_ATTRIBUTES","ENUMERATED_ATTRIBUTES","MEANINGFUL_ATTRIBUTES","TEXT_NORMALIZATIONS","getTextWithCollapsedWhitespace","REGEXP_NAMED_CHARACTER_REFERENCE","REGEXP_DECIMAL_CHARACTER_REFERENCE","REGEXP_HEXADECIMAL_CHARACTER_REFERENCE","isValidCharacterReference","text","test","DecodeEntityParser","parse","entity","decodeEntities","exports","getTextPiecesSplitOnWhitespace","trim","split","join","getMeaningfulAttributePairs","token","attributes","filter","pair","key","value","indexOf","includes","isEquivalentTextTokens","actual","expected","logger","createLogger","actualChars","chars","expectedChars","i","length","normalize","warning","getNormalizedLength","parseFloat","getNormalizedStyleValue","textPieces","normalizedPieces","map","result","replace","getStyleProperties","pairs","style","valueParts","Object","fromEntries","isEqualAttributesOfName","class","actualPieces","expectedPieces","actualDiff","c","expectedDiff","fastDeepEqual","attribute","isEqualTagAttributePairs","expectedAttributes","toLowerCase","name","actualValue","nameLower","hasOwnProperty","expectedValue","isEqualAttributes","isEqualTokensOfType","StartTag","tagName","Chars","Comment","getNextNonWhitespaceToken","tokens","shift","type","getHTMLTokens","html","Tokenizer","tokenize","e","isClosedByToken","currentToken","nextToken","selfClosing","isEquivalentHTML","actualTokens","expectedTokens","actualToken","expectedToken","isEqualTokens","validateBlock","block","blockTypeOrName","isFallbackBlock","getFreeformContentHandlerName","getUnregisteredTypeHandlerName","createQueuedLogger","blockType","normalizeBlockType","generatedBlockContent","getSaveContent","error","toString","getItems","isValid","originalContent","isValidBlockContent","originalBlockContent","deprecated","since","plugin","alternative","innerBlocks"],"sources":["@wordpress/blocks/src/api/validation/index.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport { Tokenizer } from 'simple-html-tokenizer';\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { decodeEntities } from '@wordpress/html-entities';\n\n/**\n * Internal dependencies\n */\nimport { createLogger, createQueuedLogger } from './logger';\nimport { getSaveContent } from '../serializer';\nimport {\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from '../registration';\nimport { normalizeBlockType } from '../utils';\n\n/** @typedef {import('../parser').WPBlock} WPBlock */\n/** @typedef {import('../registration').WPBlockType} WPBlockType */\n/** @typedef {import('./logger').LoggerItem} LoggerItem */\n\nconst identity = ( x ) => x;\n\n/**\n * Globally matches any consecutive whitespace\n *\n * @type {RegExp}\n */\nconst REGEXP_WHITESPACE = /[\\t\\n\\r\\v\\f ]+/g;\n\n/**\n * Matches a string containing only whitespace\n *\n * @type {RegExp}\n */\nconst REGEXP_ONLY_WHITESPACE = /^[\\t\\n\\r\\v\\f ]*$/;\n\n/**\n * Matches a CSS URL type value\n *\n * @type {RegExp}\n */\nconst REGEXP_STYLE_URL_TYPE = /^url\\s*\\(['\"\\s]*(.*?)['\"\\s]*\\)$/;\n\n/**\n * Boolean attributes are attributes whose presence as being assigned is\n * meaningful, even if only empty.\n *\n * See: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n * Extracted from: https://html.spec.whatwg.org/multipage/indices.html#attributes-3\n *\n * Object.keys( Array.from( document.querySelectorAll( '#attributes-1 > tbody > tr' ) )\n *     .filter( ( tr ) => tr.lastChild.textContent.indexOf( 'Boolean attribute' ) !== -1 )\n *     .reduce( ( result, tr ) => Object.assign( result, {\n *         [ tr.firstChild.textContent.trim() ]: true\n *     } ), {} ) ).sort();\n *\n * @type {Array}\n */\nconst BOOLEAN_ATTRIBUTES = [\n\t'allowfullscreen',\n\t'allowpaymentrequest',\n\t'allowusermedia',\n\t'async',\n\t'autofocus',\n\t'autoplay',\n\t'checked',\n\t'controls',\n\t'default',\n\t'defer',\n\t'disabled',\n\t'download',\n\t'formnovalidate',\n\t'hidden',\n\t'ismap',\n\t'itemscope',\n\t'loop',\n\t'multiple',\n\t'muted',\n\t'nomodule',\n\t'novalidate',\n\t'open',\n\t'playsinline',\n\t'readonly',\n\t'required',\n\t'reversed',\n\t'selected',\n\t'typemustmatch',\n];\n\n/**\n * Enumerated attributes are attributes which must be of a specific value form.\n * Like boolean attributes, these are meaningful if specified, even if not of a\n * valid enumerated value.\n *\n * See: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#enumerated-attribute\n * Extracted from: https://html.spec.whatwg.org/multipage/indices.html#attributes-3\n *\n * Object.keys( Array.from( document.querySelectorAll( '#attributes-1 > tbody > tr' ) )\n *     .filter( ( tr ) => /^(\"(.+?)\";?\\s*)+/.test( tr.lastChild.textContent.trim() ) )\n *     .reduce( ( result, tr ) => Object.assign( result, {\n *         [ tr.firstChild.textContent.trim() ]: true\n *     } ), {} ) ).sort();\n *\n * @type {Array}\n */\nconst ENUMERATED_ATTRIBUTES = [\n\t'autocapitalize',\n\t'autocomplete',\n\t'charset',\n\t'contenteditable',\n\t'crossorigin',\n\t'decoding',\n\t'dir',\n\t'draggable',\n\t'enctype',\n\t'formenctype',\n\t'formmethod',\n\t'http-equiv',\n\t'inputmode',\n\t'kind',\n\t'method',\n\t'preload',\n\t'scope',\n\t'shape',\n\t'spellcheck',\n\t'translate',\n\t'type',\n\t'wrap',\n];\n\n/**\n * Meaningful attributes are those who cannot be safely ignored when omitted in\n * one HTML markup string and not another.\n *\n * @type {Array}\n */\nconst MEANINGFUL_ATTRIBUTES = [\n\t...BOOLEAN_ATTRIBUTES,\n\t...ENUMERATED_ATTRIBUTES,\n];\n\n/**\n * Array of functions which receive a text string on which to apply normalizing\n * behavior for consideration in text token equivalence, carefully ordered from\n * least-to-most expensive operations.\n *\n * @type {Array}\n */\nconst TEXT_NORMALIZATIONS = [ identity, getTextWithCollapsedWhitespace ];\n\n/**\n * Regular expression matching a named character reference. In lieu of bundling\n * a full set of references, the pattern covers the minimal necessary to test\n * positively against the full set.\n *\n * \"The ampersand must be followed by one of the names given in the named\n * character references section, using the same case.\"\n *\n * Tested aginst \"12.5 Named character references\":\n *\n * ```\n * const references = Array.from( document.querySelectorAll(\n *     '#named-character-references-table tr[id^=entity-] td:first-child'\n * ) ).map( ( code ) => code.textContent )\n * references.every( ( reference ) => /^[\\da-z]+$/i.test( reference ) )\n * ```\n *\n * @see https://html.spec.whatwg.org/multipage/syntax.html#character-references\n * @see https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references\n *\n * @type {RegExp}\n */\nconst REGEXP_NAMED_CHARACTER_REFERENCE = /^[\\da-z]+$/i;\n\n/**\n * Regular expression matching a decimal character reference.\n *\n * \"The ampersand must be followed by a U+0023 NUMBER SIGN character (#),\n * followed by one or more ASCII digits, representing a base-ten integer\"\n *\n * @see https://html.spec.whatwg.org/multipage/syntax.html#character-references\n *\n * @type {RegExp}\n */\nconst REGEXP_DECIMAL_CHARACTER_REFERENCE = /^#\\d+$/;\n\n/**\n * Regular expression matching a hexadecimal character reference.\n *\n * \"The ampersand must be followed by a U+0023 NUMBER SIGN character (#), which\n * must be followed by either a U+0078 LATIN SMALL LETTER X character (x) or a\n * U+0058 LATIN CAPITAL LETTER X character (X), which must then be followed by\n * one or more ASCII hex digits, representing a hexadecimal integer\"\n *\n * @see https://html.spec.whatwg.org/multipage/syntax.html#character-references\n *\n * @type {RegExp}\n */\nconst REGEXP_HEXADECIMAL_CHARACTER_REFERENCE = /^#x[\\da-f]+$/i;\n\n/**\n * Returns true if the given string is a valid character reference segment, or\n * false otherwise. The text should be stripped of `&` and `;` demarcations.\n *\n * @param {string} text Text to test.\n *\n * @return {boolean} Whether text is valid character reference.\n */\nexport function isValidCharacterReference( text ) {\n\treturn (\n\t\tREGEXP_NAMED_CHARACTER_REFERENCE.test( text ) ||\n\t\tREGEXP_DECIMAL_CHARACTER_REFERENCE.test( text ) ||\n\t\tREGEXP_HEXADECIMAL_CHARACTER_REFERENCE.test( text )\n\t);\n}\n\n/**\n * Subsitute EntityParser class for `simple-html-tokenizer` which uses the\n * implementation of `decodeEntities` from `html-entities`, in order to avoid\n * bundling a massive named character reference.\n *\n * @see https://github.com/tildeio/simple-html-tokenizer/tree/HEAD/src/entity-parser.ts\n */\nexport class DecodeEntityParser {\n\t/**\n\t * Returns a substitute string for an entity string sequence between `&`\n\t * and `;`, or undefined if no substitution should occur.\n\t *\n\t * @param {string} entity Entity fragment discovered in HTML.\n\t *\n\t * @return {string | undefined} Entity substitute value.\n\t */\n\tparse( entity ) {\n\t\tif ( isValidCharacterReference( entity ) ) {\n\t\t\treturn decodeEntities( '&' + entity + ';' );\n\t\t}\n\t}\n}\n\n/**\n * Given a specified string, returns an array of strings split by consecutive\n * whitespace, ignoring leading or trailing whitespace.\n *\n * @param {string} text Original text.\n *\n * @return {string[]} Text pieces split on whitespace.\n */\nexport function getTextPiecesSplitOnWhitespace( text ) {\n\treturn text.trim().split( REGEXP_WHITESPACE );\n}\n\n/**\n * Given a specified string, returns a new trimmed string where all consecutive\n * whitespace is collapsed to a single space.\n *\n * @param {string} text Original text.\n *\n * @return {string} Trimmed text with consecutive whitespace collapsed.\n */\nexport function getTextWithCollapsedWhitespace( text ) {\n\t// This is an overly simplified whitespace comparison. The specification is\n\t// more prescriptive of whitespace behavior in inline and block contexts.\n\t//\n\t// See: https://medium.com/@patrickbrosset/when-does-white-space-matter-in-html-b90e8a7cdd33\n\treturn getTextPiecesSplitOnWhitespace( text ).join( ' ' );\n}\n\n/**\n * Returns attribute pairs of the given StartTag token, including only pairs\n * where the value is non-empty or the attribute is a boolean attribute, an\n * enumerated attribute, or a custom data- attribute.\n *\n * @see MEANINGFUL_ATTRIBUTES\n *\n * @param {Object} token StartTag token.\n *\n * @return {Array[]} Attribute pairs.\n */\nexport function getMeaningfulAttributePairs( token ) {\n\treturn token.attributes.filter( ( pair ) => {\n\t\tconst [ key, value ] = pair;\n\t\treturn (\n\t\t\tvalue ||\n\t\t\tkey.indexOf( 'data-' ) === 0 ||\n\t\t\tMEANINGFUL_ATTRIBUTES.includes( key )\n\t\t);\n\t} );\n}\n\n/**\n * Returns true if two text tokens (with `chars` property) are equivalent, or\n * false otherwise.\n *\n * @param {Object} actual   Actual token.\n * @param {Object} expected Expected token.\n * @param {Object} logger   Validation logger object.\n *\n * @return {boolean} Whether two text tokens are equivalent.\n */\nexport function isEquivalentTextTokens(\n\tactual,\n\texpected,\n\tlogger = createLogger()\n) {\n\t// This function is intentionally written as syntactically \"ugly\" as a hot\n\t// path optimization. Text is progressively normalized in order from least-\n\t// to-most operationally expensive, until the earliest point at which text\n\t// can be confidently inferred as being equal.\n\tlet actualChars = actual.chars;\n\tlet expectedChars = expected.chars;\n\n\tfor ( let i = 0; i < TEXT_NORMALIZATIONS.length; i++ ) {\n\t\tconst normalize = TEXT_NORMALIZATIONS[ i ];\n\n\t\tactualChars = normalize( actualChars );\n\t\texpectedChars = normalize( expectedChars );\n\n\t\tif ( actualChars === expectedChars ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tlogger.warning(\n\t\t'Expected text `%s`, saw `%s`.',\n\t\texpected.chars,\n\t\tactual.chars\n\t);\n\n\treturn false;\n}\n\n/**\n * Given a CSS length value, returns a normalized CSS length value for strict equality\n * comparison.\n *\n * @param {string} value CSS length value.\n *\n * @return {string} Normalized CSS length value.\n */\nexport function getNormalizedLength( value ) {\n\tif ( 0 === parseFloat( value ) ) {\n\t\treturn '0';\n\t}\n\t// Normalize strings with floats to always include a leading zero.\n\tif ( value.indexOf( '.' ) === 0 ) {\n\t\treturn '0' + value;\n\t}\n\n\treturn value;\n}\n\n/**\n * Given a style value, returns a normalized style value for strict equality\n * comparison.\n *\n * @param {string} value Style value.\n *\n * @return {string} Normalized style value.\n */\nexport function getNormalizedStyleValue( value ) {\n\tconst textPieces = getTextPiecesSplitOnWhitespace( value );\n\tconst normalizedPieces = textPieces.map( getNormalizedLength );\n\tconst result = normalizedPieces.join( ' ' );\n\n\treturn (\n\t\tresult\n\t\t\t// Normalize URL type to omit whitespace or quotes.\n\t\t\t.replace( REGEXP_STYLE_URL_TYPE, 'url($1)' )\n\t);\n}\n\n/**\n * Given a style attribute string, returns an object of style properties.\n *\n * @param {string} text Style attribute.\n *\n * @return {Object} Style properties.\n */\nexport function getStyleProperties( text ) {\n\tconst pairs = text\n\t\t// Trim ending semicolon (avoid including in split)\n\t\t.replace( /;?\\s*$/, '' )\n\t\t// Split on property assignment.\n\t\t.split( ';' )\n\t\t// For each property assignment...\n\t\t.map( ( style ) => {\n\t\t\t// ...split further into key-value pairs.\n\t\t\tconst [ key, ...valueParts ] = style.split( ':' );\n\t\t\tconst value = valueParts.join( ':' );\n\n\t\t\treturn [ key.trim(), getNormalizedStyleValue( value.trim() ) ];\n\t\t} );\n\n\treturn Object.fromEntries( pairs );\n}\n\n/**\n * Attribute-specific equality handlers\n *\n * @type {Object}\n */\nexport const isEqualAttributesOfName = {\n\tclass: ( actual, expected ) => {\n\t\t// Class matches if members are the same, even if out of order or\n\t\t// superfluous whitespace between.\n\t\tconst [ actualPieces, expectedPieces ] = [ actual, expected ].map(\n\t\t\tgetTextPiecesSplitOnWhitespace\n\t\t);\n\t\tconst actualDiff = actualPieces.filter(\n\t\t\t( c ) => ! expectedPieces.includes( c )\n\t\t);\n\t\tconst expectedDiff = expectedPieces.filter(\n\t\t\t( c ) => ! actualPieces.includes( c )\n\t\t);\n\n\t\treturn actualDiff.length === 0 && expectedDiff.length === 0;\n\t},\n\tstyle: ( actual, expected ) => {\n\t\treturn fastDeepEqual(\n\t\t\t...[ actual, expected ].map( getStyleProperties )\n\t\t);\n\t},\n\t// For each boolean attribute, mere presence of attribute in both is enough\n\t// to assume equivalence.\n\t...Object.fromEntries(\n\t\tBOOLEAN_ATTRIBUTES.map( ( attribute ) => [ attribute, () => true ] )\n\t),\n};\n\n/**\n * Given two sets of attribute tuples, returns true if the attribute sets are\n * equivalent.\n *\n * @param {Array[]} actual   Actual attributes tuples.\n * @param {Array[]} expected Expected attributes tuples.\n * @param {Object}  logger   Validation logger object.\n *\n * @return {boolean} Whether attributes are equivalent.\n */\nexport function isEqualTagAttributePairs(\n\tactual,\n\texpected,\n\tlogger = createLogger()\n) {\n\t// Attributes is tokenized as tuples. Their lengths should match. This also\n\t// avoids us needing to check both attributes sets, since if A has any keys\n\t// which do not exist in B, we know the sets to be different.\n\tif ( actual.length !== expected.length ) {\n\t\tlogger.warning(\n\t\t\t'Expected attributes %o, instead saw %o.',\n\t\t\texpected,\n\t\t\tactual\n\t\t);\n\t\treturn false;\n\t}\n\n\t// Attributes are not guaranteed to occur in the same order. For validating\n\t// actual attributes, first convert the set of expected attribute values to\n\t// an object, for lookup by key.\n\tconst expectedAttributes = {};\n\tfor ( let i = 0; i < expected.length; i++ ) {\n\t\texpectedAttributes[ expected[ i ][ 0 ].toLowerCase() ] =\n\t\t\texpected[ i ][ 1 ];\n\t}\n\n\tfor ( let i = 0; i < actual.length; i++ ) {\n\t\tconst [ name, actualValue ] = actual[ i ];\n\t\tconst nameLower = name.toLowerCase();\n\n\t\t// As noted above, if missing member in B, assume different.\n\t\tif ( ! expectedAttributes.hasOwnProperty( nameLower ) ) {\n\t\t\tlogger.warning( 'Encountered unexpected attribute `%s`.', name );\n\t\t\treturn false;\n\t\t}\n\n\t\tconst expectedValue = expectedAttributes[ nameLower ];\n\t\tconst isEqualAttributes = isEqualAttributesOfName[ nameLower ];\n\n\t\tif ( isEqualAttributes ) {\n\t\t\t// Defer custom attribute equality handling.\n\t\t\tif ( ! isEqualAttributes( actualValue, expectedValue ) ) {\n\t\t\t\tlogger.warning(\n\t\t\t\t\t'Expected attribute `%s` of value `%s`, saw `%s`.',\n\t\t\t\t\tname,\n\t\t\t\t\texpectedValue,\n\t\t\t\t\tactualValue\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if ( actualValue !== expectedValue ) {\n\t\t\t// Otherwise strict inequality should bail.\n\t\t\tlogger.warning(\n\t\t\t\t'Expected attribute `%s` of value `%s`, saw `%s`.',\n\t\t\t\tname,\n\t\t\t\texpectedValue,\n\t\t\t\tactualValue\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Token-type-specific equality handlers\n *\n * @type {Object}\n */\nexport const isEqualTokensOfType = {\n\tStartTag: ( actual, expected, logger = createLogger() ) => {\n\t\tif (\n\t\t\tactual.tagName !== expected.tagName &&\n\t\t\t// Optimization: Use short-circuit evaluation to defer case-\n\t\t\t// insensitive check on the assumption that the majority case will\n\t\t\t// have exactly equal tag names.\n\t\t\tactual.tagName.toLowerCase() !== expected.tagName.toLowerCase()\n\t\t) {\n\t\t\tlogger.warning(\n\t\t\t\t'Expected tag name `%s`, instead saw `%s`.',\n\t\t\t\texpected.tagName,\n\t\t\t\tactual.tagName\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn isEqualTagAttributePairs(\n\t\t\t...[ actual, expected ].map( getMeaningfulAttributePairs ),\n\t\t\tlogger\n\t\t);\n\t},\n\tChars: isEquivalentTextTokens,\n\tComment: isEquivalentTextTokens,\n};\n\n/**\n * Given an array of tokens, returns the first token which is not purely\n * whitespace.\n *\n * Mutates the tokens array.\n *\n * @param {Object[]} tokens Set of tokens to search.\n *\n * @return {Object | undefined} Next non-whitespace token.\n */\nexport function getNextNonWhitespaceToken( tokens ) {\n\tlet token;\n\twhile ( ( token = tokens.shift() ) ) {\n\t\tif ( token.type !== 'Chars' ) {\n\t\t\treturn token;\n\t\t}\n\n\t\tif ( ! REGEXP_ONLY_WHITESPACE.test( token.chars ) ) {\n\t\t\treturn token;\n\t\t}\n\t}\n}\n\n/**\n * Tokenize an HTML string, gracefully handling any errors thrown during\n * underlying tokenization.\n *\n * @param {string} html   HTML string to tokenize.\n * @param {Object} logger Validation logger object.\n *\n * @return {Object[]|null} Array of valid tokenized HTML elements, or null on error\n */\nfunction getHTMLTokens( html, logger = createLogger() ) {\n\ttry {\n\t\treturn new Tokenizer( new DecodeEntityParser() ).tokenize( html );\n\t} catch ( e ) {\n\t\tlogger.warning( 'Malformed HTML detected: %s', html );\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns true if the next HTML token closes the current token.\n *\n * @param {Object}           currentToken Current token to compare with.\n * @param {Object|undefined} nextToken    Next token to compare against.\n *\n * @return {boolean} true if `nextToken` closes `currentToken`, false otherwise\n */\nexport function isClosedByToken( currentToken, nextToken ) {\n\t// Ensure this is a self closed token.\n\tif ( ! currentToken.selfClosing ) {\n\t\treturn false;\n\t}\n\n\t// Check token names and determine if nextToken is the closing tag for currentToken.\n\tif (\n\t\tnextToken &&\n\t\tnextToken.tagName === currentToken.tagName &&\n\t\tnextToken.type === 'EndTag'\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns true if the given HTML strings are effectively equivalent, or\n * false otherwise. Invalid HTML is not considered equivalent, even if the\n * strings directly match.\n *\n * @param {string} actual   Actual HTML string.\n * @param {string} expected Expected HTML string.\n * @param {Object} logger   Validation logger object.\n *\n * @return {boolean} Whether HTML strings are equivalent.\n */\nexport function isEquivalentHTML( actual, expected, logger = createLogger() ) {\n\t// Short-circuit if markup is identical.\n\tif ( actual === expected ) {\n\t\treturn true;\n\t}\n\n\t// Tokenize input content and reserialized save content.\n\tconst [ actualTokens, expectedTokens ] = [ actual, expected ].map(\n\t\t( html ) => getHTMLTokens( html, logger )\n\t);\n\n\t// If either is malformed then stop comparing - the strings are not equivalent.\n\tif ( ! actualTokens || ! expectedTokens ) {\n\t\treturn false;\n\t}\n\n\tlet actualToken, expectedToken;\n\twhile ( ( actualToken = getNextNonWhitespaceToken( actualTokens ) ) ) {\n\t\texpectedToken = getNextNonWhitespaceToken( expectedTokens );\n\n\t\t// Inequal if exhausted all expected tokens.\n\t\tif ( ! expectedToken ) {\n\t\t\tlogger.warning(\n\t\t\t\t'Expected end of content, instead saw %o.',\n\t\t\t\tactualToken\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\t// Inequal if next non-whitespace token of each set are not same type.\n\t\tif ( actualToken.type !== expectedToken.type ) {\n\t\t\tlogger.warning(\n\t\t\t\t'Expected token of type `%s` (%o), instead saw `%s` (%o).',\n\t\t\t\texpectedToken.type,\n\t\t\t\texpectedToken,\n\t\t\t\tactualToken.type,\n\t\t\t\tactualToken\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\t// Defer custom token type equality handling, otherwise continue and\n\t\t// assume as equal.\n\t\tconst isEqualTokens = isEqualTokensOfType[ actualToken.type ];\n\t\tif (\n\t\t\tisEqualTokens &&\n\t\t\t! isEqualTokens( actualToken, expectedToken, logger )\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Peek at the next tokens (actual and expected) to see if they close\n\t\t// a self-closing tag.\n\t\tif ( isClosedByToken( actualToken, expectedTokens[ 0 ] ) ) {\n\t\t\t// Consume the next expected token that closes the current actual\n\t\t\t// self-closing token.\n\t\t\tgetNextNonWhitespaceToken( expectedTokens );\n\t\t} else if ( isClosedByToken( expectedToken, actualTokens[ 0 ] ) ) {\n\t\t\t// Consume the next actual token that closes the current expected\n\t\t\t// self-closing token.\n\t\t\tgetNextNonWhitespaceToken( actualTokens );\n\t\t}\n\t}\n\n\tif ( ( expectedToken = getNextNonWhitespaceToken( expectedTokens ) ) ) {\n\t\t// If any non-whitespace tokens remain in expected token set, this\n\t\t// indicates inequality.\n\t\tlogger.warning(\n\t\t\t'Expected %o, instead saw end of content.',\n\t\t\texpectedToken\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns an object with `isValid` property set to `true` if the parsed block\n * is valid given the input content. A block is considered valid if, when serialized\n * with assumed attributes, the content matches the original value. If block is\n * invalid, this function returns all validations issues as well.\n *\n * @param {string|Object} blockTypeOrName      Block type.\n * @param {Object}        attributes           Parsed block attributes.\n * @param {string}        originalBlockContent Original block content.\n * @param {Object}        logger               Validation logger object.\n *\n * @return {Object} Whether block is valid and contains validation messages.\n */\n\n/**\n * Returns an object with `isValid` property set to `true` if the parsed block\n * is valid given the input content. A block is considered valid if, when serialized\n * with assumed attributes, the content matches the original value. If block is\n * invalid, this function returns all validations issues as well.\n *\n * @param {WPBlock}            block                          block object.\n * @param {WPBlockType|string} [blockTypeOrName = block.name] Block type or name, inferred from block if not given.\n *\n * @return {[boolean,Array<LoggerItem>]} validation results.\n */\nexport function validateBlock( block, blockTypeOrName = block.name ) {\n\tconst isFallbackBlock =\n\t\tblock.name === getFreeformContentHandlerName() ||\n\t\tblock.name === getUnregisteredTypeHandlerName();\n\n\t// Shortcut to avoid costly validation.\n\tif ( isFallbackBlock ) {\n\t\treturn [ true, [] ];\n\t}\n\n\tconst logger = createQueuedLogger();\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tlet generatedBlockContent;\n\ttry {\n\t\tgeneratedBlockContent = getSaveContent( blockType, block.attributes );\n\t} catch ( error ) {\n\t\tlogger.error(\n\t\t\t'Block validation failed because an error occurred while generating block content:\\n\\n%s',\n\t\t\terror.toString()\n\t\t);\n\n\t\treturn [ false, logger.getItems() ];\n\t}\n\n\tconst isValid = isEquivalentHTML(\n\t\tblock.originalContent,\n\t\tgeneratedBlockContent,\n\t\tlogger\n\t);\n\n\tif ( ! isValid ) {\n\t\tlogger.error(\n\t\t\t'Block validation failed for `%s` (%o).\\n\\nContent generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\n\t\t\tblockType.name,\n\t\t\tblockType,\n\t\t\tgeneratedBlockContent,\n\t\t\tblock.originalContent\n\t\t);\n\t}\n\n\treturn [ isValid, logger.getItems() ];\n}\n\n/**\n * Returns true if the parsed block is valid given the input content. A block\n * is considered valid if, when serialized with assumed attributes, the content\n * matches the original value.\n *\n * Logs to console in development environments when invalid.\n *\n * @deprecated Use validateBlock instead to avoid data loss.\n *\n * @param {string|Object} blockTypeOrName      Block type.\n * @param {Object}        attributes           Parsed block attributes.\n * @param {string}        originalBlockContent Original block content.\n *\n * @return {boolean} Whether block is valid.\n */\nexport function isValidBlockContent(\n\tblockTypeOrName,\n\tattributes,\n\toriginalBlockContent\n) {\n\tdeprecated( 'isValidBlockContent introduces opportunity for data loss', {\n\t\tsince: '12.6',\n\t\tplugin: 'Gutenberg',\n\t\talternative: 'validateBlock',\n\t} );\n\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst block = {\n\t\tname: blockType.name,\n\t\tattributes,\n\t\tinnerBlocks: [],\n\t\toriginalContent: originalBlockContent,\n\t};\n\tconst [ isValid ] = validateBlock( block, blockType );\n\n\treturn isValid;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAAA,oBAAA,GAAAC,OAAA;AACA,IAAAC,GAAA,GAAAC,sBAAA,CAAAF,OAAA;AAKA,IAAAG,WAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AAKA,IAAAK,OAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,aAAA,GAAAP,OAAA;AAIA,IAAAQ,MAAA,GAAAR,OAAA;AArBA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;;AASA;AACA;AACA;;AAEA,MAAMS,QAAQ,GAAKC,CAAC,IAAMA,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,kBAAkB;;AAEjD;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,iCAAiC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,CAC1B,iBAAiB,EACjB,qBAAqB,EACrB,gBAAgB,EAChB,OAAO,EACP,WAAW,EACX,UAAU,EACV,SAAS,EACT,UAAU,EACV,SAAS,EACT,OAAO,EACP,UAAU,EACV,UAAU,EACV,gBAAgB,EAChB,QAAQ,EACR,OAAO,EACP,WAAW,EACX,MAAM,EACN,UAAU,EACV,OAAO,EACP,UAAU,EACV,YAAY,EACZ,MAAM,EACN,aAAa,EACb,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,eAAe,CACf;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAC7B,gBAAgB,EAChB,cAAc,EACd,SAAS,EACT,iBAAiB,EACjB,aAAa,EACb,UAAU,EACV,KAAK,EACL,WAAW,EACX,SAAS,EACT,aAAa,EACb,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,MAAM,EACN,QAAQ,EACR,SAAS,EACT,OAAO,EACP,OAAO,EACP,YAAY,EACZ,WAAW,EACX,MAAM,EACN,MAAM,CACN;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAC7B,GAAGF,kBAAkB,EACrB,GAAGC,qBAAqB,CACxB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,GAAG,CAAER,QAAQ,EAAES,8BAA8B,CAAE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gCAAgC,GAAG,aAAa;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kCAAkC,GAAG,QAAQ;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sCAAsC,GAAG,eAAe;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,yBAAyBA,CAAEC,IAAI,EAAG;EACjD,OACCJ,gCAAgC,CAACK,IAAI,CAAED,IAAK,CAAC,IAC7CH,kCAAkC,CAACI,IAAI,CAAED,IAAK,CAAC,IAC/CF,sCAAsC,CAACG,IAAI,CAAED,IAAK,CAAC;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAME,kBAAkB,CAAC;EAC/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,KAAKA,CAAEC,MAAM,EAAG;IACf,IAAKL,yBAAyB,CAAEK,MAAO,CAAC,EAAG;MAC1C,OAAO,IAAAC,4BAAc,EAAE,GAAG,GAAGD,MAAM,GAAG,GAAI,CAAC;IAC5C;EACD;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPAE,OAAA,CAAAJ,kBAAA,GAAAA,kBAAA;AAQO,SAASK,8BAA8BA,CAAEP,IAAI,EAAG;EACtD,OAAOA,IAAI,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAErB,iBAAkB,CAAC;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"}