"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _lockUnlock = require("../../lock-unlock");
var _tips = _interopRequireDefault(require("./tips"));
var _previewPanel = _interopRequireDefault(require("./preview-panel"));
var _blockTypesTab = _interopRequireDefault(require("./block-types-tab"));
var _blockPatternsTab = _interopRequireDefault(require("./block-patterns-tab"));
var _patternCategoryPreviewPanel = require("./block-patterns-tab/pattern-category-preview-panel");
var _mediaTab = require("./media-tab");
var _searchResults = _interopRequireDefault(require("./search-results"));
var _useInsertionPoint = _interopRequireDefault(require("./hooks/use-insertion-point"));
var _tabs = _interopRequireDefault(require("./tabs"));
var _store = require("../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function InserterMenu({
  rootClientId,
  clientId,
  isAppender,
  __experimentalInsertionIndex,
  onSelect,
  showInserterHelpPanel,
  showMostUsedBlocks,
  __experimentalFilterValue = '',
  shouldFocusBlock = true
}, ref) {
  const [filterValue, setFilterValue, delayedFilterValue] = (0, _compose.useDebouncedInput)(__experimentalFilterValue);
  const [hoveredItem, setHoveredItem] = (0, _element.useState)(null);
  const [selectedPatternCategory, setSelectedPatternCategory] = (0, _element.useState)(null);
  const [patternFilter, setPatternFilter] = (0, _element.useState)('all');
  const [selectedMediaCategory, setSelectedMediaCategory] = (0, _element.useState)(null);
  const [selectedTab, setSelectedTab] = (0, _element.useState)(null);
  const [destinationRootClientId, onInsertBlocks, onToggleInsertionPoint] = (0, _useInsertionPoint.default)({
    rootClientId,
    clientId,
    isAppender,
    insertionIndex: __experimentalInsertionIndex,
    shouldFocusBlock
  });
  const {
    isZoomOutMode,
    showPatterns
  } = (0, _data.useSelect)(select => {
    const {
      hasAllowedPatterns,
      __unstableGetEditorMode
    } = (0, _lockUnlock.unlock)(select(_store.store));
    return {
      isZoomOutMode: __unstableGetEditorMode() === 'zoom-out',
      showPatterns: hasAllowedPatterns(destinationRootClientId)
    };
  }, [destinationRootClientId]);
  const mediaCategories = (0, _mediaTab.useMediaCategories)(destinationRootClientId);
  const showMedia = mediaCategories.length > 0 && !isZoomOutMode;
  const showBlocks = !isZoomOutMode;
  const onInsert = (0, _element.useCallback)((blocks, meta, shouldForceFocusBlock) => {
    onInsertBlocks(blocks, meta, shouldForceFocusBlock);
    onSelect();
  }, [onInsertBlocks, onSelect]);
  const onInsertPattern = (0, _element.useCallback)((blocks, patternName) => {
    onInsertBlocks(blocks, {
      patternName
    });
    onSelect();
  }, [onInsertBlocks, onSelect]);
  const onHover = (0, _element.useCallback)(item => {
    onToggleInsertionPoint(!!item);
    setHoveredItem(item);
  }, [onToggleInsertionPoint, setHoveredItem]);
  const onHoverPattern = (0, _element.useCallback)(item => {
    onToggleInsertionPoint(!!item);
  }, [onToggleInsertionPoint]);
  const onClickPatternCategory = (0, _element.useCallback)((patternCategory, filter) => {
    setSelectedPatternCategory(patternCategory);
    setPatternFilter(filter);
  }, [setSelectedPatternCategory]);
  const blocksTab = (0, _element.useMemo)(() => (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)("div", {
    className: "block-editor-inserter__block-list"
  }, (0, _react.createElement)(_blockTypesTab.default, {
    rootClientId: destinationRootClientId,
    onInsert: onInsert,
    onHover: onHover,
    showMostUsedBlocks: showMostUsedBlocks
  })), showInserterHelpPanel && (0, _react.createElement)("div", {
    className: "block-editor-inserter__tips"
  }, (0, _react.createElement)(_components.VisuallyHidden, {
    as: "h2"
  }, (0, _i18n.__)('A tip for using the block editor')), (0, _react.createElement)(_tips.default, null))), [destinationRootClientId, onInsert, onHover, showMostUsedBlocks, showInserterHelpPanel]);
  const patternsTab = (0, _element.useMemo)(() => (0, _react.createElement)(_blockPatternsTab.default, {
    rootClientId: destinationRootClientId,
    onInsert: onInsertPattern,
    onSelectCategory: onClickPatternCategory,
    selectedCategory: selectedPatternCategory
  }), [destinationRootClientId, onInsertPattern, onClickPatternCategory, selectedPatternCategory]);
  const mediaTab = (0, _element.useMemo)(() => (0, _react.createElement)(_mediaTab.MediaTab, {
    rootClientId: destinationRootClientId,
    selectedCategory: selectedMediaCategory,
    onSelectCategory: setSelectedMediaCategory,
    onInsert: onInsert
  }), [destinationRootClientId, onInsert, selectedMediaCategory, setSelectedMediaCategory]);
  const inserterTabsContents = (0, _element.useMemo)(() => ({
    blocks: blocksTab,
    patterns: patternsTab,
    media: mediaTab
  }), [blocksTab, mediaTab, patternsTab]);
  const searchRef = (0, _element.useRef)();
  (0, _element.useImperativeHandle)(ref, () => ({
    focusSearch: () => {
      searchRef.current.focus();
    }
  }));
  const showPatternPanel = selectedTab === 'patterns' && !delayedFilterValue && selectedPatternCategory;
  const showAsTabs = !delayedFilterValue && (showPatterns || showMedia);
  const showMediaPanel = selectedTab === 'media' && !delayedFilterValue && selectedMediaCategory;
  const handleSetSelectedTab = value => {
    // If no longer on patterns tab remove the category setting.
    if (value !== 'patterns') {
      setSelectedPatternCategory(null);
    }
    setSelectedTab(value);
  };
  return (0, _react.createElement)("div", {
    className: "block-editor-inserter__menu"
  }, (0, _react.createElement)("div", {
    className: (0, _classnames.default)('block-editor-inserter__main-area', {
      'show-as-tabs': showAsTabs
    })
  }, (0, _react.createElement)(_components.SearchControl, {
    __nextHasNoMarginBottom: true,
    className: "block-editor-inserter__search",
    onChange: value => {
      if (hoveredItem) setHoveredItem(null);
      setFilterValue(value);
    },
    value: filterValue,
    label: (0, _i18n.__)('Search for blocks and patterns'),
    placeholder: (0, _i18n.__)('Search'),
    ref: searchRef
  }), !!delayedFilterValue && (0, _react.createElement)("div", {
    className: "block-editor-inserter__no-tab-container"
  }, (0, _react.createElement)(_searchResults.default, {
    filterValue: delayedFilterValue,
    onSelect: onSelect,
    onHover: onHover,
    onHoverPattern: onHoverPattern,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    __experimentalInsertionIndex: __experimentalInsertionIndex,
    showBlockDirectory: true,
    showBlocks: showBlocks,
    shouldFocusBlock: shouldFocusBlock
  })), showAsTabs && (0, _react.createElement)(_tabs.default, {
    showBlocks: showBlocks,
    showPatterns: showPatterns,
    showMedia: showMedia,
    onSelect: handleSetSelectedTab,
    tabsContents: inserterTabsContents
  }), !delayedFilterValue && !showAsTabs && showBlocks && (0, _react.createElement)("div", {
    className: "block-editor-inserter__no-tab-container"
  }, blocksTab)), showMediaPanel && (0, _react.createElement)(_mediaTab.MediaCategoryDialog, {
    rootClientId: destinationRootClientId,
    onInsert: onInsert,
    category: selectedMediaCategory
  }), showInserterHelpPanel && hoveredItem && (0, _react.createElement)(_components.Popover, {
    className: "block-editor-inserter__preview-container__popover",
    placement: "right-start",
    offset: 16,
    focusOnMount: false,
    animate: false
  }, (0, _react.createElement)(_previewPanel.default, {
    item: hoveredItem
  })), showPatternPanel && (0, _react.createElement)(_patternCategoryPreviewPanel.PatternCategoryPreviewPanel, {
    rootClientId: destinationRootClientId,
    onInsert: onInsertPattern,
    onHover: onHoverPattern,
    category: selectedPatternCategory,
    patternFilter: patternFilter,
    showTitlesAsTooltip: true
  }));
}
var _default = exports.default = (0, _element.forwardRef)(InserterMenu);
//# sourceMappingURL=menu.js.map