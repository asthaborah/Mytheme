{"version":3,"names":["htmlSplitRegex","comments","cdata","escaped","regex","RegExp","htmlSplit","input","parts","workingInput","match","index","push","slice","length","replaceInHtmlTags","haystack","replacePairs","textArr","changed","needles","Object","keys","i","j","needle","indexOf","replace","join","autop","text","br","preTags","trim","textParts","split","lastText","pop","textPart","start","name","substr","allBlocks","texts","filter","Boolean","forEach","textPiece","a","b","preTag","original","removep","html","blocklist","blocklist1","blocklist2","preserve","preserveLinebreaks","preserveBr","_","space","shift"],"sources":["@wordpress/autop/src/index.js"],"sourcesContent":["/**\n * The regular expression for an HTML element.\n *\n * @type {RegExp}\n */\nconst htmlSplitRegex = ( () => {\n\t/* eslint-disable no-multi-spaces */\n\tconst comments =\n\t\t'!' + // Start of comment, after the <.\n\t\t'(?:' + // Unroll the loop: Consume everything until --> is found.\n\t\t'-(?!->)' + // Dash not followed by end of comment.\n\t\t'[^\\\\-]*' + // Consume non-dashes.\n\t\t')*' + // Loop possessively.\n\t\t'(?:-->)?'; // End of comment. If not found, match all input.\n\n\tconst cdata =\n\t\t'!\\\\[CDATA\\\\[' + // Start of comment, after the <.\n\t\t'[^\\\\]]*' + // Consume non-].\n\t\t'(?:' + // Unroll the loop: Consume everything until ]]> is found.\n\t\t'](?!]>)' + // One ] not followed by end of comment.\n\t\t'[^\\\\]]*' + // Consume non-].\n\t\t')*?' + // Loop possessively.\n\t\t'(?:]]>)?'; // End of comment. If not found, match all input.\n\n\tconst escaped =\n\t\t'(?=' + // Is the element escaped?\n\t\t'!--' +\n\t\t'|' +\n\t\t'!\\\\[CDATA\\\\[' +\n\t\t')' +\n\t\t'((?=!-)' + // If yes, which type?\n\t\tcomments +\n\t\t'|' +\n\t\tcdata +\n\t\t')';\n\n\tconst regex =\n\t\t'(' + // Capture the entire match.\n\t\t'<' + // Find start of element.\n\t\t'(' + // Conditional expression follows.\n\t\tescaped + // Find end of escaped element.\n\t\t'|' + // ... else ...\n\t\t'[^>]*>?' + // Find end of normal element.\n\t\t')' +\n\t\t')';\n\n\treturn new RegExp( regex );\n\t/* eslint-enable no-multi-spaces */\n} )();\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @param {string} input The text which has to be formatted.\n *\n * @return {string[]} The formatted text.\n */\nfunction htmlSplit( input ) {\n\tconst parts = [];\n\tlet workingInput = input;\n\n\tlet match;\n\twhile ( ( match = workingInput.match( htmlSplitRegex ) ) ) {\n\t\t// The `match` result, when invoked on a RegExp with the `g` flag (`/foo/g`) will not include `index`.\n\t\t// If the `g` flag is omitted, `index` is included.\n\t\t// `htmlSplitRegex` does not have the `g` flag so we can assert it will have an index number.\n\t\t// Assert `match.index` is a number.\n\t\tconst index = /** @type {number} */ ( match.index );\n\n\t\tparts.push( workingInput.slice( 0, index ) );\n\t\tparts.push( match[ 0 ] );\n\t\tworkingInput = workingInput.slice( index + match[ 0 ].length );\n\t}\n\n\tif ( workingInput.length ) {\n\t\tparts.push( workingInput );\n\t}\n\n\treturn parts;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @param {string}                haystack     The text which has to be formatted.\n * @param {Record<string,string>} replacePairs In the form {from: 'to', â€¦}.\n *\n * @return {string} The formatted text.\n */\nfunction replaceInHtmlTags( haystack, replacePairs ) {\n\t// Find all elements.\n\tconst textArr = htmlSplit( haystack );\n\tlet changed = false;\n\n\t// Extract all needles.\n\tconst needles = Object.keys( replacePairs );\n\n\t// Loop through delimiters (elements) only.\n\tfor ( let i = 1; i < textArr.length; i += 2 ) {\n\t\tfor ( let j = 0; j < needles.length; j++ ) {\n\t\t\tconst needle = needles[ j ];\n\t\t\tif ( -1 !== textArr[ i ].indexOf( needle ) ) {\n\t\t\t\ttextArr[ i ] = textArr[ i ].replace(\n\t\t\t\t\tnew RegExp( needle, 'g' ),\n\t\t\t\t\treplacePairs[ needle ]\n\t\t\t\t);\n\t\t\t\tchanged = true;\n\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( changed ) {\n\t\thaystack = textArr.join( '' );\n\t}\n\n\treturn haystack;\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-\n * breaks after conversion become `<br />` tags, unless br is set to 'false'.\n *\n * @param {string}  text The text which has to be formatted.\n * @param {boolean} br   Optional. If set, will convert all remaining line-\n *                       breaks after paragraphing. Default true.\n *\n * @example\n *```js\n * import { autop } from '@wordpress/autop';\n * autop( 'my text' ); // \"<p>my text</p>\"\n * ```\n *\n * @return {string} Text which has been converted into paragraph tags.\n */\nexport function autop( text, br = true ) {\n\tconst preTags = [];\n\n\tif ( text.trim() === '' ) {\n\t\treturn '';\n\t}\n\n\t// Just to make things a little easier, pad the end.\n\ttext = text + '\\n';\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( text.indexOf( '<pre' ) !== -1 ) {\n\t\tconst textParts = text.split( '</pre>' );\n\t\tconst lastText = textParts.pop();\n\t\ttext = '';\n\n\t\tfor ( let i = 0; i < textParts.length; i++ ) {\n\t\t\tconst textPart = textParts[ i ];\n\t\t\tconst start = textPart.indexOf( '<pre' );\n\n\t\t\t// Malformed html?\n\t\t\tif ( start === -1 ) {\n\t\t\t\ttext += textPart;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst name = '<pre wp-pre-tag-' + i + '></pre>';\n\t\t\tpreTags.push( [ name, textPart.substr( start ) + '</pre>' ] );\n\n\t\t\ttext += textPart.substr( 0, start ) + name;\n\t\t}\n\n\t\ttext += lastText;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\ttext = text.replace( /<br\\s*\\/?>\\s*<br\\s*\\/?>/g, '\\n\\n' );\n\n\tconst allBlocks =\n\t\t'(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\ttext = text.replace(\n\t\tnew RegExp( '(<' + allBlocks + '[\\\\s/>])', 'g' ),\n\t\t'\\n\\n$1'\n\t);\n\n\t// Add a double line break below block-level closing tags.\n\ttext = text.replace(\n\t\tnew RegExp( '(</' + allBlocks + '>)', 'g' ),\n\t\t'$1\\n\\n'\n\t);\n\n\t// Standardize newline characters to \"\\n\".\n\ttext = text.replace( /\\r\\n|\\r/g, '\\n' );\n\n\t// Find newlines in all elements and add placeholders.\n\ttext = replaceInHtmlTags( text, { '\\n': ' <!-- wpnl --> ' } );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( text.indexOf( '<option' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*<option/g, '<option' );\n\t\ttext = text.replace( /<\\/option>\\s*/g, '</option>' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( text.indexOf( '</object>' ) !== -1 ) {\n\t\ttext = text.replace( /(<object[^>]*>)\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*<\\/object>/g, '</object>' );\n\t\ttext = text.replace( /\\s*(<\\/?(?:param|embed)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( text.indexOf( '<source' ) !== -1 || text.indexOf( '<track' ) !== -1 ) {\n\t\ttext = text.replace( /([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*([<\\[]\\/(?:audio|video)[>\\]])/g, '$1' );\n\t\ttext = text.replace( /\\s*(<(?:source|track)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( text.indexOf( '<figcaption' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*(<figcaption[^>]*>)/, '$1' );\n\t\ttext = text.replace( /<\\/figcaption>\\s*/, '</figcaption>' );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\ttext = text.replace( /\\n\\n+/g, '\\n\\n' );\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\tconst texts = text.split( /\\n\\s*\\n/ ).filter( Boolean );\n\n\t// Reset text prior to rebuilding.\n\ttext = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\ttexts.forEach( ( textPiece ) => {\n\t\ttext += '<p>' + textPiece.replace( /^\\n*|\\n*$/g, '' ) + '</p>\\n';\n\t} );\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\ttext = text.replace( /<p>\\s*<\\/p>/g, '' );\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\ttext = text.replace(\n\t\t/<p>([^<]+)<\\/(div|address|form)>/g,\n\t\t'<p>$1</p></$2>'\n\t);\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\ttext = text.replace(\n\t\tnew RegExp( '<p>\\\\s*(</?' + allBlocks + '[^>]*>)\\\\s*</p>', 'g' ),\n\t\t'$1'\n\t);\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\ttext = text.replace( /<p>(<li.+?)<\\/p>/g, '$1' );\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\ttext = text.replace( /<p><blockquote([^>]*)>/gi, '<blockquote$1><p>' );\n\ttext = text.replace( /<\\/blockquote><\\/p>/g, '</p></blockquote>' );\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '<p>\\\\s*(</?' + allBlocks + '[^>]*>)', 'g' ),\n\t\t'$1'\n\t);\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '(</?' + allBlocks + '[^>]*>)\\\\s*</p>', 'g' ),\n\t\t'$1'\n\t);\n\n\t// Optionally insert line breaks.\n\tif ( br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\ttext = text.replace( /<(script|style).*?<\\/\\\\1>/g, ( match ) =>\n\t\t\tmatch[ 0 ].replace( /\\n/g, '<WPPreserveNewline />' )\n\t\t);\n\n\t\t// Normalize <br>\n\t\ttext = text.replace( /<br>|<br\\/>/g, '<br />' );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\ttext = text.replace( /(<br \\/>)?\\s*\\n/g, ( a, b ) =>\n\t\t\tb ? a : '<br />\\n'\n\t\t);\n\n\t\t// Replace newline placeholders with newlines.\n\t\ttext = text.replace( /<WPPreserveNewline \\/>/g, '\\n' );\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '(</?' + allBlocks + '[^>]*>)\\\\s*<br />', 'g' ),\n\t\t'$1'\n\t);\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\ttext = text.replace(\n\t\t/<br \\/>(\\s*<\\/?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)/g,\n\t\t'$1'\n\t);\n\ttext = text.replace( /\\n<\\/p>$/g, '</p>' );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tpreTags.forEach( ( preTag ) => {\n\t\tconst [ name, original ] = preTag;\n\t\ttext = text.replace( name, original );\n\t} );\n\n\t// Restore newlines in all elements.\n\tif ( -1 !== text.indexOf( '<!-- wpnl -->' ) ) {\n\t\ttext = text.replace( /\\s?<!-- wpnl -->\\s?/g, '\\n' );\n\t}\n\n\treturn text;\n}\n\n/**\n * Replaces `<p>` tags with two line breaks. \"Opposite\" of autop().\n *\n * Replaces `<p>` tags with two line breaks except where the `<p>` has attributes.\n * Unifies whitespace. Indents `<li>`, `<dt>` and `<dd>` for better readability.\n *\n * @param {string} html The content from the editor.\n *\n * @example\n * ```js\n * import { removep } from '@wordpress/autop';\n * removep( '<p>my text</p>' ); // \"my text\"\n * ```\n *\n * @return {string} The content with stripped paragraph tags.\n */\nexport function removep( html ) {\n\tconst blocklist =\n\t\t'blockquote|ul|ol|li|dl|dt|dd|table|thead|tbody|tfoot|tr|th|td|h[1-6]|fieldset|figure';\n\tconst blocklist1 = blocklist + '|div|p';\n\tconst blocklist2 = blocklist + '|pre';\n\t/** @type {string[]} */\n\tconst preserve = [];\n\tlet preserveLinebreaks = false;\n\tlet preserveBr = false;\n\n\tif ( ! html ) {\n\t\treturn '';\n\t}\n\n\t// Protect script and style tags.\n\tif ( html.indexOf( '<script' ) !== -1 || html.indexOf( '<style' ) !== -1 ) {\n\t\thtml = html.replace(\n\t\t\t/<(script|style)[^>]*>[\\s\\S]*?<\\/\\1>/g,\n\t\t\t( match ) => {\n\t\t\t\tpreserve.push( match );\n\t\t\t\treturn '<wp-preserve>';\n\t\t\t}\n\t\t);\n\t}\n\n\t// Protect pre tags.\n\tif ( html.indexOf( '<pre' ) !== -1 ) {\n\t\tpreserveLinebreaks = true;\n\t\thtml = html.replace( /<pre[^>]*>[\\s\\S]+?<\\/pre>/g, ( a ) => {\n\t\t\ta = a.replace( /<br ?\\/?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\ta = a.replace( /<\\/?p( [^>]*)?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\treturn a.replace( /\\r?\\n/g, '<wp-line-break>' );\n\t\t} );\n\t}\n\n\t// Remove line breaks but keep <br> tags inside image captions.\n\tif ( html.indexOf( '[caption' ) !== -1 ) {\n\t\tpreserveBr = true;\n\t\thtml = html.replace( /\\[caption[\\s\\S]+?\\[\\/caption\\]/g, ( a ) => {\n\t\t\treturn a\n\t\t\t\t.replace( /<br([^>]*)>/g, '<wp-temp-br$1>' )\n\t\t\t\t.replace( /[\\r\\n\\t]+/, '' );\n\t\t} );\n\t}\n\n\t// Normalize white space characters before and after block tags.\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*</(' + blocklist1 + ')>\\\\s*', 'g' ),\n\t\t'</$1>\\n'\n\t);\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*<((?:' + blocklist1 + ')(?: [^>]*)?)>', 'g' ),\n\t\t'\\n<$1>'\n\t);\n\n\t// Mark </p> if it has any attributes.\n\thtml = html.replace( /(<p [^>]+>[\\s\\S]*?)<\\/p>/g, '$1</p#>' );\n\n\t// Preserve the first <p> inside a <div>.\n\thtml = html.replace( /<div( [^>]*)?>\\s*<p>/gi, '<div$1>\\n\\n' );\n\n\t// Remove paragraph tags.\n\thtml = html.replace( /\\s*<p>/gi, '' );\n\thtml = html.replace( /\\s*<\\/p>\\s*/gi, '\\n\\n' );\n\n\t// Normalize white space chars and remove multiple line breaks.\n\thtml = html.replace( /\\n[\\s\\u00a0]+\\n/g, '\\n\\n' );\n\n\t// Replace <br> tags with line breaks.\n\thtml = html.replace( /(\\s*)<br ?\\/?>\\s*/gi, ( _, space ) => {\n\t\tif ( space && space.indexOf( '\\n' ) !== -1 ) {\n\t\t\treturn '\\n\\n';\n\t\t}\n\n\t\treturn '\\n';\n\t} );\n\n\t// Fix line breaks around <div>.\n\thtml = html.replace( /\\s*<div/g, '\\n<div' );\n\thtml = html.replace( /<\\/div>\\s*/g, '</div>\\n' );\n\n\t// Fix line breaks around caption shortcodes.\n\thtml = html.replace(\n\t\t/\\s*\\[caption([^\\[]+)\\[\\/caption\\]\\s*/gi,\n\t\t'\\n\\n[caption$1[/caption]\\n\\n'\n\t);\n\thtml = html.replace( /caption\\]\\n\\n+\\[caption/g, 'caption]\\n\\n[caption' );\n\n\t// Pad block elements tags with a line break.\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*<((?:' + blocklist2 + ')(?: [^>]*)?)\\\\s*>', 'g' ),\n\t\t'\\n<$1>'\n\t);\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*</(' + blocklist2 + ')>\\\\s*', 'g' ),\n\t\t'</$1>\\n'\n\t);\n\n\t// Indent <li>, <dt> and <dd> tags.\n\thtml = html.replace( /<((li|dt|dd)[^>]*)>/g, ' \\t<$1>' );\n\n\t// Fix line breaks around <select> and <option>.\n\tif ( html.indexOf( '<option' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<option/g, '\\n<option' );\n\t\thtml = html.replace( /\\s*<\\/select>/g, '\\n</select>' );\n\t}\n\n\t// Pad <hr> with two line breaks.\n\tif ( html.indexOf( '<hr' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<hr( [^>]*)?>\\s*/g, '\\n\\n<hr$1>\\n\\n' );\n\t}\n\n\t// Remove line breaks in <object> tags.\n\tif ( html.indexOf( '<object' ) !== -1 ) {\n\t\thtml = html.replace( /<object[\\s\\S]+?<\\/object>/g, ( a ) => {\n\t\t\treturn a.replace( /[\\r\\n]+/g, '' );\n\t\t} );\n\t}\n\n\t// Unmark special paragraph closing tags.\n\thtml = html.replace( /<\\/p#>/g, '</p>\\n' );\n\n\t// Pad remaining <p> tags whit a line break.\n\thtml = html.replace( /\\s*(<p [^>]+>[\\s\\S]*?<\\/p>)/g, '\\n$1' );\n\n\t// Trim.\n\thtml = html.replace( /^\\s+/, '' );\n\thtml = html.replace( /[\\s\\u00a0]+$/, '' );\n\n\tif ( preserveLinebreaks ) {\n\t\thtml = html.replace( /<wp-line-break>/g, '\\n' );\n\t}\n\n\tif ( preserveBr ) {\n\t\thtml = html.replace( /<wp-temp-br([^>]*)>/g, '<br$1>' );\n\t}\n\n\t// Restore preserved tags.\n\tif ( preserve.length ) {\n\t\thtml = html.replace( /<wp-preserve>/g, () => {\n\t\t\treturn /** @type {string} */ ( preserve.shift() );\n\t\t} );\n\t}\n\n\treturn html;\n}\n"],"mappings":"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"}