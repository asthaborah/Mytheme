import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { ColorIndicator, Dropdown, DuotonePicker, DuotoneSwatch, MenuGroup, ToolbarButton } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { DOWN } from '@wordpress/keycodes';
import { Icon, filter } from '@wordpress/icons';
import { useInstanceId } from '@wordpress/compose';
function DuotoneControl({
  id: idProp,
  colorPalette,
  duotonePalette,
  disableCustomColors,
  disableCustomDuotone,
  value,
  onChange
}) {
  let toolbarIcon;
  if (value === 'unset') {
    toolbarIcon = createElement(ColorIndicator, {
      className: "block-editor-duotone-control__unset-indicator"
    });
  } else if (value) {
    toolbarIcon = createElement(DuotoneSwatch, {
      values: value
    });
  } else {
    toolbarIcon = createElement(Icon, {
      icon: filter
    });
  }
  const actionLabel = __('Apply duotone filter');
  const id = useInstanceId(DuotoneControl, 'duotone-control', idProp);
  const descriptionId = `${id}__description`;
  return createElement(Dropdown, {
    popoverProps: {
      className: 'block-editor-duotone-control__popover',
      headerTitle: __('Duotone')
    },
    renderToggle: ({
      isOpen,
      onToggle
    }) => {
      const openOnArrowDown = event => {
        if (!isOpen && event.keyCode === DOWN) {
          event.preventDefault();
          onToggle();
        }
      };
      return createElement(ToolbarButton, {
        showTooltip: true,
        onClick: onToggle,
        "aria-haspopup": "true",
        "aria-expanded": isOpen,
        onKeyDown: openOnArrowDown,
        label: actionLabel,
        icon: toolbarIcon
      });
    },
    renderContent: () => createElement(MenuGroup, {
      label: __('Duotone')
    }, createElement("p", null, __('Create a two-tone color effect without losing your original image.')), createElement(DuotonePicker, {
      "aria-label": actionLabel,
      "aria-describedby": descriptionId,
      colorPalette: colorPalette,
      duotonePalette: duotonePalette,
      disableCustomColors: disableCustomColors,
      disableCustomDuotone: disableCustomDuotone,
      value: value,
      onChange: onChange
    }))
  });
}
export default DuotoneControl;
//# sourceMappingURL=index.js.map