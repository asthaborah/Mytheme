"use client";
import {
  hideElementFromAccessibilityTree
} from "./BULCTPRV.js";
import {
  isBackdrop
} from "./MKDDWKFK.js";
import {
  walkTreeOutside
} from "./72E5EPFF.js";
import {
  assignStyle,
  setAttribute,
  setProperty
} from "./X6WIMZJE.js";
import {
  supportsInert
} from "./677M2CI3.js";

// src/dialog/utils/disable-tree.ts
import { contains } from "@ariakit/core/utils/dom";
import { getAllTabbableIn } from "@ariakit/core/utils/focus";
import { chain, noop } from "@ariakit/core/utils/misc";
function disableTree(element, ignoredElements) {
  if (!("style" in element))
    return noop;
  if (supportsInert()) {
    return setProperty(element, "inert", true);
  }
  const tabbableElements = getAllTabbableIn(element, true);
  const enableElements = tabbableElements.map((element2) => {
    if (ignoredElements == null ? void 0 : ignoredElements.some((el) => el && contains(el, element2)))
      return noop;
    return setAttribute(element2, "tabindex", "-1");
  });
  return chain(
    ...enableElements,
    hideElementFromAccessibilityTree(element),
    assignStyle(element, {
      pointerEvents: "none",
      userSelect: "none",
      cursor: "default"
    })
  );
}
function disableTreeOutside(id, elements) {
  const cleanups = [];
  const ids = elements.map((el) => el == null ? void 0 : el.id);
  walkTreeOutside(id, elements, (element) => {
    if (isBackdrop(element, ...ids))
      return;
    cleanups.unshift(disableTree(element, elements));
  });
  const restoreTreeOutside = () => {
    cleanups.forEach((fn) => fn());
  };
  return restoreTreeOutside;
}

export {
  disableTree,
  disableTreeOutside
};
