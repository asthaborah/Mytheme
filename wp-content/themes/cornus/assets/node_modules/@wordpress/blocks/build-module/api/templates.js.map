{"version":3,"names":["renderToString","convertLegacyBlockNameAndAttributes","createBlock","getBlockType","doBlocksMatchTemplate","blocks","template","length","every","name","innerBlocksTemplate","index","block","innerBlocks","synchronizeBlocksWithTemplate","map","attributes","_blockType$attributes","blockType","isHTMLAttribute","attributeDefinition","source","isQueryAttribute","normalizeAttributes","schema","values","Object","fromEntries","entries","key","value","normalizeAttribute","definition","Array","isArray","subValues","query","normalizedAttributes","blockName","blockAttributes","undefined","originalName","originalContent","originalUndelimitedContent"],"sources":["@wordpress/blocks/src/api/templates.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { convertLegacyBlockNameAndAttributes } from './parser/convert-legacy-block';\nimport { createBlock } from './factory';\nimport { getBlockType } from './registration';\n\n/**\n * Checks whether a list of blocks matches a template by comparing the block names.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {boolean} Whether the list of blocks matches a templates.\n */\nexport function doBlocksMatchTemplate( blocks = [], template = [] ) {\n\treturn (\n\t\tblocks.length === template.length &&\n\t\ttemplate.every( ( [ name, , innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\t\t\treturn (\n\t\t\t\tname === block.name &&\n\t\t\t\tdoBlocksMatchTemplate( block.innerBlocks, innerBlocksTemplate )\n\t\t\t);\n\t\t} )\n\t);\n}\n\n/**\n * Synchronize a block list with a block template.\n *\n * Synchronizing a block list with a block template means that we loop over the blocks\n * keep the block as is if it matches the block at the same position in the template\n * (If it has the same name) and if doesn't match, we create a new block based on the template.\n * Extra blocks not present in the template are removed.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {Array} Updated Block list.\n */\nexport function synchronizeBlocksWithTemplate( blocks = [], template ) {\n\t// If no template is provided, return blocks unmodified.\n\tif ( ! template ) {\n\t\treturn blocks;\n\t}\n\n\treturn template.map(\n\t\t( [ name, attributes, innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\n\t\t\tif ( block && block.name === name ) {\n\t\t\t\tconst innerBlocks = synchronizeBlocksWithTemplate(\n\t\t\t\t\tblock.innerBlocks,\n\t\t\t\t\tinnerBlocksTemplate\n\t\t\t\t);\n\t\t\t\treturn { ...block, innerBlocks };\n\t\t\t}\n\n\t\t\t// To support old templates that were using the \"children\" format\n\t\t\t// for the attributes using \"html\" strings now, we normalize the template attributes\n\t\t\t// before creating the blocks.\n\n\t\t\tconst blockType = getBlockType( name );\n\t\t\tconst isHTMLAttribute = ( attributeDefinition ) =>\n\t\t\t\tattributeDefinition?.source === 'html';\n\t\t\tconst isQueryAttribute = ( attributeDefinition ) =>\n\t\t\t\tattributeDefinition?.source === 'query';\n\n\t\t\tconst normalizeAttributes = ( schema, values ) => {\n\t\t\t\tif ( ! values ) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\treturn Object.fromEntries(\n\t\t\t\t\tObject.entries( values ).map( ( [ key, value ] ) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tnormalizeAttribute( schema[ key ], value ),\n\t\t\t\t\t] )\n\t\t\t\t);\n\t\t\t};\n\t\t\tconst normalizeAttribute = ( definition, value ) => {\n\t\t\t\tif ( isHTMLAttribute( definition ) && Array.isArray( value ) ) {\n\t\t\t\t\t// Introduce a deprecated call at this point\n\t\t\t\t\t// When we're confident that \"children\" format should be removed from the templates.\n\n\t\t\t\t\treturn renderToString( value );\n\t\t\t\t}\n\n\t\t\t\tif ( isQueryAttribute( definition ) && value ) {\n\t\t\t\t\treturn value.map( ( subValues ) => {\n\t\t\t\t\t\treturn normalizeAttributes(\n\t\t\t\t\t\t\tdefinition.query,\n\t\t\t\t\t\t\tsubValues\n\t\t\t\t\t\t);\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\tconst normalizedAttributes = normalizeAttributes(\n\t\t\t\tblockType?.attributes ?? {},\n\t\t\t\tattributes\n\t\t\t);\n\n\t\t\tlet [ blockName, blockAttributes ] =\n\t\t\t\tconvertLegacyBlockNameAndAttributes(\n\t\t\t\t\tname,\n\t\t\t\t\tnormalizedAttributes\n\t\t\t\t);\n\n\t\t\t// If a Block is undefined at this point, use the core/missing block as\n\t\t\t// a placeholder for a better user experience.\n\t\t\tif ( undefined === getBlockType( blockName ) ) {\n\t\t\t\tblockAttributes = {\n\t\t\t\t\toriginalName: name,\n\t\t\t\t\toriginalContent: '',\n\t\t\t\t\toriginalUndelimitedContent: '',\n\t\t\t\t};\n\t\t\t\tblockName = 'core/missing';\n\t\t\t}\n\n\t\t\treturn createBlock(\n\t\t\t\tblockName,\n\t\t\t\tblockAttributes,\n\t\t\t\tsynchronizeBlocksWithTemplate( [], innerBlocksTemplate )\n\t\t\t);\n\t\t}\n\t);\n}\n"],"mappings":"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"}