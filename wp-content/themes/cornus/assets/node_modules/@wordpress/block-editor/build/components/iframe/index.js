"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _blockSelectionClearer = require("../block-selection-clearer");
var _writingFlow = require("../writing-flow");
var _getCompatibilityStyles = require("./get-compatibility-styles");
var _store = require("../../store");
var _calculateScale = _interopRequireDefault(require("../../utils/calculate-scale"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function bubbleEvent(event, Constructor, frame) {
  const init = {};
  for (const key in event) {
    init[key] = event[key];
  }

  // Check if the event is a MouseEvent generated within the iframe.
  // If so, adjust the coordinates to be relative to the position of
  // the iframe. This ensures that components such as Draggable
  // receive coordinates relative to the window, instead of relative
  // to the iframe. Without this, the Draggable event handler would
  // result in components "jumping" position as soon as the user
  // drags over the iframe.
  if (event instanceof frame.contentDocument.defaultView.MouseEvent) {
    const rect = frame.getBoundingClientRect();
    init.clientX += rect.left;
    init.clientY += rect.top;
  }
  const newEvent = new Constructor(event.type, init);
  if (init.defaultPrevented) {
    newEvent.preventDefault();
  }
  const cancelled = !frame.dispatchEvent(newEvent);
  if (cancelled) {
    event.preventDefault();
  }
}

/**
 * Bubbles some event types (keydown, keypress, and dragover) to parent document
 * document to ensure that the keyboard shortcuts and drag and drop work.
 *
 * Ideally, we should remove event bubbling in the future. Keyboard shortcuts
 * should be context dependent, e.g. actions on blocks like Cmd+A should not
 * work globally outside the block editor.
 *
 * @param {Document} iframeDocument Document to attach listeners to.
 */
function useBubbleEvents(iframeDocument) {
  return (0, _compose.useRefEffect)(() => {
    const {
      defaultView
    } = iframeDocument;
    if (!defaultView) {
      return;
    }
    const {
      frameElement
    } = defaultView;
    const html = iframeDocument.documentElement;
    const eventTypes = ['dragover', 'mousemove'];
    const handlers = {};
    for (const name of eventTypes) {
      handlers[name] = event => {
        const prototype = Object.getPrototypeOf(event);
        const constructorName = prototype.constructor.name;
        const Constructor = window[constructorName];
        bubbleEvent(event, Constructor, frameElement);
      };
      html.addEventListener(name, handlers[name]);
    }
    return () => {
      for (const name of eventTypes) {
        html.removeEventListener(name, handlers[name]);
      }
    };
  });
}
function Iframe({
  contentRef,
  children,
  tabIndex = 0,
  shouldZoom = false,
  readonly,
  forwardedRef: ref,
  title = (0, _i18n.__)('Editor canvas'),
  ...props
}) {
  const {
    resolvedAssets,
    isPreviewMode,
    isZoomOutMode
  } = (0, _data.useSelect)(select => {
    const {
      getSettings,
      __unstableGetEditorMode
    } = select(_store.store);
    const settings = getSettings();
    return {
      resolvedAssets: settings.__unstableResolvedAssets,
      isPreviewMode: settings.__unstableIsPreviewMode,
      isZoomOutMode: __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const {
    styles = '',
    scripts = ''
  } = resolvedAssets;
  const [iframeDocument, setIframeDocument] = (0, _element.useState)();
  const [bodyClasses, setBodyClasses] = (0, _element.useState)([]);
  const clearerRef = (0, _blockSelectionClearer.useBlockSelectionClearer)();
  const [before, writingFlowRef, after] = (0, _writingFlow.useWritingFlow)();
  const [contentResizeListener, {
    height: contentHeight,
    width: contentWidth
  }] = (0, _compose.useResizeObserver)();

  // When zoom-out mode is enabled, the iframe is scaled down to fit the
  // content within the viewport.
  // At 1000px wide, the iframe is scaled to 45%.
  // At 400px wide, the iframe is scaled to 90%.
  const scale = isZoomOutMode && shouldZoom ? (0, _calculateScale.default)({
    maxWidth: 1000,
    minWidth: 400,
    maxScale: 0.45,
    minScale: 0.9
  }, contentWidth) : 1;
  const frameSize = isZoomOutMode ? 100 : 0;
  const setRef = (0, _compose.useRefEffect)(node => {
    node._load = () => {
      setIframeDocument(node.contentDocument);
    };
    let iFrameDocument;
    // Prevent the default browser action for files dropped outside of dropzones.
    function preventFileDropDefault(event) {
      event.preventDefault();
    }
    function onLoad() {
      const {
        contentDocument,
        ownerDocument
      } = node;
      const {
        documentElement
      } = contentDocument;
      iFrameDocument = contentDocument;
      documentElement.classList.add('block-editor-iframe__html');
      clearerRef(documentElement);

      // Ideally ALL classes that are added through get_body_class should
      // be added in the editor too, which we'll somehow have to get from
      // the server in the future (which will run the PHP filters).
      setBodyClasses(Array.from(ownerDocument.body.classList).filter(name => name.startsWith('admin-color-') || name.startsWith('post-type-') || name === 'wp-embed-responsive'));
      contentDocument.dir = ownerDocument.dir;
      for (const compatStyle of (0, _getCompatibilityStyles.getCompatibilityStyles)()) {
        if (contentDocument.getElementById(compatStyle.id)) {
          continue;
        }
        contentDocument.head.appendChild(compatStyle.cloneNode(true));
        if (!isPreviewMode) {
          // eslint-disable-next-line no-console
          console.warn(`${compatStyle.id} was added to the iframe incorrectly. Please use block.json or enqueue_block_assets to add styles to the iframe.`, compatStyle);
        }
      }
      iFrameDocument.addEventListener('dragover', preventFileDropDefault, false);
      iFrameDocument.addEventListener('drop', preventFileDropDefault, false);
    }
    node.addEventListener('load', onLoad);
    return () => {
      delete node._load;
      node.removeEventListener('load', onLoad);
      iFrameDocument?.removeEventListener('dragover', preventFileDropDefault);
      iFrameDocument?.removeEventListener('drop', preventFileDropDefault);
    };
  }, []);
  const disabledRef = (0, _compose.useDisabled)({
    isDisabled: !readonly
  });
  const bodyRef = (0, _compose.useMergeRefs)([useBubbleEvents(iframeDocument), contentRef, clearerRef, writingFlowRef, disabledRef]);

  // Correct doctype is required to enable rendering in standards
  // mode. Also preload the styles to avoid a flash of unstyled
  // content.
  const html = `<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<script>window.frameElement._load()</script>
		<style>
			html{
				height: auto !important;
				min-height: 100%;
			}

			body {
				margin: 0;
				/* Default background color in case zoom out mode background
				colors the html element */
				background: white;
			}
		</style>
		${styles}
		${scripts}
	</head>
	<body>
		<script>document.currentScript.parentElement.remove()</script>
	</body>
</html>`;
  const [src, cleanup] = (0, _element.useMemo)(() => {
    const _src = URL.createObjectURL(new window.Blob([html], {
      type: 'text/html'
    }));
    return [_src, () => URL.revokeObjectURL(_src)];
  }, [html]);
  (0, _element.useEffect)(() => cleanup, [cleanup]);

  // We need to counter the margin created by scaling the iframe. If the scale
  // is e.g. 0.45, then the top + bottom margin is 0.55 (1 - scale). Just the
  // top or bottom margin is 0.55 / 2 ((1 - scale) / 2).
  const marginFromScaling = contentHeight * (1 - scale) / 2;
  (0, _element.useEffect)(() => {
    if (iframeDocument && scale !== 1) {
      iframeDocument.documentElement.style.transform = `scale( ${scale} )`;
      iframeDocument.documentElement.style.marginTop = `${frameSize}px`;
      iframeDocument.documentElement.style.marginBottom = `${-marginFromScaling * 2 + frameSize}px`;
      return () => {
        iframeDocument.documentElement.style.transform = '';
        iframeDocument.documentElement.style.marginTop = '';
        iframeDocument.documentElement.style.marginBottom = '';
      };
    }
  }, [scale, frameSize, marginFromScaling, iframeDocument]);

  // Make sure to not render the before and after focusable div elements in view
  // mode. They're only needed to capture focus in edit mode.
  const shouldRenderFocusCaptureElements = tabIndex >= 0 && !isPreviewMode;
  return (0, _react.createElement)(_react.Fragment, null, shouldRenderFocusCaptureElements && before, (0, _react.createElement)("iframe", {
    ...props,
    style: {
      border: 0,
      ...props.style,
      height: props.style?.height,
      transition: 'all .3s'
    },
    ref: (0, _compose.useMergeRefs)([ref, setRef]),
    tabIndex: tabIndex
    // Correct doctype is required to enable rendering in standards
    // mode. Also preload the styles to avoid a flash of unstyled
    // content.
    ,
    src: src,
    title: title,
    onKeyDown: event => {
      if (props.onKeyDown) {
        props.onKeyDown(event);
      }
      // If the event originates from inside the iframe, it means
      // it bubbled through the portal, but only with React
      // events. We need to to bubble native events as well,
      // though by doing so we also trigger another React event,
      // so we need to stop the propagation of this event to avoid
      // duplication.
      if (event.currentTarget.ownerDocument !== event.target.ownerDocument) {
        event.stopPropagation();
        bubbleEvent(event, window.KeyboardEvent, event.currentTarget);
      }
    }
  }, iframeDocument && (0, _element.createPortal)(
  // We want to prevent React events from bubbling throught the iframe
  // we bubble these manually.
  /* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */
  (0, _react.createElement)("body", {
    ref: bodyRef,
    className: (0, _classnames.default)('block-editor-iframe__body', 'editor-styles-wrapper', ...bodyClasses)
  }, contentResizeListener, (0, _react.createElement)(_components.__experimentalStyleProvider, {
    document: iframeDocument
  }, children)), iframeDocument.documentElement)), shouldRenderFocusCaptureElements && after);
}
function IframeIfReady(props, ref) {
  const isInitialised = (0, _data.useSelect)(select => select(_store.store).getSettings().__internalIsInitialized, []);

  // We shouldn't render the iframe until the editor settings are initialised.
  // The initial settings are needed to get the styles for the srcDoc, which
  // cannot be changed after the iframe is mounted. srcDoc is used to to set
  // the initial iframe HTML, which is required to avoid a flash of unstyled
  // content.
  if (!isInitialised) {
    return null;
  }
  return (0, _react.createElement)(Iframe, {
    ...props,
    forwardedRef: ref
  });
}
var _default = exports.default = (0, _element.forwardRef)(IframeIfReady);
//# sourceMappingURL=index.js.map