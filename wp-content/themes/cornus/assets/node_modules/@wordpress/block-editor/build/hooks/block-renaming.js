"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addLabelCallback = addLabelCallback;
exports.default = void 0;
var _react = require("react");
var _hooks = require("@wordpress/hooks");
var _blocks = require("@wordpress/blocks");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _components2 = require("../components");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Filters registered block settings, adding an `__experimentalLabel` callback if one does not already exist.
 *
 * @param {Object} settings Original block settings.
 *
 * @return {Object} Filtered block settings.
 */
function addLabelCallback(settings) {
  // If blocks provide their own label callback, do not override it.
  if (settings.__experimentalLabel) {
    return settings;
  }
  const supportsBlockNaming = (0, _blocks.hasBlockSupport)(settings, 'renaming', true // default value
  );

  // Check whether block metadata is supported before using it.
  if (supportsBlockNaming) {
    settings.__experimentalLabel = (attributes, {
      context
    }) => {
      const {
        metadata
      } = attributes;

      // In the list view, use the block's name attribute as the label.
      if (context === 'list-view' && metadata?.name) {
        return metadata.name;
      }
    };
  }
  return settings;
}
function BlockRenameControlPure({
  metadata,
  setAttributes
}) {
  return (0, _react.createElement)(_components2.InspectorControls, {
    group: "advanced"
  }, (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    label: (0, _i18n.__)('Block name'),
    value: metadata?.name || '',
    onChange: newName => {
      setAttributes({
        metadata: {
          ...metadata,
          name: newName
        }
      });
    }
  }));
}
var _default = exports.default = {
  edit: BlockRenameControlPure,
  attributeKeys: ['metadata'],
  hasSupport(name) {
    return (0, _blocks.hasBlockSupport)(name, 'renaming', true);
  }
};
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/metadata/addLabelCallback', addLabelCallback);
//# sourceMappingURL=block-renaming.js.map