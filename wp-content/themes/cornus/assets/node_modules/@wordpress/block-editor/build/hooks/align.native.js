"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _align.default;
  }
});
var _hooks = require("@wordpress/hooks");
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _align = _interopRequireWildcard(require("./align.js"));
Object.keys(_align).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _align[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _align[key];
    }
  });
});
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * WordPress dependencies
 */

const ALIGNMENTS = ['left', 'center', 'right'];
// Used to filter out blocks that don't support wide/full alignment on mobile
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/react-native-editor/align', (settings, name) => {
  if (_components.WIDE_ALIGNMENTS.excludeBlocks.includes(name) && (0, _blocks.hasBlockSupport)(settings, 'align')) {
    const blockAlign = settings.supports.align;
    settings.supports = {
      ...settings.supports,
      align: Array.isArray(blockAlign) ? blockAlign.filter(alignment => !Object.values(_components.WIDE_ALIGNMENTS.alignments).includes(alignment)) : blockAlign,
      alignWide: false
    };
    settings.attributes = {
      ...settings.attributes,
      align: {
        type: 'string',
        // Allow for '' since it is used by the `updateAlignment` function
        // in toolbar controls for special cases with defined default values.
        enum: [...ALIGNMENTS, '']
      }
    };
  }
  return settings;
});
//# sourceMappingURL=align.native.js.map