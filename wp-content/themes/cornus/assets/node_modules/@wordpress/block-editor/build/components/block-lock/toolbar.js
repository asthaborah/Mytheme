"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockLockToolbar;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _modal = _interopRequireDefault(require("./modal"));
var _useBlockLock = _interopRequireDefault(require("./use-block-lock"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function BlockLockToolbar({
  clientId
}) {
  const {
    canLock,
    isLocked
  } = (0, _useBlockLock.default)(clientId);
  const [isModalOpen, toggleModal] = (0, _element.useReducer)(isActive => !isActive, false);
  const hasLockButtonShown = (0, _element.useRef)(false);

  // If the block lock button has been shown, we don't want to remove it
  // from the toolbar until the toolbar is rendered again without it.
  // Removing it beforehand can cause focus loss issues, such as when
  // unlocking the block from the modal. It needs to return focus from
  // whence it came, and to do that, we need to leave the button in the toolbar.
  (0, _element.useEffect)(() => {
    if (isLocked) {
      hasLockButtonShown.current = true;
    }
  }, [isLocked]);
  if (!isLocked && !hasLockButtonShown.current) {
    return null;
  }
  let label = isLocked ? (0, _i18n.__)('Unlock') : (0, _i18n.__)('Lock');
  if (!canLock && isLocked) {
    label = (0, _i18n.__)('Locked');
  }
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.ToolbarGroup, {
    className: "block-editor-block-lock-toolbar"
  }, (0, _react.createElement)(_components.ToolbarButton, {
    accessibleWhenDisabled: true,
    disabled: !canLock,
    icon: isLocked ? _icons.lock : _icons.unlock,
    label: label,
    onClick: toggleModal,
    "aria-expanded": isModalOpen,
    "aria-haspopup": "dialog"
  })), isModalOpen && (0, _react.createElement)(_modal.default, {
    clientId: clientId,
    onClose: toggleModal
  }));
}
//# sourceMappingURL=toolbar.js.map