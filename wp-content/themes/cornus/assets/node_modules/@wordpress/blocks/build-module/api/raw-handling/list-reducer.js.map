{"version":3,"names":["unwrap","isList","node","nodeName","shallowTextContent","element","Array","from","childNodes","map","nodeValue","join","listReducer","list","prevElement","previousElementSibling","children","length","firstChild","appendChild","parentNode","removeChild","parentElement","test","parentListItem","prevListItem","parentList","insertBefore"],"sources":["@wordpress/blocks/src/api/raw-handling/list-reducer.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { unwrap } from '@wordpress/dom';\n\nfunction isList( node ) {\n\treturn node.nodeName === 'OL' || node.nodeName === 'UL';\n}\n\nfunction shallowTextContent( element ) {\n\treturn Array.from( element.childNodes )\n\t\t.map( ( { nodeValue = '' } ) => nodeValue )\n\t\t.join( '' );\n}\n\nexport default function listReducer( node ) {\n\tif ( ! isList( node ) ) {\n\t\treturn;\n\t}\n\n\tconst list = node;\n\tconst prevElement = node.previousElementSibling;\n\n\t// Merge with previous list if:\n\t// * There is a previous list of the same type.\n\t// * There is only one list item.\n\tif (\n\t\tprevElement &&\n\t\tprevElement.nodeName === node.nodeName &&\n\t\tlist.children.length === 1\n\t) {\n\t\t// Move all child nodes, including any text nodes, if any.\n\t\twhile ( list.firstChild ) {\n\t\t\tprevElement.appendChild( list.firstChild );\n\t\t}\n\n\t\tlist.parentNode.removeChild( list );\n\t}\n\n\tconst parentElement = node.parentNode;\n\n\t// Nested list with empty parent item.\n\tif (\n\t\tparentElement &&\n\t\tparentElement.nodeName === 'LI' &&\n\t\tparentElement.children.length === 1 &&\n\t\t! /\\S/.test( shallowTextContent( parentElement ) )\n\t) {\n\t\tconst parentListItem = parentElement;\n\t\tconst prevListItem = parentListItem.previousElementSibling;\n\t\tconst parentList = parentListItem.parentNode;\n\n\t\tif ( prevListItem ) {\n\t\t\tprevListItem.appendChild( list );\n\t\t\tparentList.removeChild( parentListItem );\n\t\t} else {\n\t\t\tparentList.parentNode.insertBefore( list, parentList );\n\t\t\tparentList.parentNode.removeChild( parentList );\n\t\t}\n\t}\n\n\t// Invalid: OL/UL > OL/UL.\n\tif ( parentElement && isList( parentElement ) ) {\n\t\tconst prevListItem = node.previousElementSibling;\n\n\t\tif ( prevListItem ) {\n\t\t\tprevListItem.appendChild( node );\n\t\t} else {\n\t\t\tunwrap( node );\n\t\t}\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,MAAMA,CAAEC,IAAI,EAAG;EACvB,OAAOA,IAAI,CAACC,QAAQ,KAAK,IAAI,IAAID,IAAI,CAACC,QAAQ,KAAK,IAAI;AACxD;AAEA,SAASC,kBAAkBA,CAAEC,OAAO,EAAG;EACtC,OAAOC,KAAK,CAACC,IAAI,CAAEF,OAAO,CAACG,UAAW,CAAC,CACrCC,GAAG,CAAE,CAAE;IAAEC,SAAS,GAAG;EAAG,CAAC,KAAMA,SAAU,CAAC,CAC1CC,IAAI,CAAE,EAAG,CAAC;AACb;AAEA,eAAe,SAASC,WAAWA,CAAEV,IAAI,EAAG;EAC3C,IAAK,CAAED,MAAM,CAAEC,IAAK,CAAC,EAAG;IACvB;EACD;EAEA,MAAMW,IAAI,GAAGX,IAAI;EACjB,MAAMY,WAAW,GAAGZ,IAAI,CAACa,sBAAsB;;EAE/C;EACA;EACA;EACA,IACCD,WAAW,IACXA,WAAW,CAACX,QAAQ,KAAKD,IAAI,CAACC,QAAQ,IACtCU,IAAI,CAACG,QAAQ,CAACC,MAAM,KAAK,CAAC,EACzB;IACD;IACA,OAAQJ,IAAI,CAACK,UAAU,EAAG;MACzBJ,WAAW,CAACK,WAAW,CAAEN,IAAI,CAACK,UAAW,CAAC;IAC3C;IAEAL,IAAI,CAACO,UAAU,CAACC,WAAW,CAAER,IAAK,CAAC;EACpC;EAEA,MAAMS,aAAa,GAAGpB,IAAI,CAACkB,UAAU;;EAErC;EACA,IACCE,aAAa,IACbA,aAAa,CAACnB,QAAQ,KAAK,IAAI,IAC/BmB,aAAa,CAACN,QAAQ,CAACC,MAAM,KAAK,CAAC,IACnC,CAAE,IAAI,CAACM,IAAI,CAAEnB,kBAAkB,CAAEkB,aAAc,CAAE,CAAC,EACjD;IACD,MAAME,cAAc,GAAGF,aAAa;IACpC,MAAMG,YAAY,GAAGD,cAAc,CAACT,sBAAsB;IAC1D,MAAMW,UAAU,GAAGF,cAAc,CAACJ,UAAU;IAE5C,IAAKK,YAAY,EAAG;MACnBA,YAAY,CAACN,WAAW,CAAEN,IAAK,CAAC;MAChCa,UAAU,CAACL,WAAW,CAAEG,cAAe,CAAC;IACzC,CAAC,MAAM;MACNE,UAAU,CAACN,UAAU,CAACO,YAAY,CAAEd,IAAI,EAAEa,UAAW,CAAC;MACtDA,UAAU,CAACN,UAAU,CAACC,WAAW,CAAEK,UAAW,CAAC;IAChD;EACD;;EAEA;EACA,IAAKJ,aAAa,IAAIrB,MAAM,CAAEqB,aAAc,CAAC,EAAG;IAC/C,MAAMG,YAAY,GAAGvB,IAAI,CAACa,sBAAsB;IAEhD,IAAKU,YAAY,EAAG;MACnBA,YAAY,CAACN,WAAW,CAAEjB,IAAK,CAAC;IACjC,CAAC,MAAM;MACNF,MAAM,CAAEE,IAAK,CAAC;IACf;EACD;AACD"}