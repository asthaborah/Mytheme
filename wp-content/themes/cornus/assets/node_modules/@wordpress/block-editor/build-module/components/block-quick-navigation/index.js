import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { Button, __experimentalVStack as VStack, __experimentalTruncate as Truncate, Flex, FlexBlock, FlexItem } from '@wordpress/components';
import { __experimentalGetBlockLabel, store as blocksStore } from '@wordpress/blocks';

/**
 * Internal dependencies
 */
import { store as blockEditorStore } from '../../store';
import BlockIcon from '../block-icon';
export default function BlockQuickNavigation({
  clientIds
}) {
  if (!clientIds.length) {
    return null;
  }
  return createElement(VStack, {
    spacing: 1
  }, clientIds.map(clientId => createElement(BlockQuickNavigationItem, {
    key: clientId,
    clientId: clientId
  })));
}
function BlockQuickNavigationItem({
  clientId
}) {
  const {
    name,
    icon,
    isSelected
  } = useSelect(select => {
    const {
      getBlockName,
      getBlockAttributes,
      isBlockSelected,
      hasSelectedInnerBlock
    } = select(blockEditorStore);
    const {
      getBlockType
    } = select(blocksStore);
    const blockType = getBlockType(getBlockName(clientId));
    const attributes = getBlockAttributes(clientId);
    return {
      name: blockType && __experimentalGetBlockLabel(blockType, attributes, 'list-view'),
      icon: blockType?.icon,
      isSelected: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, /* deep: */true)
    };
  }, [clientId]);
  const {
    selectBlock
  } = useDispatch(blockEditorStore);
  return createElement(Button, {
    isPressed: isSelected,
    onClick: () => selectBlock(clientId)
  }, createElement(Flex, null, createElement(FlexItem, null, createElement(BlockIcon, {
    icon: icon
  })), createElement(FlexBlock, {
    style: {
      textAlign: 'left'
    }
  }, createElement(Truncate, null, name))));
}
//# sourceMappingURL=index.js.map