"use client";
import {
  useCompositeGroup
} from "../__chunks/636A7WVS.js";
import "../__chunks/R2QZ3KXH.js";
import "../__chunks/3X3MDQGM.js";
import {
  useComboboxScopedContext
} from "../__chunks/W76OTZCC.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/combobox/combobox-group.ts
import { getPopupRole } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
var useComboboxGroup = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxScopedContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxRow must be wrapped in a ComboboxList or ComboboxPopover component"
    );
    const contentElement = store.useState("contentElement");
    const popupRole = getPopupRole(contentElement);
    if (popupRole === "grid") {
      props = __spreadValues({ role: "rowgroup" }, props);
    }
    props = useCompositeGroup(__spreadValues({ store }, props));
    return props;
  }
);
var ComboboxGroup = createComponent((props) => {
  const htmlProps = useComboboxGroup(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  ComboboxGroup.displayName = "ComboboxGroup";
}
export {
  ComboboxGroup,
  useComboboxGroup
};
