"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BlockGroupToolbar", {
  enumerable: true,
  get: function () {
    return _toolbar.default;
  }
});
exports.ConvertToGroupButton = ConvertToGroupButton;
Object.defineProperty(exports, "useConvertToGroupButtonProps", {
  enumerable: true,
  get: function () {
    return _useConvertToGroupButtonProps.default;
  }
});
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _store = require("../../store");
var _useConvertToGroupButtonProps = _interopRequireDefault(require("./use-convert-to-group-button-props"));
var _toolbar = _interopRequireDefault(require("./toolbar"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ConvertToGroupButton({
  clientIds,
  isGroupable,
  isUngroupable,
  onUngroup,
  blocksSelection,
  groupingBlockName,
  onClose = () => {}
}) {
  const {
    replaceBlocks
  } = (0, _data.useDispatch)(_store.store);
  const onConvertToGroup = () => {
    // Activate the `transform` on the Grouping Block which does the conversion.
    const newBlocks = (0, _blocks.switchToBlockType)(blocksSelection, groupingBlockName);
    if (newBlocks) {
      replaceBlocks(clientIds, newBlocks);
    }
  };
  const onConvertFromGroup = () => {
    let innerBlocks = blocksSelection[0].innerBlocks;
    if (!innerBlocks.length) {
      return;
    }
    if (onUngroup) {
      innerBlocks = onUngroup(blocksSelection[0].attributes, blocksSelection[0].innerBlocks);
    }
    replaceBlocks(clientIds, innerBlocks);
  };
  if (!isGroupable && !isUngroupable) {
    return null;
  }
  return (0, _react.createElement)(_react.Fragment, null, isGroupable && (0, _react.createElement)(_components.MenuItem, {
    onClick: () => {
      onConvertToGroup();
      onClose();
    }
  }, (0, _i18n._x)('Group', 'verb')), isUngroupable && (0, _react.createElement)(_components.MenuItem, {
    onClick: () => {
      onConvertFromGroup();
      onClose();
    }
  }, (0, _i18n._x)('Ungroup', 'Ungrouping blocks from within a grouping block back into individual blocks within the Editor ')));
}
//# sourceMappingURL=index.js.map