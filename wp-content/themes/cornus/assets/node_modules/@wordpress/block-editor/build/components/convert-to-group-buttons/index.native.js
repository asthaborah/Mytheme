"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useConvertToGroupButtonProps", {
  enumerable: true,
  get: function () {
    return _useConvertToGroupButtonProps.default;
  }
});
exports.useConvertToGroupButtons = useConvertToGroupButtons;
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _notices = require("@wordpress/notices");
var _store = require("../../store");
var _useConvertToGroupButtonProps = _interopRequireDefault(require("./use-convert-to-group-button-props"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useConvertToGroupButtons({
  clientIds,
  onUngroup,
  blocksSelection,
  groupingBlockName
}) {
  const {
    replaceBlocks
  } = (0, _data.useDispatch)(_store.store);
  const {
    createSuccessNotice
  } = (0, _data.useDispatch)(_notices.store);
  const onConvertToGroup = () => {
    // Activate the `transform` on the Grouping Block which does the conversion.
    const newBlocks = (0, _blocks.switchToBlockType)(blocksSelection, groupingBlockName);
    if (newBlocks) {
      replaceBlocks(clientIds, newBlocks);
    }
  };
  const onConvertFromGroup = () => {
    let innerBlocks = blocksSelection[0].innerBlocks;
    if (!innerBlocks.length) {
      return;
    }
    if (onUngroup) {
      innerBlocks = onUngroup(blocksSelection[0].attributes, blocksSelection[0].innerBlocks);
    }
    replaceBlocks(clientIds, innerBlocks);
  };
  return {
    group: {
      id: 'groupButtonOption',
      label: (0, _i18n._x)('Group', 'verb'),
      value: 'groupButtonOption',
      onSelect: () => {
        onConvertToGroup();
        createSuccessNotice(
        // translators: displayed right after the block is grouped
        (0, _i18n.__)('Block grouped'));
      }
    },
    ungroup: {
      id: 'ungroupButtonOption',
      label: (0, _i18n._x)('Ungroup', 'Ungrouping blocks from within a grouping block back into individual blocks within the Editor'),
      value: 'ungroupButtonOption',
      onSelect: () => {
        onConvertFromGroup();
        createSuccessNotice(
        // translators: displayed right after the block is ungrouped.
        (0, _i18n.__)('Block ungrouped'));
      }
    }
  };
}
//# sourceMappingURL=index.native.js.map