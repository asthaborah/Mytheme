"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _styleNative = _interopRequireDefault(require("./style.native.scss"));
var _blockSettings = require("../block-settings");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const LINK_DESTINATION_NONE = 'none';
const LINK_DESTINATION_MEDIA = 'media';
const LINK_DESTINATION_ATTACHMENT = 'attachment';
const LINK_DESTINATION_CUSTOM = 'custom';
function LinkDestination({
  children,
  isSelected,
  label,
  onPress,
  value,
  valueStyle
}) {
  const optionIcon = (0, _compose.usePreferredColorSchemeStyle)(_styleNative.default.optionIcon, _styleNative.default.optionIconDark);
  return (0, _react.createElement)(_components.BottomSheet.Cell, {
    icon: _icons.check,
    iconStyle: _reactNative.StyleSheet.flatten([optionIcon, !isSelected && _styleNative.default.unselectedOptionIcon]),
    label: label,
    leftAlign: true,
    onPress: onPress,
    value: value,
    valueStyle: valueStyle,
    separatorType: "leftMargin"
  }, children);
}
function ImageLinkDestinationsScreen(props) {
  const navigation = (0, _native.useNavigation)();
  const route = (0, _native.useRoute)();
  const {
    url = ''
  } = props;
  const {
    inputValue = url,
    imageUrl,
    attachmentPageUrl,
    linkDestination
  } = route.params || {};
  function goToLinkPicker() {
    navigation.navigate(_blockSettings.blockSettingsScreens.linkPicker, {
      inputValue: linkDestination === LINK_DESTINATION_CUSTOM ? inputValue : ''
    });
  }
  const setLinkDestination = newLinkDestination => () => {
    let newUrl;
    switch (newLinkDestination) {
      case LINK_DESTINATION_MEDIA:
        newUrl = imageUrl;
        break;
      case LINK_DESTINATION_ATTACHMENT:
        newUrl = attachmentPageUrl;
        break;
      default:
        newUrl = '';
        break;
    }
    navigation.navigate(_blockSettings.blockSettingsScreens.settings, {
      // The `inputValue` name is reused from LinkPicker, as it helps avoid
      // bugs from stale values remaining in the React Navigation route
      // parameters.
      inputValue: newUrl,
      // Clear link text value that may be set from LinkPicker.
      text: ''
    });
  };
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.BottomSheet.NavBar, null, (0, _react.createElement)(_components.BottomSheet.NavBar.BackButton, {
    onPress: navigation.goBack
  }), (0, _react.createElement)(_components.BottomSheet.NavBar.Heading, null, (0, _i18n.__)('Link To'))), (0, _react.createElement)(_components.PanelBody, null, (0, _react.createElement)(LinkDestination, {
    isSelected: linkDestination === LINK_DESTINATION_NONE,
    label: (0, _i18n.__)('None'),
    onPress: setLinkDestination(LINK_DESTINATION_NONE)
  }), (0, _react.createElement)(LinkDestination, {
    isSelected: linkDestination === LINK_DESTINATION_MEDIA,
    label: (0, _i18n.__)('Media File'),
    onPress: setLinkDestination(LINK_DESTINATION_MEDIA)
  }), !!attachmentPageUrl && (0, _react.createElement)(LinkDestination, {
    isSelected: linkDestination === LINK_DESTINATION_ATTACHMENT,
    label: (0, _i18n.__)('Attachment Page'),
    onPress: setLinkDestination(LINK_DESTINATION_ATTACHMENT)
  }), (0, _react.createElement)(LinkDestination, {
    isSelected: linkDestination === LINK_DESTINATION_CUSTOM,
    label: (0, _i18n.__)('Custom URL'),
    onPress: goToLinkPicker,
    value: linkDestination === LINK_DESTINATION_CUSTOM ? inputValue : '',
    valueStyle: linkDestination === LINK_DESTINATION_CUSTOM ? undefined : _styleNative.default.placeholderTextColor
  }, (0, _react.createElement)(_icons.Icon, {
    icon: _icons.chevronRight
  }))));
}
var _default = exports.default = ImageLinkDestinationsScreen;
//# sourceMappingURL=index.native.js.map