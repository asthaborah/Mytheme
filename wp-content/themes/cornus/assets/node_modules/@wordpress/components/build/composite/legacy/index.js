"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositeItem = exports.CompositeGroup = exports.Composite = void 0;
exports.useCompositeState = useCompositeState;
var _react = require("react");
var _element = require("@wordpress/element");
var Current = _interopRequireWildcard(require("../current"));
var _compose = require("@wordpress/compose");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Composite is a component that may contain navigable items represented by
 * CompositeItem. It's inspired by the WAI-ARIA Composite Role and implements
 * all the keyboard navigation mechanisms to ensure that there's only one
 * tab stop for the whole Composite element. This means that it can behave as
 * a roving tabindex or aria-activedescendant container.
 *
 * @see https://ariakit.org/components/composite
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function mapLegacyStatePropsToComponentProps(legacyProps) {
  // If a `state` prop is provided, we unpack that; otherwise,
  // the necessary props are provided directly in `legacyProps`.
  if (legacyProps.state) {
    const {
      state,
      ...rest
    } = legacyProps;
    const {
      store,
      ...props
    } = mapLegacyStatePropsToComponentProps(state);
    return {
      ...rest,
      ...props,
      store
    };
  }
  return legacyProps;
}
function proxyComposite(ProxiedComponent, propMap = {}) {
  const displayName = ProxiedComponent.displayName;
  const Component = legacyProps => {
    const {
      store,
      ...rest
    } = mapLegacyStatePropsToComponentProps(legacyProps);
    const props = rest;
    props.id = (0, _compose.useInstanceId)(store, props.baseId, props.id);
    Object.entries(propMap).forEach(([from, to]) => {
      if (props.hasOwnProperty(from)) {
        Object.assign(props, {
          [to]: props[from]
        });
        delete props[from];
      }
    });
    delete props.baseId;
    return (0, _react.createElement)(ProxiedComponent, {
      ...props,
      store: store
    });
  };
  Component.displayName = displayName;
  return Component;
}

// The old `CompositeGroup` used to behave more like the current
// `CompositeRow`, but this has been split into two different
// components. We handle that difference by checking on the
// provided role, and returning the appropriate component.
const unproxiedCompositeGroup = (0, _element.forwardRef)(({
  role,
  ...props
}, ref) => {
  const Component = role === 'row' ? Current.CompositeRow : Current.CompositeGroup;
  return (0, _react.createElement)(Component, {
    ref: ref,
    role: role,
    ...props
  });
});
unproxiedCompositeGroup.displayName = 'CompositeGroup';
const Composite = exports.Composite = proxyComposite(Current.Composite, {
  baseId: 'id'
});
const CompositeGroup = exports.CompositeGroup = proxyComposite(unproxiedCompositeGroup);
const CompositeItem = exports.CompositeItem = proxyComposite(Current.CompositeItem, {
  focusable: 'accessibleWhenDisabled'
});
function useCompositeState(legacyStateOptions = {}) {
  const {
    baseId,
    currentId: defaultActiveId,
    orientation,
    rtl = false,
    loop: focusLoop = false,
    wrap: focusWrap = false,
    shift: focusShift = false,
    // eslint-disable-next-line camelcase
    unstable_virtual: virtualFocus
  } = legacyStateOptions;
  return {
    baseId: (0, _compose.useInstanceId)(Composite, 'composite', baseId),
    store: Current.useCompositeStore({
      defaultActiveId,
      rtl,
      orientation,
      focusLoop,
      focusShift,
      focusWrap,
      virtualFocus
    })
  };
}
//# sourceMappingURL=index.js.map