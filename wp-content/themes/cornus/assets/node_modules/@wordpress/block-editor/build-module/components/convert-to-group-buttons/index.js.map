{"version":3,"names":["MenuItem","_x","switchToBlockType","useDispatch","store","blockEditorStore","useConvertToGroupButtonProps","BlockGroupToolbar","ConvertToGroupButton","clientIds","isGroupable","isUngroupable","onUngroup","blocksSelection","groupingBlockName","onClose","replaceBlocks","onConvertToGroup","newBlocks","onConvertFromGroup","innerBlocks","length","attributes","createElement","Fragment","onClick"],"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { _x } from '@wordpress/i18n';\nimport { switchToBlockType } from '@wordpress/blocks';\nimport { useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport useConvertToGroupButtonProps from './use-convert-to-group-button-props';\nimport BlockGroupToolbar from './toolbar';\n\nfunction ConvertToGroupButton( {\n\tclientIds,\n\tisGroupable,\n\tisUngroupable,\n\tonUngroup,\n\tblocksSelection,\n\tgroupingBlockName,\n\tonClose = () => {},\n} ) {\n\tconst { replaceBlocks } = useDispatch( blockEditorStore );\n\tconst onConvertToGroup = () => {\n\t\t// Activate the `transform` on the Grouping Block which does the conversion.\n\t\tconst newBlocks = switchToBlockType(\n\t\t\tblocksSelection,\n\t\t\tgroupingBlockName\n\t\t);\n\t\tif ( newBlocks ) {\n\t\t\treplaceBlocks( clientIds, newBlocks );\n\t\t}\n\t};\n\n\tconst onConvertFromGroup = () => {\n\t\tlet innerBlocks = blocksSelection[ 0 ].innerBlocks;\n\t\tif ( ! innerBlocks.length ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( onUngroup ) {\n\t\t\tinnerBlocks = onUngroup(\n\t\t\t\tblocksSelection[ 0 ].attributes,\n\t\t\t\tblocksSelection[ 0 ].innerBlocks\n\t\t\t);\n\t\t}\n\t\treplaceBlocks( clientIds, innerBlocks );\n\t};\n\n\tif ( ! isGroupable && ! isUngroupable ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{ isGroupable && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonConvertToGroup();\n\t\t\t\t\t\tonClose();\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t{ _x( 'Group', 'verb' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t\t{ isUngroupable && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonConvertFromGroup();\n\t\t\t\t\t\tonClose();\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t{ _x(\n\t\t\t\t\t\t'Ungroup',\n\t\t\t\t\t\t'Ungrouping blocks from within a grouping block back into individual blocks within the Editor '\n\t\t\t\t\t) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport {\n\tBlockGroupToolbar,\n\tConvertToGroupButton,\n\tuseConvertToGroupButtonProps,\n};\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,EAAE,QAAQ,iBAAiB;AACpC,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,WAAW,QAAQ,iBAAiB;;AAE7C;AACA;AACA;AACA,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,aAAa;AACvD,OAAOC,4BAA4B,MAAM,qCAAqC;AAC9E,OAAOC,iBAAiB,MAAM,WAAW;AAEzC,SAASC,oBAAoBA,CAAE;EAC9BC,SAAS;EACTC,WAAW;EACXC,aAAa;EACbC,SAAS;EACTC,eAAe;EACfC,iBAAiB;EACjBC,OAAO,GAAGA,CAAA,KAAM,CAAC;AAClB,CAAC,EAAG;EACH,MAAM;IAAEC;EAAc,CAAC,GAAGb,WAAW,CAAEE,gBAAiB,CAAC;EACzD,MAAMY,gBAAgB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,SAAS,GAAGhB,iBAAiB,CAClCW,eAAe,EACfC,iBACD,CAAC;IACD,IAAKI,SAAS,EAAG;MAChBF,aAAa,CAAEP,SAAS,EAAES,SAAU,CAAC;IACtC;EACD,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAChC,IAAIC,WAAW,GAAGP,eAAe,CAAE,CAAC,CAAE,CAACO,WAAW;IAClD,IAAK,CAAEA,WAAW,CAACC,MAAM,EAAG;MAC3B;IACD;IACA,IAAKT,SAAS,EAAG;MAChBQ,WAAW,GAAGR,SAAS,CACtBC,eAAe,CAAE,CAAC,CAAE,CAACS,UAAU,EAC/BT,eAAe,CAAE,CAAC,CAAE,CAACO,WACtB,CAAC;IACF;IACAJ,aAAa,CAAEP,SAAS,EAAEW,WAAY,CAAC;EACxC,CAAC;EAED,IAAK,CAAEV,WAAW,IAAI,CAAEC,aAAa,EAAG;IACvC,OAAO,IAAI;EACZ;EAEA,OACCY,aAAA,CAAAC,QAAA,QACGd,WAAW,IACZa,aAAA,CAACvB,QAAQ;IACRyB,OAAO,EAAGA,CAAA,KAAM;MACfR,gBAAgB,CAAC,CAAC;MAClBF,OAAO,CAAC,CAAC;IACV;EAAG,GAEDd,EAAE,CAAE,OAAO,EAAE,MAAO,CACb,CACV,EACCU,aAAa,IACdY,aAAA,CAACvB,QAAQ;IACRyB,OAAO,EAAGA,CAAA,KAAM;MACfN,kBAAkB,CAAC,CAAC;MACpBJ,OAAO,CAAC,CAAC;IACV;EAAG,GAEDd,EAAE,CACH,SAAS,EACT,+FACD,CACS,CAEV,CAAC;AAEL;AAEA,SACCM,iBAAiB,EACjBC,oBAAoB,EACpBF,4BAA4B"}