"use client";
import {
  useCollectionItem
} from "../__chunks/UH3I23HL.js";
import {
  TabScopedContextProvider,
  useTabProviderContext
} from "../__chunks/4B73HROV.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import {
  useDisclosureContent
} from "../__chunks/CLE7NTOY.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import {
  useFocusable
} from "../__chunks/KK7H3W2B.js";
import "../__chunks/SHA3WOPI.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import {
  useDisclosureStore
} from "../__chunks/SFCBA2JZ.js";
import "../__chunks/EKQEJRUF.js";
import {
  useId,
  useMergeRefs,
  useWrapElement
} from "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/tab/tab-panel.tsx
import { useCallback, useEffect, useRef, useState } from "react";
import { getAllTabbableIn } from "@ariakit/core/utils/focus";
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useTabPanel = createHook(
  (_a) => {
    var _b = _a, { store, tabId: tabIdProp, getItem: getItemProp } = _b, props = __objRest(_b, ["store", "tabId", "getItem"]);
    const context = useTabProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "TabPanel must receive a `store` prop or be wrapped in a TabProvider component."
    );
    const ref = useRef(null);
    const id = useId(props.id);
    const [hasTabbableChildren, setHasTabbableChildren] = useState(false);
    useEffect(() => {
      const element = ref.current;
      if (!element)
        return;
      const tabbable = getAllTabbableIn(element);
      setHasTabbableChildren(!!tabbable.length);
    }, []);
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { id: id || item.id, tabId: tabIdProp });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, tabIdProp, getItemProp]
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TabScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const tabId = store.panels.useState(
      () => {
        var _a2;
        return tabIdProp || ((_a2 = store == null ? void 0 : store.panels.item(id)) == null ? void 0 : _a2.tabId);
      }
    );
    const open = store.useState(
      (state) => !!tabId && state.selectedId === tabId
    );
    props = __spreadProps(__spreadValues({
      id,
      role: "tabpanel",
      "aria-labelledby": tabId || void 0
    }, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    const disclosure = useDisclosureStore({ open });
    props = useFocusable(__spreadValues({ focusable: !hasTabbableChildren }, props));
    props = useDisclosureContent(__spreadValues({ store: disclosure }, props));
    props = useCollectionItem(__spreadProps(__spreadValues({ store: store.panels }, props), { getItem }));
    return props;
  }
);
var TabPanel = createComponent((props) => {
  const htmlProps = useTabPanel(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  TabPanel.displayName = "TabPanel";
}
export {
  TabPanel,
  useTabPanel
};
