"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrivateBlockToolbar = PrivateBlockToolbar;
exports.default = BlockToolbar;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _blockMover = _interopRequireDefault(require("../block-mover"));
var _blockParentSelector = _interopRequireDefault(require("../block-parent-selector"));
var _blockSwitcher = _interopRequireDefault(require("../block-switcher"));
var _blockControls = _interopRequireDefault(require("../block-controls"));
var _blockToolbarLastItem = _interopRequireDefault(require("./block-toolbar-last-item"));
var _blockSettingsMenu = _interopRequireDefault(require("../block-settings-menu"));
var _blockLock = require("../block-lock");
var _convertToGroupButtons = require("../convert-to-group-buttons");
var _blockEditVisuallyButton = _interopRequireDefault(require("../block-edit-visually-button"));
var _utils = require("./utils");
var _store = require("../../store");
var _blockNameContext = _interopRequireDefault(require("./block-name-context"));
var _navigableToolbar = _interopRequireDefault(require("../navigable-toolbar"));
var _shuffle = _interopRequireDefault(require("./shuffle"));
var _blockBindingsToolbarIndicator = _interopRequireDefault(require("../block-bindings-toolbar-indicator"));
var _useHasBlockToolbar = require("./use-has-block-toolbar");
var _useBindingsAttributes = require("../../hooks/use-bindings-attributes");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Renders the block toolbar.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-toolbar/README.md
 *
 * @param {Object}   props                             Components props.
 * @param {boolean}  props.hideDragHandle              Show or hide the Drag Handle for drag and drop functionality.
 * @param {boolean}  props.focusOnMount                Focus the toolbar when mounted.
 * @param {number}   props.__experimentalInitialIndex  The initial index of the toolbar item to focus.
 * @param {Function} props.__experimentalOnIndexChange Callback function to be called when the index of the focused toolbar item changes.
 * @param {string}   props.variant                     Style variant of the toolbar, also passed to the Dropdowns rendered from Block Toolbar Buttons.
 */
function PrivateBlockToolbar({
  hideDragHandle,
  focusOnMount,
  __experimentalInitialIndex,
  __experimentalOnIndexChange,
  variant = 'unstyled'
}) {
  const {
    blockClientId,
    blockClientIds,
    isDefaultEditingMode,
    blockType,
    blockName,
    shouldShowVisualToolbar,
    showParentSelector,
    isUsingBindings
  } = (0, _data.useSelect)(select => {
    const {
      getBlockName,
      getBlockMode,
      getBlockParents,
      getSelectedBlockClientIds,
      isBlockValid,
      getBlockRootClientId,
      getBlockEditingMode,
      getBlockAttributes
    } = select(_store.store);
    const selectedBlockClientIds = getSelectedBlockClientIds();
    const selectedBlockClientId = selectedBlockClientIds[0];
    const blockRootClientId = getBlockRootClientId(selectedBlockClientId);
    const parents = getBlockParents(selectedBlockClientId);
    const firstParentClientId = parents[parents.length - 1];
    const parentBlockName = getBlockName(firstParentClientId);
    const parentBlockType = (0, _blocks.getBlockType)(parentBlockName);
    const _isDefaultEditingMode = getBlockEditingMode(selectedBlockClientId) === 'default';
    const _blockName = getBlockName(selectedBlockClientId);
    const isValid = selectedBlockClientIds.every(id => isBlockValid(id));
    const isVisual = selectedBlockClientIds.every(id => getBlockMode(id) === 'visual');
    const _isUsingBindings = !!getBlockAttributes(selectedBlockClientId)?.metadata?.bindings;
    return {
      blockClientId: selectedBlockClientId,
      blockClientIds: selectedBlockClientIds,
      isDefaultEditingMode: _isDefaultEditingMode,
      blockName: _blockName,
      blockType: selectedBlockClientId && (0, _blocks.getBlockType)(_blockName),
      shouldShowVisualToolbar: isValid && isVisual,
      rootClientId: blockRootClientId,
      showParentSelector: parentBlockType && getBlockEditingMode(firstParentClientId) === 'default' && (0, _blocks.hasBlockSupport)(parentBlockType, '__experimentalParentSelector', true) && selectedBlockClientIds.length === 1 && _isDefaultEditingMode,
      isUsingBindings: _isUsingBindings
    };
  }, []);
  const toolbarWrapperRef = (0, _element.useRef)(null);

  // Handles highlighting the current block outline on hover or focus of the
  // block type toolbar area.
  const nodeRef = (0, _element.useRef)();
  const showHoveredOrFocusedGestures = (0, _utils.useShowHoveredOrFocusedGestures)({
    ref: nodeRef
  });
  const isLargeViewport = !(0, _compose.useViewportMatch)('medium', '<');
  const hasBlockToolbar = (0, _useHasBlockToolbar.useHasBlockToolbar)();
  if (!hasBlockToolbar) {
    return null;
  }
  const isMultiToolbar = blockClientIds.length > 1;
  const isSynced = (0, _blocks.isReusableBlock)(blockType) || (0, _blocks.isTemplatePart)(blockType);

  // Shifts the toolbar to make room for the parent block selector.
  const classes = (0, _classnames.default)('block-editor-block-contextual-toolbar', {
    'has-parent': showParentSelector
  });
  const innerClasses = (0, _classnames.default)('block-editor-block-toolbar', {
    'is-synced': isSynced
  });
  return (0, _react.createElement)(_navigableToolbar.default, {
    focusEditorOnEscape: true,
    className: classes
    /* translators: accessibility text for the block toolbar */,
    "aria-label": (0, _i18n.__)('Block tools')
    // The variant is applied as "toolbar" when undefined, which is the black border style of the dropdown from the toolbar popover.
    ,
    variant: variant === 'toolbar' ? undefined : variant,
    focusOnMount: focusOnMount,
    __experimentalInitialIndex: __experimentalInitialIndex,
    __experimentalOnIndexChange: __experimentalOnIndexChange
    // Resets the index whenever the active block changes so
    // this is not persisted. See https://github.com/WordPress/gutenberg/pull/25760#issuecomment-717906169
    ,
    key: blockClientId
  }, (0, _react.createElement)("div", {
    ref: toolbarWrapperRef,
    className: innerClasses
  }, !isMultiToolbar && isLargeViewport && isDefaultEditingMode && (0, _react.createElement)(_blockParentSelector.default, null), isUsingBindings && (0, _useBindingsAttributes.canBindBlock)(blockName) && (0, _react.createElement)(_blockBindingsToolbarIndicator.default, null), (shouldShowVisualToolbar || isMultiToolbar) && isDefaultEditingMode && (0, _react.createElement)("div", {
    ref: nodeRef,
    ...showHoveredOrFocusedGestures
  }, (0, _react.createElement)(_components.ToolbarGroup, {
    className: "block-editor-block-toolbar__block-controls"
  }, (0, _react.createElement)(_blockSwitcher.default, {
    clientIds: blockClientIds
  }), !isMultiToolbar && (0, _react.createElement)(_blockLock.BlockLockToolbar, {
    clientId: blockClientId
  }), (0, _react.createElement)(_blockMover.default, {
    clientIds: blockClientIds,
    hideDragHandle: hideDragHandle
  }))), (0, _react.createElement)(_shuffle.default, {
    clientId: blockClientId
  }), shouldShowVisualToolbar && isMultiToolbar && (0, _react.createElement)(_convertToGroupButtons.BlockGroupToolbar, null), shouldShowVisualToolbar && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_blockControls.default.Slot, {
    group: "parent",
    className: "block-editor-block-toolbar__slot"
  }), (0, _react.createElement)(_blockControls.default.Slot, {
    group: "block",
    className: "block-editor-block-toolbar__slot"
  }), (0, _react.createElement)(_blockControls.default.Slot, {
    className: "block-editor-block-toolbar__slot"
  }), (0, _react.createElement)(_blockControls.default.Slot, {
    group: "inline",
    className: "block-editor-block-toolbar__slot"
  }), (0, _react.createElement)(_blockControls.default.Slot, {
    group: "other",
    className: "block-editor-block-toolbar__slot"
  }), (0, _react.createElement)(_blockNameContext.default.Provider, {
    value: blockType?.name
  }, (0, _react.createElement)(_blockToolbarLastItem.default.Slot, null))), (0, _react.createElement)(_blockEditVisuallyButton.default, {
    clientIds: blockClientIds
  }), isDefaultEditingMode && (0, _react.createElement)(_blockSettingsMenu.default, {
    clientIds: blockClientIds
  })));
}

/**
 * Renders the block toolbar.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-toolbar/README.md
 *
 * @param {Object}  props                Components props.
 * @param {boolean} props.hideDragHandle Show or hide the Drag Handle for drag and drop functionality.
 * @param {string}  props.variant        Style variant of the toolbar, also passed to the Dropdowns rendered from Block Toolbar Buttons.
 */
function BlockToolbar({
  hideDragHandle,
  variant
}) {
  return (0, _react.createElement)(PrivateBlockToolbar, {
    hideDragHandle: hideDragHandle,
    variant: variant,
    focusOnMount: undefined,
    __experimentalInitialIndex: undefined,
    __experimentalOnIndexChange: undefined
  });
}
//# sourceMappingURL=index.js.map