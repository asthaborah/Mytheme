{"version":3,"names":["_blockSerializationDefaultParser","require","_autop","_registration","_serializer","_validation","_factory","_convertLegacyBlock","_serializeRawBlock","_getBlockAttributes","_applyBlockDeprecatedVersions","_applyBuiltInValidationFixes","convertLegacyBlocks","rawBlock","correctName","correctedAttributes","convertLegacyBlockNameAndAttributes","blockName","attrs","normalizeRawBlock","options","fallbackBlockName","getFreeformContentHandlerName","rawBlockName","rawAttributes","rawInnerBlocks","innerBlocks","rawInnerHTML","innerHTML","trim","__unstableSkipAutop","autop","createMissingBlockType","unregisteredFallbackBlock","getUnregisteredTypeHandlerName","originalUndelimitedContent","serializeRawBlock","isCommentDelimited","originalContent","originalName","innerContent","applyBlockValidation","unvalidatedBlock","blockType","isValid","validateBlock","validationIssues","fixedBlock","applyBuiltInValidationFixes","isFixedValid","parseRawBlock","normalizedBlock","getBlockType","isFallbackBlock","parsedInnerBlocks","map","innerBlock","filter","parsedBlock","createBlock","getBlockAttributes","validatedBlock","updatedBlock","applyBlockDeprecatedVersions","__unstableBlockSource","__unstableSkipMigrationLogs","console","groupCollapsed","name","info","getSaveContent","attributes","groupEnd","forEach","log","args","parse","content","grammarParse","reduce","accumulator","block","push"],"sources":["@wordpress/blocks/src/api/parser/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { parse as grammarParse } from '@wordpress/block-serialization-default-parser';\nimport { autop } from '@wordpress/autop';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n\tgetBlockType,\n} from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { validateBlock } from '../validation';\nimport { createBlock } from '../factory';\nimport { convertLegacyBlockNameAndAttributes } from './convert-legacy-block';\nimport { serializeRawBlock } from './serialize-raw-block';\nimport { getBlockAttributes } from './get-block-attributes';\nimport { applyBlockDeprecatedVersions } from './apply-block-deprecated-versions';\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\n\n/**\n * The raw structure of a block includes its attributes, inner\n * blocks, and inner HTML. It is important to distinguish inner blocks from\n * the HTML content of the block as only the latter is relevant for block\n * validation and edit operations.\n *\n * @typedef WPRawBlock\n *\n * @property {string=}         blockName    Block name\n * @property {Object=}         attrs        Block raw or comment attributes.\n * @property {string}          innerHTML    HTML content of the block.\n * @property {(string|null)[]} innerContent Content without inner blocks.\n * @property {WPRawBlock[]}    innerBlocks  Inner Blocks.\n */\n\n/**\n * Fully parsed block object.\n *\n * @typedef WPBlock\n *\n * @property {string}     name                    Block name\n * @property {Object}     attributes              Block raw or comment attributes.\n * @property {WPBlock[]}  innerBlocks             Inner Blocks.\n * @property {string}     originalContent         Original content of the block before validation fixes.\n * @property {boolean}    isValid                 Whether the block is valid.\n * @property {Object[]}   validationIssues        Validation issues.\n * @property {WPRawBlock} [__unstableBlockSource] Un-processed original copy of block if created through parser.\n */\n\n/**\n * @typedef  {Object}  ParseOptions\n * @property {boolean?} __unstableSkipMigrationLogs If a block is migrated from a deprecated version, skip logging the migration details.\n * @property {boolean?} __unstableSkipAutop         Whether to skip autop when processing freeform content.\n */\n\n/**\n * Convert legacy blocks to their canonical form. This function is used\n * both in the parser level for previous content and to convert such blocks\n * used in Custom Post Types templates.\n *\n * @param {WPRawBlock} rawBlock\n *\n * @return {WPRawBlock} The block's name and attributes, changed accordingly if a match was found\n */\nfunction convertLegacyBlocks( rawBlock ) {\n\tconst [ correctName, correctedAttributes ] =\n\t\tconvertLegacyBlockNameAndAttributes(\n\t\t\trawBlock.blockName,\n\t\t\trawBlock.attrs\n\t\t);\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: correctName,\n\t\tattrs: correctedAttributes,\n\t};\n}\n\n/**\n * Normalize the raw block by applying the fallback block name if none given,\n * sanitize the parsed HTML...\n *\n * @param {WPRawBlock}    rawBlock The raw block object.\n * @param {ParseOptions?} options  Extra options for handling block parsing.\n *\n * @return {WPRawBlock} The normalized block object.\n */\nexport function normalizeRawBlock( rawBlock, options ) {\n\tconst fallbackBlockName = getFreeformContentHandlerName();\n\n\t// If the grammar parsing don't produce any block name, use the freeform block.\n\tconst rawBlockName = rawBlock.blockName || getFreeformContentHandlerName();\n\tconst rawAttributes = rawBlock.attrs || {};\n\tconst rawInnerBlocks = rawBlock.innerBlocks || [];\n\tlet rawInnerHTML = rawBlock.innerHTML.trim();\n\n\t// Fallback content may be upgraded from classic content expecting implicit\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\n\t// meaning there are no negative consequences to repeated autop calls.\n\tif (\n\t\trawBlockName === fallbackBlockName &&\n\t\trawBlockName === 'core/freeform' &&\n\t\t! options?.__unstableSkipAutop\n\t) {\n\t\trawInnerHTML = autop( rawInnerHTML ).trim();\n\t}\n\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: rawBlockName,\n\t\tattrs: rawAttributes,\n\t\tinnerHTML: rawInnerHTML,\n\t\tinnerBlocks: rawInnerBlocks,\n\t};\n}\n\n/**\n * Uses the \"unregistered blockType\" to create a block object.\n *\n * @param {WPRawBlock} rawBlock block.\n *\n * @return {WPRawBlock} The unregistered block object.\n */\nfunction createMissingBlockType( rawBlock ) {\n\tconst unregisteredFallbackBlock =\n\t\tgetUnregisteredTypeHandlerName() || getFreeformContentHandlerName();\n\n\t// Preserve undelimited content for use by the unregistered type\n\t// handler. A block node's `innerHTML` isn't enough, as that field only\n\t// carries the block's own HTML and not its nested blocks.\n\tconst originalUndelimitedContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: false,\n\t} );\n\n\t// Preserve full block content for use by the unregistered type\n\t// handler, block boundaries included.\n\tconst originalContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: true,\n\t} );\n\n\treturn {\n\t\tblockName: unregisteredFallbackBlock,\n\t\tattrs: {\n\t\t\toriginalName: rawBlock.blockName,\n\t\t\toriginalContent,\n\t\t\toriginalUndelimitedContent,\n\t\t},\n\t\tinnerHTML: rawBlock.blockName ? originalContent : rawBlock.innerHTML,\n\t\tinnerBlocks: rawBlock.innerBlocks,\n\t\tinnerContent: rawBlock.innerContent,\n\t};\n}\n\n/**\n * Validates a block and wraps with validation meta.\n *\n * The name here is regrettable but `validateBlock` is already taken.\n *\n * @param {WPBlock}                               unvalidatedBlock\n * @param {import('../registration').WPBlockType} blockType\n * @return {WPBlock}                              validated block, with auto-fixes if initially invalid\n */\nfunction applyBlockValidation( unvalidatedBlock, blockType ) {\n\t// Attempt to validate the block.\n\tconst [ isValid ] = validateBlock( unvalidatedBlock, blockType );\n\n\tif ( isValid ) {\n\t\treturn { ...unvalidatedBlock, isValid, validationIssues: [] };\n\t}\n\n\t// If the block is invalid, attempt some built-in fixes\n\t// like custom classNames handling.\n\tconst fixedBlock = applyBuiltInValidationFixes(\n\t\tunvalidatedBlock,\n\t\tblockType\n\t);\n\t// Attempt to validate the block once again after the built-in fixes.\n\tconst [ isFixedValid, validationIssues ] = validateBlock(\n\t\tunvalidatedBlock,\n\t\tblockType\n\t);\n\n\treturn { ...fixedBlock, isValid: isFixedValid, validationIssues };\n}\n\n/**\n * Given a raw block returned by grammar parsing, returns a fully parsed block.\n *\n * @param {WPRawBlock}   rawBlock The raw block object.\n * @param {ParseOptions} options  Extra options for handling block parsing.\n *\n * @return {WPBlock | undefined} Fully parsed block.\n */\nexport function parseRawBlock( rawBlock, options ) {\n\tlet normalizedBlock = normalizeRawBlock( rawBlock, options );\n\n\t// During the lifecycle of the project, we renamed some old blocks\n\t// and transformed others to new blocks. To avoid breaking existing content,\n\t// we added this function to properly parse the old content.\n\tnormalizedBlock = convertLegacyBlocks( normalizedBlock );\n\n\t// Try finding the type for known block name.\n\tlet blockType = getBlockType( normalizedBlock.blockName );\n\n\t// If not blockType is found for the specified name, fallback to the \"unregistedBlockType\".\n\tif ( ! blockType ) {\n\t\tnormalizedBlock = createMissingBlockType( normalizedBlock );\n\t\tblockType = getBlockType( normalizedBlock.blockName );\n\t}\n\n\t// If it's an empty freeform block or there's no blockType (no missing block handler)\n\t// Then, just ignore the block.\n\t// It might be a good idea to throw a warning here.\n\t// TODO: I'm unsure about the unregisteredFallbackBlock check,\n\t// it might ignore some dynamic unregistered third party blocks wrongly.\n\tconst isFallbackBlock =\n\t\tnormalizedBlock.blockName === getFreeformContentHandlerName() ||\n\t\tnormalizedBlock.blockName === getUnregisteredTypeHandlerName();\n\tif ( ! blockType || ( ! normalizedBlock.innerHTML && isFallbackBlock ) ) {\n\t\treturn;\n\t}\n\n\t// Parse inner blocks recursively.\n\tconst parsedInnerBlocks = normalizedBlock.innerBlocks\n\t\t.map( ( innerBlock ) => parseRawBlock( innerBlock, options ) )\n\t\t// See https://github.com/WordPress/gutenberg/pull/17164.\n\t\t.filter( ( innerBlock ) => !! innerBlock );\n\n\t// Get the fully parsed block.\n\tconst parsedBlock = createBlock(\n\t\tnormalizedBlock.blockName,\n\t\tgetBlockAttributes(\n\t\t\tblockType,\n\t\t\tnormalizedBlock.innerHTML,\n\t\t\tnormalizedBlock.attrs\n\t\t),\n\t\tparsedInnerBlocks\n\t);\n\tparsedBlock.originalContent = normalizedBlock.innerHTML;\n\n\tconst validatedBlock = applyBlockValidation( parsedBlock, blockType );\n\tconst { validationIssues } = validatedBlock;\n\n\t// Run the block deprecation and migrations.\n\t// This is performed on both invalid and valid blocks because\n\t// migration using the `migrate` functions should run even\n\t// if the output is deemed valid.\n\tconst updatedBlock = applyBlockDeprecatedVersions(\n\t\tvalidatedBlock,\n\t\tnormalizedBlock,\n\t\tblockType\n\t);\n\n\tif ( ! updatedBlock.isValid ) {\n\t\t// Preserve the original unprocessed version of the block\n\t\t// that we received (no fixes, no deprecations) so that\n\t\t// we can save it as close to exactly the same way as\n\t\t// we loaded it. This is important to avoid corruption\n\t\t// and data loss caused by block implementations trying\n\t\t// to process data that isn't fully recognized.\n\t\tupdatedBlock.__unstableBlockSource = rawBlock;\n\t}\n\n\tif (\n\t\t! validatedBlock.isValid &&\n\t\tupdatedBlock.isValid &&\n\t\t! options?.__unstableSkipMigrationLogs\n\t) {\n\t\t/* eslint-disable no-console */\n\t\tconsole.groupCollapsed( 'Updated Block: %s', blockType.name );\n\t\tconsole.info(\n\t\t\t'Block successfully updated for `%s` (%o).\\n\\nNew content generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\n\t\t\tblockType.name,\n\t\t\tblockType,\n\t\t\tgetSaveContent( blockType, updatedBlock.attributes ),\n\t\t\tupdatedBlock.originalContent\n\t\t);\n\t\tconsole.groupEnd();\n\t\t/* eslint-enable no-console */\n\t} else if ( ! validatedBlock.isValid && ! updatedBlock.isValid ) {\n\t\tvalidationIssues.forEach( ( { log, args } ) => log( ...args ) );\n\t}\n\n\treturn updatedBlock;\n}\n\n/**\n * Utilizes an optimized token-driven parser based on the Gutenberg grammar spec\n * defined through a parsing expression grammar to take advantage of the regular\n * cadence provided by block delimiters -- composed syntactically through HTML\n * comments -- which, given a general HTML document as an input, returns a block\n * list array representation.\n *\n * This is a recursive-descent parser that scans linearly once through the input\n * document. Instead of directly recursing it utilizes a trampoline mechanism to\n * prevent stack overflow. This initial pass is mainly interested in separating\n * and isolating the blocks serialized in the document and manifestly not in the\n * content within the blocks.\n *\n * @see\n * https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\n *\n * @param {string}       content The post content.\n * @param {ParseOptions} options Extra options for handling block parsing.\n *\n * @return {Array} Block list.\n */\nexport default function parse( content, options ) {\n\treturn grammarParse( content ).reduce( ( accumulator, rawBlock ) => {\n\t\tconst block = parseRawBlock( rawBlock, options );\n\t\tif ( block ) {\n\t\t\taccumulator.push( block );\n\t\t}\n\t\treturn accumulator;\n\t}, [] );\n}\n"],"mappings":";;;;;;;;AAGA,IAAAA,gCAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAKA,IAAAE,aAAA,GAAAF,OAAA;AAKA,IAAAG,WAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AACA,IAAAM,mBAAA,GAAAN,OAAA;AACA,IAAAO,kBAAA,GAAAP,OAAA;AACA,IAAAQ,mBAAA,GAAAR,OAAA;AACA,IAAAS,6BAAA,GAAAT,OAAA;AACA,IAAAU,4BAAA,GAAAV,OAAA;AArBA;AACA;AACA;;AAIA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,mBAAmBA,CAAEC,QAAQ,EAAG;EACxC,MAAM,CAAEC,WAAW,EAAEC,mBAAmB,CAAE,GACzC,IAAAC,uDAAmC,EAClCH,QAAQ,CAACI,SAAS,EAClBJ,QAAQ,CAACK,KACV,CAAC;EACF,OAAO;IACN,GAAGL,QAAQ;IACXI,SAAS,EAAEH,WAAW;IACtBI,KAAK,EAAEH;EACR,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,iBAAiBA,CAAEN,QAAQ,EAAEO,OAAO,EAAG;EACtD,MAAMC,iBAAiB,GAAG,IAAAC,2CAA6B,EAAC,CAAC;;EAEzD;EACA,MAAMC,YAAY,GAAGV,QAAQ,CAACI,SAAS,IAAI,IAAAK,2CAA6B,EAAC,CAAC;EAC1E,MAAME,aAAa,GAAGX,QAAQ,CAACK,KAAK,IAAI,CAAC,CAAC;EAC1C,MAAMO,cAAc,GAAGZ,QAAQ,CAACa,WAAW,IAAI,EAAE;EACjD,IAAIC,YAAY,GAAGd,QAAQ,CAACe,SAAS,CAACC,IAAI,CAAC,CAAC;;EAE5C;EACA;EACA;EACA,IACCN,YAAY,KAAKF,iBAAiB,IAClCE,YAAY,KAAK,eAAe,IAChC,CAAEH,OAAO,EAAEU,mBAAmB,EAC7B;IACDH,YAAY,GAAG,IAAAI,YAAK,EAAEJ,YAAa,CAAC,CAACE,IAAI,CAAC,CAAC;EAC5C;EAEA,OAAO;IACN,GAAGhB,QAAQ;IACXI,SAAS,EAAEM,YAAY;IACvBL,KAAK,EAAEM,aAAa;IACpBI,SAAS,EAAED,YAAY;IACvBD,WAAW,EAAED;EACd,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,sBAAsBA,CAAEnB,QAAQ,EAAG;EAC3C,MAAMoB,yBAAyB,GAC9B,IAAAC,4CAA8B,EAAC,CAAC,IAAI,IAAAZ,2CAA6B,EAAC,CAAC;;EAEpE;EACA;EACA;EACA,MAAMa,0BAA0B,GAAG,IAAAC,oCAAiB,EAAEvB,QAAQ,EAAE;IAC/DwB,kBAAkB,EAAE;EACrB,CAAE,CAAC;;EAEH;EACA;EACA,MAAMC,eAAe,GAAG,IAAAF,oCAAiB,EAAEvB,QAAQ,EAAE;IACpDwB,kBAAkB,EAAE;EACrB,CAAE,CAAC;EAEH,OAAO;IACNpB,SAAS,EAAEgB,yBAAyB;IACpCf,KAAK,EAAE;MACNqB,YAAY,EAAE1B,QAAQ,CAACI,SAAS;MAChCqB,eAAe;MACfH;IACD,CAAC;IACDP,SAAS,EAAEf,QAAQ,CAACI,SAAS,GAAGqB,eAAe,GAAGzB,QAAQ,CAACe,SAAS;IACpEF,WAAW,EAAEb,QAAQ,CAACa,WAAW;IACjCc,YAAY,EAAE3B,QAAQ,CAAC2B;EACxB,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAEC,gBAAgB,EAAEC,SAAS,EAAG;EAC5D;EACA,MAAM,CAAEC,OAAO,CAAE,GAAG,IAAAC,yBAAa,EAAEH,gBAAgB,EAAEC,SAAU,CAAC;EAEhE,IAAKC,OAAO,EAAG;IACd,OAAO;MAAE,GAAGF,gBAAgB;MAAEE,OAAO;MAAEE,gBAAgB,EAAE;IAAG,CAAC;EAC9D;;EAEA;EACA;EACA,MAAMC,UAAU,GAAG,IAAAC,wDAA2B,EAC7CN,gBAAgB,EAChBC,SACD,CAAC;EACD;EACA,MAAM,CAAEM,YAAY,EAAEH,gBAAgB,CAAE,GAAG,IAAAD,yBAAa,EACvDH,gBAAgB,EAChBC,SACD,CAAC;EAED,OAAO;IAAE,GAAGI,UAAU;IAAEH,OAAO,EAAEK,YAAY;IAAEH;EAAiB,CAAC;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,aAAaA,CAAErC,QAAQ,EAAEO,OAAO,EAAG;EAClD,IAAI+B,eAAe,GAAGhC,iBAAiB,CAAEN,QAAQ,EAAEO,OAAQ,CAAC;;EAE5D;EACA;EACA;EACA+B,eAAe,GAAGvC,mBAAmB,CAAEuC,eAAgB,CAAC;;EAExD;EACA,IAAIR,SAAS,GAAG,IAAAS,0BAAY,EAAED,eAAe,CAAClC,SAAU,CAAC;;EAEzD;EACA,IAAK,CAAE0B,SAAS,EAAG;IAClBQ,eAAe,GAAGnB,sBAAsB,CAAEmB,eAAgB,CAAC;IAC3DR,SAAS,GAAG,IAAAS,0BAAY,EAAED,eAAe,CAAClC,SAAU,CAAC;EACtD;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMoC,eAAe,GACpBF,eAAe,CAAClC,SAAS,KAAK,IAAAK,2CAA6B,EAAC,CAAC,IAC7D6B,eAAe,CAAClC,SAAS,KAAK,IAAAiB,4CAA8B,EAAC,CAAC;EAC/D,IAAK,CAAES,SAAS,IAAM,CAAEQ,eAAe,CAACvB,SAAS,IAAIyB,eAAiB,EAAG;IACxE;EACD;;EAEA;EACA,MAAMC,iBAAiB,GAAGH,eAAe,CAACzB,WAAW,CACnD6B,GAAG,CAAIC,UAAU,IAAMN,aAAa,CAAEM,UAAU,EAAEpC,OAAQ,CAAE;EAC7D;EAAA,CACCqC,MAAM,CAAID,UAAU,IAAM,CAAC,CAAEA,UAAW,CAAC;;EAE3C;EACA,MAAME,WAAW,GAAG,IAAAC,oBAAW,EAC9BR,eAAe,CAAClC,SAAS,EACzB,IAAA2C,sCAAkB,EACjBjB,SAAS,EACTQ,eAAe,CAACvB,SAAS,EACzBuB,eAAe,CAACjC,KACjB,CAAC,EACDoC,iBACD,CAAC;EACDI,WAAW,CAACpB,eAAe,GAAGa,eAAe,CAACvB,SAAS;EAEvD,MAAMiC,cAAc,GAAGpB,oBAAoB,CAAEiB,WAAW,EAAEf,SAAU,CAAC;EACrE,MAAM;IAAEG;EAAiB,CAAC,GAAGe,cAAc;;EAE3C;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAG,IAAAC,0DAA4B,EAChDF,cAAc,EACdV,eAAe,EACfR,SACD,CAAC;EAED,IAAK,CAAEmB,YAAY,CAAClB,OAAO,EAAG;IAC7B;IACA;IACA;IACA;IACA;IACA;IACAkB,YAAY,CAACE,qBAAqB,GAAGnD,QAAQ;EAC9C;EAEA,IACC,CAAEgD,cAAc,CAACjB,OAAO,IACxBkB,YAAY,CAAClB,OAAO,IACpB,CAAExB,OAAO,EAAE6C,2BAA2B,EACrC;IACD;IACAC,OAAO,CAACC,cAAc,CAAE,mBAAmB,EAAExB,SAAS,CAACyB,IAAK,CAAC;IAC7DF,OAAO,CAACG,IAAI,CACX,yIAAyI,EACzI1B,SAAS,CAACyB,IAAI,EACdzB,SAAS,EACT,IAAA2B,0BAAc,EAAE3B,SAAS,EAAEmB,YAAY,CAACS,UAAW,CAAC,EACpDT,YAAY,CAACxB,eACd,CAAC;IACD4B,OAAO,CAACM,QAAQ,CAAC,CAAC;IAClB;EACD,CAAC,MAAM,IAAK,CAAEX,cAAc,CAACjB,OAAO,IAAI,CAAEkB,YAAY,CAAClB,OAAO,EAAG;IAChEE,gBAAgB,CAAC2B,OAAO,CAAE,CAAE;MAAEC,GAAG;MAAEC;IAAK,CAAC,KAAMD,GAAG,CAAE,GAAGC,IAAK,CAAE,CAAC;EAChE;EAEA,OAAOb,YAAY;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASc,KAAKA,CAAEC,OAAO,EAAEzD,OAAO,EAAG;EACjD,OAAO,IAAA0D,sCAAY,EAAED,OAAQ,CAAC,CAACE,MAAM,CAAE,CAAEC,WAAW,EAAEnE,QAAQ,KAAM;IACnE,MAAMoE,KAAK,GAAG/B,aAAa,CAAErC,QAAQ,EAAEO,OAAQ,CAAC;IAChD,IAAK6D,KAAK,EAAG;MACZD,WAAW,CAACE,IAAI,CAAED,KAAM,CAAC;IAC1B;IACA,OAAOD,WAAW;EACnB,CAAC,EAAE,EAAG,CAAC;AACR"}