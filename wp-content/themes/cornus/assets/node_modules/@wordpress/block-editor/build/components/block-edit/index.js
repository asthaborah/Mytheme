"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockEdit;
Object.defineProperty(exports, "useBlockEditContext", {
  enumerable: true,
  get: function () {
    return _context.useBlockEditContext;
  }
});
var _react = require("react");
var _element = require("@wordpress/element");
var _blocks = require("@wordpress/blocks");
var _edit = _interopRequireDefault(require("./edit"));
var _context = require("./context");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * The `useBlockEditContext` hook provides information about the block this hook is being used in.
 * It returns an object with the `name`, `isSelected` state, and the `clientId` of the block.
 * It is useful if you want to create custom hooks that need access to the current blocks clientId
 * but don't want to rely on the data getting passed in as a parameter.
 *
 * @return {Object} Block edit context
 */

function BlockEdit({
  mayDisplayControls,
  mayDisplayParentControls,
  blockEditingMode,
  // The remaining props are passed through the BlockEdit filters and are thus
  // public API!
  ...props
}) {
  const {
    name,
    isSelected,
    clientId,
    attributes = {},
    __unstableLayoutClassNames
  } = props;
  const {
    layout = null,
    metadata = {}
  } = attributes;
  const {
    bindings
  } = metadata;
  const layoutSupport = (0, _blocks.hasBlockSupport)(name, 'layout', false) || (0, _blocks.hasBlockSupport)(name, '__experimentalLayout', false);
  return (0, _react.createElement)(_context.BlockEditContextProvider
  // It is important to return the same object if props haven't
  // changed to avoid  unnecessary rerenders.
  // See https://reactjs.org/docs/context.html#caveats.
  , {
    value: (0, _element.useMemo)(() => ({
      name,
      isSelected,
      clientId,
      layout: layoutSupport ? layout : null,
      __unstableLayoutClassNames,
      // We use symbols in favour of an __unstable prefix to avoid
      // usage outside of the package (this context is exposed).
      [_context.mayDisplayControlsKey]: mayDisplayControls,
      [_context.mayDisplayParentControlsKey]: mayDisplayParentControls,
      [_context.blockEditingModeKey]: blockEditingMode,
      [_context.blockBindingsKey]: bindings
    }), [name, isSelected, clientId, layoutSupport, layout, __unstableLayoutClassNames, mayDisplayControls, mayDisplayParentControls, blockEditingMode, bindings])
  }, (0, _react.createElement)(_edit.default, {
    ...props
  }));
}
//# sourceMappingURL=index.js.map