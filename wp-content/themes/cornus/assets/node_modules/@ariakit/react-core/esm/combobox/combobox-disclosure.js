"use client";
import {
  useDialogDisclosure
} from "../__chunks/H3TG2CZP.js";
import "../__chunks/BHEJ6NUH.js";
import "../__chunks/VDNZBO4W.js";
import {
  useComboboxProviderContext
} from "../__chunks/W76OTZCC.js";
import "../__chunks/NWCBQ4CV.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import "../__chunks/KK7H3W2B.js";
import "../__chunks/SHA3WOPI.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import {
  useEvent
} from "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/combobox/combobox-disclosure.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var children = /* @__PURE__ */ jsx(
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1.5pt",
    viewBox: "0 0 16 16",
    height: "1em",
    width: "1em",
    pointerEvents: "none",
    children: /* @__PURE__ */ jsx("polyline", { points: "4,6 8,10 12,6" })
  }
);
var useComboboxDisclosure = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxDisclosure must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const onMouseDownProp = props.onMouseDown;
    const onMouseDown = useEvent((event) => {
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
      event.preventDefault();
      store == null ? void 0 : store.move(null);
    });
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      const { baseElement } = store.getState();
      store.setDisclosureElement(baseElement);
    });
    const open = store.useState("open");
    props = __spreadProps(__spreadValues({
      children,
      tabIndex: -1,
      "aria-label": open ? "Hide popup" : "Show popup",
      "aria-expanded": open
    }, props), {
      onMouseDown,
      onClick
    });
    props = useDialogDisclosure(__spreadValues({ store }, props));
    return props;
  }
);
var ComboboxDisclosure = createComponent(
  (props) => {
    const htmlProps = useComboboxDisclosure(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxDisclosure.displayName = "ComboboxDisclosure";
}
export {
  ComboboxDisclosure,
  useComboboxDisclosure
};
