"use client";
import {
  useButton
} from "./VDNZBO4W.js";
import {
  useDialogScopedContext
} from "./G6BJYYBK.js";
import {
  createComponent,
  createElement,
  createHook
} from "./3ORBWXWF.js";
import {
  useEvent
} from "./6O5OEQGF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./4R3V3JGP.js";

// src/dialog/dialog-dismiss.tsx
import { useMemo } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var useDialogDismiss = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useDialogScopedContext();
    store = store || context;
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.hide();
    });
    const children = useMemo(
      () => /* @__PURE__ */ jsxs(
        "svg",
        {
          "aria-label": "Dismiss popup",
          display: "block",
          fill: "none",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5pt",
          viewBox: "0 0 16 16",
          height: "1em",
          width: "1em",
          children: [
            /* @__PURE__ */ jsx("line", { x1: "4", y1: "4", x2: "12", y2: "12" }),
            /* @__PURE__ */ jsx("line", { x1: "4", y1: "12", x2: "12", y2: "4" })
          ]
        }
      ),
      []
    );
    props = __spreadProps(__spreadValues({
      "data-dialog-dismiss": "",
      children
    }, props), {
      onClick
    });
    props = useButton(props);
    return props;
  }
);
var DialogDismiss = createComponent((props) => {
  const htmlProps = useDialogDismiss(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  DialogDismiss.displayName = "DialogDismiss";
}

export {
  useDialogDismiss,
  DialogDismiss
};
