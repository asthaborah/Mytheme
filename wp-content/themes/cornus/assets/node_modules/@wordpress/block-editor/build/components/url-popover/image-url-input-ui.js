"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__experimentalImageURLInputUI = void 0;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _dom = require("@wordpress/dom");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _index = _interopRequireDefault(require("./index"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const LINK_DESTINATION_NONE = 'none';
const LINK_DESTINATION_CUSTOM = 'custom';
const LINK_DESTINATION_MEDIA = 'media';
const LINK_DESTINATION_ATTACHMENT = 'attachment';
const NEW_TAB_REL = ['noreferrer', 'noopener'];
const ImageURLInputUI = ({
  linkDestination,
  onChangeUrl,
  url,
  mediaType = 'image',
  mediaUrl,
  mediaLink,
  linkTarget,
  linkClass,
  rel,
  showLightboxSetting,
  lightboxEnabled,
  onSetLightbox
}) => {
  const [isOpen, setIsOpen] = (0, _element.useState)(false);
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  const openLinkUI = () => {
    setIsOpen(true);
  };
  const [isEditingLink, setIsEditingLink] = (0, _element.useState)(false);
  const [urlInput, setUrlInput] = (0, _element.useState)(null);
  const autocompleteRef = (0, _element.useRef)(null);
  const wrapperRef = (0, _element.useRef)();
  (0, _element.useEffect)(() => {
    if (!wrapperRef.current) {
      return;
    }
    const nextFocusTarget = _dom.focus.focusable.find(wrapperRef.current)[0] || wrapperRef.current;
    nextFocusTarget.focus();
  }, [isEditingLink, url, lightboxEnabled]);
  const startEditLink = () => {
    if (linkDestination === LINK_DESTINATION_MEDIA || linkDestination === LINK_DESTINATION_ATTACHMENT) {
      setUrlInput('');
    }
    setIsEditingLink(true);
  };
  const stopEditLink = () => {
    setIsEditingLink(false);
  };
  const closeLinkUI = () => {
    setUrlInput(null);
    stopEditLink();
    setIsOpen(false);
  };
  const getUpdatedLinkTargetSettings = value => {
    const newLinkTarget = value ? '_blank' : undefined;
    let updatedRel;
    if (newLinkTarget) {
      const rels = (rel !== null && rel !== void 0 ? rel : '').split(' ');
      NEW_TAB_REL.forEach(relVal => {
        if (!rels.includes(relVal)) {
          rels.push(relVal);
        }
      });
      updatedRel = rels.join(' ');
    } else {
      const rels = (rel !== null && rel !== void 0 ? rel : '').split(' ').filter(relVal => NEW_TAB_REL.includes(relVal) === false);
      updatedRel = rels.length ? rels.join(' ') : undefined;
    }
    return {
      linkTarget: newLinkTarget,
      rel: updatedRel
    };
  };
  const onFocusOutside = () => {
    return event => {
      // The autocomplete suggestions list renders in a separate popover (in a portal),
      // so onFocusOutside fails to detect that a click on a suggestion occurred in the
      // LinkContainer. Detect clicks on autocomplete suggestions using a ref here, and
      // return to avoid the popover being closed.
      const autocompleteElement = autocompleteRef.current;
      if (autocompleteElement && autocompleteElement.contains(event.target)) {
        return;
      }
      setIsOpen(false);
      setUrlInput(null);
      stopEditLink();
    };
  };
  const onSubmitLinkChange = () => {
    return event => {
      if (urlInput) {
        // It is possible the entered URL actually matches a named link destination.
        // This check will ensure our link destination is correct.
        const selectedDestination = getLinkDestinations().find(destination => destination.url === urlInput)?.linkDestination || LINK_DESTINATION_CUSTOM;
        onChangeUrl({
          href: urlInput,
          linkDestination: selectedDestination,
          lightbox: {
            enabled: false
          }
        });
      }
      stopEditLink();
      setUrlInput(null);
      event.preventDefault();
    };
  };
  const onLinkRemove = () => {
    onChangeUrl({
      linkDestination: LINK_DESTINATION_NONE,
      href: ''
    });
  };
  const getLinkDestinations = () => {
    const linkDestinations = [{
      linkDestination: LINK_DESTINATION_MEDIA,
      title: (0, _i18n.__)('Link to image file'),
      url: mediaType === 'image' ? mediaUrl : undefined,
      icon: _icons.image
    }];
    if (mediaType === 'image' && mediaLink) {
      linkDestinations.push({
        linkDestination: LINK_DESTINATION_ATTACHMENT,
        title: (0, _i18n.__)('Link to attachment page'),
        url: mediaType === 'image' ? mediaLink : undefined,
        icon: _icons.page
      });
    }
    return linkDestinations;
  };
  const onSetHref = value => {
    const linkDestinations = getLinkDestinations();
    let linkDestinationInput;
    if (!value) {
      linkDestinationInput = LINK_DESTINATION_NONE;
    } else {
      linkDestinationInput = (linkDestinations.find(destination => {
        return destination.url === value;
      }) || {
        linkDestination: LINK_DESTINATION_CUSTOM
      }).linkDestination;
    }
    onChangeUrl({
      linkDestination: linkDestinationInput,
      href: value
    });
  };
  const onSetNewTab = value => {
    const updatedLinkTarget = getUpdatedLinkTargetSettings(value);
    onChangeUrl(updatedLinkTarget);
  };
  const onSetLinkRel = value => {
    onChangeUrl({
      rel: value
    });
  };
  const onSetLinkClass = value => {
    onChangeUrl({
      linkClass: value
    });
  };
  const advancedOptions = (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: "3"
  }, (0, _react.createElement)(_components.ToggleControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Open in new tab'),
    onChange: onSetNewTab,
    checked: linkTarget === '_blank'
  }), (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Link rel'),
    value: rel !== null && rel !== void 0 ? rel : '',
    onChange: onSetLinkRel
  }), (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Link CSS class'),
    value: linkClass || '',
    onChange: onSetLinkClass
  }));
  const linkEditorValue = urlInput !== null ? urlInput : url;
  const showLinkEditor = (!linkEditorValue && !lightboxEnabled) === true;
  const urlLabel = (getLinkDestinations().find(destination => destination.linkDestination === linkDestination) || {}).title;
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.ToolbarButton, {
    icon: _icons.link,
    className: "components-toolbar__control",
    label: (0, _i18n.__)('Link'),
    "aria-expanded": isOpen,
    onClick: openLinkUI,
    ref: setPopoverAnchor,
    isActive: !!url || lightboxEnabled
  }), isOpen && (0, _react.createElement)(_index.default, {
    ref: wrapperRef,
    anchor: popoverAnchor,
    onFocusOutside: onFocusOutside(),
    onClose: closeLinkUI,
    renderSettings: !lightboxEnabled ? () => advancedOptions : null,
    additionalControls: showLinkEditor && (0, _react.createElement)(_components.NavigableMenu, null, getLinkDestinations().map(link => (0, _react.createElement)(_components.MenuItem, {
      key: link.linkDestination,
      icon: link.icon,
      iconPosition: "left",
      onClick: () => {
        setUrlInput(null);
        onSetHref(link.url);
        stopEditLink();
      }
    }, link.title)), showLightboxSetting && (0, _react.createElement)(_components.MenuItem, {
      key: "expand-on-click",
      className: "block-editor-url-popover__expand-on-click",
      icon: _icons.fullscreen,
      info: (0, _i18n.__)('Scale the image with a lightbox effect.'),
      iconPosition: "left",
      onClick: () => {
        setUrlInput(null);
        onChangeUrl({
          linkDestination: LINK_DESTINATION_NONE,
          href: ''
        });
        onSetLightbox(true);
        stopEditLink();
      }
    }, (0, _i18n.__)('Expand on click'))),
    offset: 13
  }, (!url || isEditingLink) && !lightboxEnabled && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_index.default.LinkEditor, {
    className: "block-editor-format-toolbar__link-container-content",
    value: linkEditorValue,
    onChangeInputValue: setUrlInput,
    onSubmit: onSubmitLinkChange(),
    autocompleteRef: autocompleteRef
  })), url && !isEditingLink && !lightboxEnabled && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_index.default.LinkViewer, {
    className: "block-editor-format-toolbar__link-container-content",
    url: url,
    onEditLinkClick: startEditLink,
    urlLabel: urlLabel
  }), (0, _react.createElement)(_components.Button, {
    icon: _icons.linkOff,
    label: (0, _i18n.__)('Remove link'),
    onClick: onLinkRemove,
    size: "compact"
  })), !url && !isEditingLink && lightboxEnabled && (0, _react.createElement)("div", {
    className: "block-editor-url-popover__expand-on-click"
  }, (0, _react.createElement)(_icons.Icon, {
    icon: _icons.fullscreen
  }), (0, _react.createElement)("div", {
    className: "text"
  }, (0, _react.createElement)("p", null, (0, _i18n.__)('Expand on click')), (0, _react.createElement)("p", {
    className: "description"
  }, (0, _i18n.__)('Scales the image with a lightbox effect'))), (0, _react.createElement)(_components.Button, {
    icon: _icons.linkOff,
    label: (0, _i18n.__)('Disable expand on click'),
    onClick: () => {
      onSetLightbox(false);
    },
    size: "compact"
  }))));
};
exports.__experimentalImageURLInputUI = ImageURLInputUI;
//# sourceMappingURL=image-url-input-ui.js.map