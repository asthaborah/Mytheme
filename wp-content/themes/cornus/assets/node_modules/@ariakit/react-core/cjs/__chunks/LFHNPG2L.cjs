"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _5UTRYT6Ecjs = require('./5UTRYT6E.cjs');


var _S6UU7NA4cjs = require('./S6UU7NA4.cjs');




var _RNZNGEL4cjs = require('./RNZNGEL4.cjs');





var _EO6LS72Hcjs = require('./EO6LS72H.cjs');




var _AV6KTKLEcjs = require('./AV6KTKLE.cjs');

// src/disclosure/disclosure.ts
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var symbol = Symbol("disclosure");
var useDisclosure = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, toggleOnClick = true } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, ["store", "toggleOnClick"]);
    const context = _S6UU7NA4cjs.useDisclosureProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "Disclosure must receive a `store` prop or be wrapped in a DisclosureProvider component."
    );
    const ref = _react.useRef.call(void 0, null);
    const [expanded, setExpanded] = _react.useState.call(void 0, false);
    const disclosureElement = store.useState("disclosureElement");
    const open = store.useState("open");
    _react.useEffect.call(void 0, () => {
      let isCurrentDisclosure = disclosureElement === ref.current;
      if (!(disclosureElement == null ? void 0 : disclosureElement.isConnected)) {
        store == null ? void 0 : store.setDisclosureElement(ref.current);
        isCurrentDisclosure = true;
      }
      setExpanded(open && isCurrentDisclosure);
    }, [disclosureElement, store, open]);
    const onClickProp = props.onClick;
    const toggleOnClickProp = _EO6LS72Hcjs.useBooleanEvent.call(void 0, toggleOnClick);
    const [isDuplicate, metadataProps] = _EO6LS72Hcjs.useMetadataProps.call(void 0, props, symbol, true);
    const onClick = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (!toggleOnClickProp(event))
        return;
      store == null ? void 0 : store.setDisclosureElement(event.currentTarget);
      store == null ? void 0 : store.toggle();
    });
    const contentElement = store.useState("contentElement");
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      "aria-expanded": expanded,
      "aria-controls": contentElement == null ? void 0 : contentElement.id
    }, metadataProps), props), {
      ref: _EO6LS72Hcjs.useMergeRefs.call(void 0, ref, props.ref),
      onClick
    });
    props = _5UTRYT6Ecjs.useButton.call(void 0, props);
    return props;
  }
);
var Disclosure = _RNZNGEL4cjs.createComponent.call(void 0, (props) => {
  const htmlProps = useDisclosure(props);
  return _RNZNGEL4cjs.createElement.call(void 0, "button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Disclosure.displayName = "Disclosure";
}




exports.useDisclosure = useDisclosure; exports.Disclosure = Disclosure;
