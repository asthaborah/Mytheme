"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("../utils");
/**
 * Internal dependencies
 */

const backgroundImage = {
  name: 'backgroundImage',
  generate: (style, options) => {
    const _backgroundImage = style?.background?.backgroundImage;
    const _backgroundSize = style?.background?.backgroundSize;
    const styleRules = [];
    if (!_backgroundImage) {
      return styleRules;
    }

    /*
     * If the background image is a string, it could already contain a url() function,
     * or have a linear-gradient value.
     */
    if (typeof _backgroundImage === 'string') {
      styleRules.push({
        selector: options.selector,
        key: 'backgroundImage',
        value: _backgroundImage
      });
    }
    if (typeof _backgroundImage === 'object' && _backgroundImage?.source === 'file' && _backgroundImage?.url) {
      styleRules.push({
        selector: options.selector,
        key: 'backgroundImage',
        // Passed `url` may already be encoded. To prevent double encoding, decodeURI is executed to revert to the original string.
        value: `url( '${encodeURI((0, _utils.safeDecodeURI)(_backgroundImage.url))}' )`
      });
    }

    // If no background size is set, but an image is, default to cover.
    if (_backgroundSize === undefined) {
      styleRules.push({
        selector: options.selector,
        key: 'backgroundSize',
        value: 'cover'
      });
    }
    return styleRules;
  }
};
const backgroundPosition = {
  name: 'backgroundRepeat',
  generate: (style, options) => {
    return (0, _utils.generateRule)(style, options, ['background', 'backgroundPosition'], 'backgroundPosition');
  }
};
const backgroundRepeat = {
  name: 'backgroundRepeat',
  generate: (style, options) => {
    return (0, _utils.generateRule)(style, options, ['background', 'backgroundRepeat'], 'backgroundRepeat');
  }
};
const backgroundSize = {
  name: 'backgroundSize',
  generate: (style, options) => {
    const _backgroundSize = style?.background?.backgroundSize;
    const _backgroundPosition = style?.background?.backgroundPosition;
    const styleRules = [];
    if (_backgroundSize === undefined) {
      return styleRules;
    }
    styleRules.push(...(0, _utils.generateRule)(style, options, ['background', 'backgroundSize'], 'backgroundSize'));

    // If background size is set to contain, but no position is set, default to center.
    if (_backgroundSize === 'contain' && _backgroundPosition === undefined) {
      styleRules.push({
        selector: options.selector,
        key: 'backgroundPosition',
        value: 'center'
      });
    }
    return styleRules;
  }
};
var _default = exports.default = [backgroundImage, backgroundPosition, backgroundRepeat, backgroundSize];
//# sourceMappingURL=index.js.map