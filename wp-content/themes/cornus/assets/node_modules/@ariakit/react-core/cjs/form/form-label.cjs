"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _FROYTN4Bcjs = require('../__chunks/FROYTN4B.cjs');


var _R5A2WTWBcjs = require('../__chunks/R5A2WTWB.cjs');
require('../__chunks/BZTDJIVT.cjs');




var _RNZNGEL4cjs = require('../__chunks/RNZNGEL4.cjs');





var _EO6LS72Hcjs = require('../__chunks/EO6LS72H.cjs');
require('../__chunks/CJDHQUBR.cjs');




var _AV6KTKLEcjs = require('../__chunks/AV6KTKLE.cjs');

// src/form/form-label.tsx
var _react = require('react');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
function supportsNativeLabel(tagName) {
  return tagName === "input" || tagName === "textarea" || tagName === "select" || tagName === "meter" || tagName === "progress";
}
var useFormLabel = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, name: nameProp, getItem: getItemProp } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, ["store", "name", "getItem"]);
    const context = _FROYTN4Bcjs.useFormContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormLabel must be wrapped in a Form component."
    );
    const id = _EO6LS72Hcjs.useId.call(void 0, props.id);
    const ref = _react.useRef.call(void 0, null);
    const name = `${nameProp}`;
    const getItem = _react.useCallback.call(void 0, 
      (item) => {
        const nextItem = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {}, item), { id: id || item.id, name, type: "label" });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, name, getItemProp]
    );
    const field = store.useState(
      (state) => state.items.find((item) => item.type === "field" && item.name === name)
    );
    const fieldTagName = _EO6LS72Hcjs.useTagName.call(void 0, field == null ? void 0 : field.element, "input");
    const isNativeLabel = supportsNativeLabel(fieldTagName);
    const onClickProp = props.onClick;
    const onClick = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isNativeLabel)
        return;
      const fieldElement = field == null ? void 0 : field.element;
      if (!fieldElement)
        return;
      queueMicrotask(() => {
        const focusableElement = _focus.getFirstTabbableIn.call(void 0, fieldElement, true, true);
        focusableElement == null ? void 0 : focusableElement.focus();
        focusableElement == null ? void 0 : focusableElement.click();
      });
    });
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      id,
      render: isNativeLabel ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "label", {}) : /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {}),
      htmlFor: isNativeLabel ? field == null ? void 0 : field.id : void 0
    }, props), {
      ref: _EO6LS72Hcjs.useMergeRefs.call(void 0, ref, props.ref),
      onClick
    });
    if (!isNativeLabel) {
      props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {}, props), {
        style: _AV6KTKLEcjs.__spreadValues.call(void 0, {
          cursor: "default"
        }, props.style)
      });
    }
    props = _R5A2WTWBcjs.useCollectionItem.call(void 0, _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, { store }, props), { getItem }));
    return props;
  }
);
var FormLabel = _RNZNGEL4cjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useFormLabel(props);
  return _RNZNGEL4cjs.createElement.call(void 0, "label", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormLabel.displayName = "FormLabel";
}



exports.FormLabel = FormLabel; exports.useFormLabel = useFormLabel;
