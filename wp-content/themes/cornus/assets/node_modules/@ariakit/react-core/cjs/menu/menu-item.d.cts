import type { MouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CompositeHoverOptions } from "../composite/composite-hover.js";
import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { MenubarStore } from "../menubar/menubar-store.js";
import type { As, Props } from "../utils/types.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuItem` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore();
 * const undo = useMenuItem({ store });
 * const redo = useMenuItem({ store });
 * <MenuButton store={store}>Edit</MenuButton>
 * <Menu store={store}>
 *   <Role {...undo}>Undo</Role>
 *   <Role {...redo}>Redo</Role>
 * </Menu>
 * ```
 */
export declare const useMenuItem: import("../utils/types.js").Hook<MenuItemOptions<"div">>;
/**
 * Renders a menu item inside
 * [`MenuList`](https://ariakit.org/reference/menu-list) or
 * [`Menu`](https://ariakit.org/reference/menu)
 * components.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx {4-5}
 * <MenuProvider>
 *   <MenuButton>Edit</MenuButton>
 *   <Menu>
 *     <MenuItem>Undo</MenuItem>
 *     <MenuItem>Redo</MenuItem>
 *   </Menu>
 * </MenuProvider>
 * ```
 */
export declare const MenuItem: import("../utils/types.js").Component<MenuItemOptions<"div">>;
export interface MenuItemOptions<T extends As = "div"> extends CompositeItemOptions<T>, CompositeHoverOptions<T> {
    /**
     * Object returned by the
     * [`useMenuStore`](https://ariakit.org/reference/use-menu-store) or
     * [`useMenubarStore`](https://ariakit.org/reference/use-menubar-store)
     * hooks. If not provided, the closest
     * [`Menu`](https://ariakit.org/reference/menu),
     * [`MenuProvider`](https://ariakit.org/reference/menu-provider),
     * [`Menubar`](https://ariakit.org/reference/menubar), or
     * [`MenubarProvider`](https://ariakit.org/reference/menubar-provider)
     * components' context will be used.
     */
    store?: MenubarStore | MenuStore;
    /**
     * Determines if the menu should hide when this item is clicked.
     *
     * **Note**: This behavior isn't triggered if this menu item is rendered as a
     * link and modifier keys are used to either open the link in a new tab or
     * download it.
     *
     * Live examples:
     * - [Sliding Menu](https://ariakit.org/examples/menu-slide)
     * @default true
     */
    hideOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
}
export type MenuItemProps<T extends As = "div"> = Props<MenuItemOptions<T>>;
