"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _ = require("../");
var _categorySelect = _interopRequireDefault(require("./category-select"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const DEFAULT_MIN_ITEMS = 1;
const DEFAULT_MAX_ITEMS = 100;
const options = [{
  label: (0, _i18n.__)('Newest to oldest'),
  value: 'date/desc'
}, {
  label: (0, _i18n.__)('Oldest to newest'),
  value: 'date/asc'
}, {
  /* translators: Label for ordering posts by title in ascending order. */
  label: (0, _i18n.__)('A → Z'),
  value: 'title/asc'
}, {
  /* translators: Label for ordering posts by title in descending order. */
  label: (0, _i18n.__)('Z → A'),
  value: 'title/desc'
}];
const QueryControls = (0, _element.memo)(({
  categoriesList,
  selectedCategoryId,
  numberOfItems,
  order,
  orderBy,
  maxItems = DEFAULT_MAX_ITEMS,
  minItems = DEFAULT_MIN_ITEMS,
  onCategoryChange,
  onNumberOfItemsChange,
  onOrderChange,
  onOrderByChange
}) => {
  const onChange = (0, _element.useCallback)(value => {
    const [newOrderBy, newOrder] = value.split('/');
    if (newOrder !== order) {
      onOrderChange(newOrder);
    }
    if (newOrderBy !== orderBy) {
      onOrderByChange(newOrderBy);
    }
  }, [order, orderBy, onOrderByChange, onOrderChange]);
  return (0, _react.createElement)(_react.Fragment, null, onOrderChange && onOrderByChange && (0, _react.createElement)(_.SelectControl, {
    label: (0, _i18n.__)('Order by'),
    value: `${orderBy}/${order}`,
    options: options,
    onChange: onChange,
    hideCancelButton: true
  }), onCategoryChange && (0, _react.createElement)(_categorySelect.default, {
    categoriesList: categoriesList,
    label: (0, _i18n.__)('Category'),
    noOptionLabel: (0, _i18n._x)('All', 'categories'),
    selectedCategoryId: selectedCategoryId,
    onChange: onCategoryChange,
    hideCancelButton: true
  }), onNumberOfItemsChange && (0, _react.createElement)(_.RangeControl, {
    __next40pxDefaultSize: true,
    label: (0, _i18n.__)('Number of items'),
    value: numberOfItems,
    onChange: onNumberOfItemsChange,
    min: minItems,
    max: maxItems,
    required: true
  }));
});
var _default = exports.default = QueryControls;
//# sourceMappingURL=index.native.js.map