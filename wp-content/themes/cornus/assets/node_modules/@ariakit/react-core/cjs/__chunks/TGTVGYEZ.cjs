"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _3W6FH6JKcjs = require('./3W6FH6JK.cjs');


var _Z3GCTNW4cjs = require('./Z3GCTNW4.cjs');




var _RNZNGEL4cjs = require('./RNZNGEL4.cjs');





var _EO6LS72Hcjs = require('./EO6LS72H.cjs');




var _AV6KTKLEcjs = require('./AV6KTKLE.cjs');

// src/hovercard/hovercard-anchor.ts
var _react = require('react');
var _events = require('@ariakit/core/utils/events');
var _misc = require('@ariakit/core/utils/misc');
var useHovercardAnchor = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, showOnHover = true } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, ["store", "showOnHover"]);
    const context = _3W6FH6JKcjs.useHovercardProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "HovercardAnchor must receive a `store` prop or be wrapped in a HovercardProvider component."
    );
    const disabled = _misc.disabledFromProps.call(void 0, props);
    const showTimeoutRef = _react.useRef.call(void 0, 0);
    _react.useEffect.call(void 0, () => () => window.clearTimeout(showTimeoutRef.current), []);
    _react.useEffect.call(void 0, () => {
      const onMouseLeave = (event) => {
        if (!store)
          return;
        const { anchorElement } = store.getState();
        if (!anchorElement)
          return;
        if (event.target !== anchorElement)
          return;
        window.clearTimeout(showTimeoutRef.current);
        showTimeoutRef.current = 0;
      };
      return _events.addGlobalEventListener.call(void 0, "mouseleave", onMouseLeave, true);
    }, [store]);
    const onMouseMoveProp = props.onMouseMove;
    const showOnHoverProp = _EO6LS72Hcjs.useBooleanEvent.call(void 0, showOnHover);
    const isMouseMoving = _EO6LS72Hcjs.useIsMouseMoving.call(void 0, );
    const onMouseMove = _EO6LS72Hcjs.useEvent.call(void 0, 
      (event) => {
        onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
        if (disabled)
          return;
        if (!store)
          return;
        if (event.defaultPrevented)
          return;
        if (showTimeoutRef.current)
          return;
        if (!isMouseMoving())
          return;
        if (!showOnHoverProp(event))
          return;
        const element = event.currentTarget;
        store.setAnchorElement(element);
        store.setDisclosureElement(element);
        const { showTimeout, timeout } = store.getState();
        const showHovercard = () => {
          showTimeoutRef.current = 0;
          if (!isMouseMoving())
            return;
          store == null ? void 0 : store.setAnchorElement(element);
          store == null ? void 0 : store.show();
          queueMicrotask(() => {
            store == null ? void 0 : store.setDisclosureElement(element);
          });
        };
        const timeoutMs = showTimeout != null ? showTimeout : timeout;
        if (timeoutMs === 0) {
          showHovercard();
        } else {
          showTimeoutRef.current = window.setTimeout(showHovercard, timeoutMs);
        }
      }
    );
    const ref = _react.useCallback.call(void 0, 
      (element) => {
        if (!store)
          return;
        const { anchorElement } = store.getState();
        if (anchorElement == null ? void 0 : anchorElement.isConnected)
          return;
        store.setAnchorElement(element);
      },
      [store]
    );
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {}, props), {
      ref: _EO6LS72Hcjs.useMergeRefs.call(void 0, ref, props.ref),
      onMouseMove
    });
    props = _Z3GCTNW4cjs.useFocusable.call(void 0, props);
    return props;
  }
);
var HovercardAnchor = _RNZNGEL4cjs.createComponent.call(void 0, 
  (props) => {
    const htmlProps = useHovercardAnchor(props);
    return _RNZNGEL4cjs.createElement.call(void 0, "a", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  HovercardAnchor.displayName = "HovercardAnchor";
}




exports.useHovercardAnchor = useHovercardAnchor; exports.HovercardAnchor = HovercardAnchor;
