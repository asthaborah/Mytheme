"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _store = require("../store");
var _utils = require("./utils");
var _layout = require("../components/block-list/layout");
var _gridVisualizer = require("../components/grid-visualizer");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useBlockPropsChildLayoutStyles({
  style
}) {
  var _style$layout;
  const shouldRenderChildLayoutStyles = (0, _data.useSelect)(select => {
    return !select(_store.store).getSettings().disableLayoutStyles;
  });
  const layout = (_style$layout = style?.layout) !== null && _style$layout !== void 0 ? _style$layout : {};
  const {
    selfStretch,
    flexSize,
    columnSpan,
    rowSpan
  } = layout;
  const parentLayout = (0, _layout.useLayout)() || {};
  const {
    columnCount,
    minimumColumnWidth
  } = parentLayout;
  const id = (0, _compose.useInstanceId)(useBlockPropsChildLayoutStyles);
  const selector = `.wp-container-content-${id}`;
  let css = '';
  if (shouldRenderChildLayoutStyles) {
    if (selfStretch === 'fixed' && flexSize) {
      css = `${selector} {
				flex-basis: ${flexSize};
				box-sizing: border-box;
			}`;
    } else if (selfStretch === 'fill') {
      css = `${selector} {
				flex-grow: 1;
			}`;
    } else if (columnSpan) {
      css = `${selector} {
				grid-column: span ${columnSpan};
			}`;
    }
    /**
     * If minimumColumnWidth is set on the parent, or if no
     * columnCount is set, the grid is responsive so a
     * container query is needed for the span to resize.
     */
    if (columnSpan && (minimumColumnWidth || !columnCount)) {
      // Calculate the container query value.
      const columnSpanNumber = parseInt(columnSpan);
      let parentColumnValue = parseFloat(minimumColumnWidth);
      /**
       * 12rem is the default minimumColumnWidth value.
       * If parentColumnValue is not a number, default to 12.
       */
      if (isNaN(parentColumnValue)) {
        parentColumnValue = 12;
      }
      let parentColumnUnit = minimumColumnWidth?.replace(parentColumnValue, '');
      /**
       * Check that parent column unit is either 'px', 'rem' or 'em'.
       * If not, default to 'rem'.
       */
      if (!['px', 'rem', 'em'].includes(parentColumnUnit)) {
        parentColumnUnit = 'rem';
      }
      const defaultGapValue = parentColumnUnit === 'px' ? 24 : 1.5;
      const containerQueryValue = columnSpanNumber * parentColumnValue + (columnSpanNumber - 1) * defaultGapValue;
      css += `@container (max-width: ${containerQueryValue}${parentColumnUnit}) {
				${selector} {
					grid-column: 1 / -1;
				}
			}`;
    }
    if (rowSpan) {
      css += `${selector} {
				grid-row: span ${rowSpan};
			}`;
    }
  }
  (0, _utils.useStyleOverride)({
    css
  });

  // Only attach a container class if there is generated CSS to be attached.
  if (!css) {
    return;
  }

  // Attach a `wp-container-content` id-based classname.
  return {
    className: `wp-container-content-${id}`
  };
}
function ChildLayoutControlsPure({
  clientId,
  style,
  setAttributes
}) {
  const parentLayout = (0, _layout.useLayout)() || {};
  const rootClientId = (0, _data.useSelect)(select => {
    return select(_store.store).getBlockRootClientId(clientId);
  }, [clientId]);
  if (parentLayout.type !== 'grid') {
    return null;
  }
  if (!window.__experimentalEnableGridInteractivity) {
    return null;
  }
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_gridVisualizer.GridVisualizer, {
    clientId: rootClientId
  }), (0, _react.createElement)(_gridVisualizer.GridItemResizer, {
    clientId: clientId,
    onChange: ({
      columnSpan,
      rowSpan
    }) => {
      setAttributes({
        style: {
          ...style,
          layout: {
            ...style?.layout,
            columnSpan,
            rowSpan
          }
        }
      });
    }
  }));
}
var _default = exports.default = {
  useBlockProps: useBlockPropsChildLayoutStyles,
  edit: ChildLayoutControlsPure,
  attributeKeys: ['style'],
  hasSupport() {
    return true;
  }
};
//# sourceMappingURL=layout-child.js.map