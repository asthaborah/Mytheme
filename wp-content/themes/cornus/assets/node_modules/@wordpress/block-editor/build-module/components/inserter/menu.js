import { createElement, Fragment } from "react";
/**
 * External dependencies
 */
import classnames from 'classnames';

/**
 * WordPress dependencies
 */
import { forwardRef, useState, useCallback, useMemo, useImperativeHandle, useRef } from '@wordpress/element';
import { VisuallyHidden, SearchControl, Popover } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { useDebouncedInput } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import { unlock } from '../../lock-unlock';
import Tips from './tips';
import InserterPreviewPanel from './preview-panel';
import BlockTypesTab from './block-types-tab';
import BlockPatternsTab from './block-patterns-tab';
import { PatternCategoryPreviewPanel } from './block-patterns-tab/pattern-category-preview-panel';
import { MediaTab, MediaCategoryDialog, useMediaCategories } from './media-tab';
import InserterSearchResults from './search-results';
import useInsertionPoint from './hooks/use-insertion-point';
import InserterTabs from './tabs';
import { store as blockEditorStore } from '../../store';
function InserterMenu({
  rootClientId,
  clientId,
  isAppender,
  __experimentalInsertionIndex,
  onSelect,
  showInserterHelpPanel,
  showMostUsedBlocks,
  __experimentalFilterValue = '',
  shouldFocusBlock = true
}, ref) {
  const [filterValue, setFilterValue, delayedFilterValue] = useDebouncedInput(__experimentalFilterValue);
  const [hoveredItem, setHoveredItem] = useState(null);
  const [selectedPatternCategory, setSelectedPatternCategory] = useState(null);
  const [patternFilter, setPatternFilter] = useState('all');
  const [selectedMediaCategory, setSelectedMediaCategory] = useState(null);
  const [selectedTab, setSelectedTab] = useState(null);
  const [destinationRootClientId, onInsertBlocks, onToggleInsertionPoint] = useInsertionPoint({
    rootClientId,
    clientId,
    isAppender,
    insertionIndex: __experimentalInsertionIndex,
    shouldFocusBlock
  });
  const {
    isZoomOutMode,
    showPatterns
  } = useSelect(select => {
    const {
      hasAllowedPatterns,
      __unstableGetEditorMode
    } = unlock(select(blockEditorStore));
    return {
      isZoomOutMode: __unstableGetEditorMode() === 'zoom-out',
      showPatterns: hasAllowedPatterns(destinationRootClientId)
    };
  }, [destinationRootClientId]);
  const mediaCategories = useMediaCategories(destinationRootClientId);
  const showMedia = mediaCategories.length > 0 && !isZoomOutMode;
  const showBlocks = !isZoomOutMode;
  const onInsert = useCallback((blocks, meta, shouldForceFocusBlock) => {
    onInsertBlocks(blocks, meta, shouldForceFocusBlock);
    onSelect();
  }, [onInsertBlocks, onSelect]);
  const onInsertPattern = useCallback((blocks, patternName) => {
    onInsertBlocks(blocks, {
      patternName
    });
    onSelect();
  }, [onInsertBlocks, onSelect]);
  const onHover = useCallback(item => {
    onToggleInsertionPoint(!!item);
    setHoveredItem(item);
  }, [onToggleInsertionPoint, setHoveredItem]);
  const onHoverPattern = useCallback(item => {
    onToggleInsertionPoint(!!item);
  }, [onToggleInsertionPoint]);
  const onClickPatternCategory = useCallback((patternCategory, filter) => {
    setSelectedPatternCategory(patternCategory);
    setPatternFilter(filter);
  }, [setSelectedPatternCategory]);
  const blocksTab = useMemo(() => createElement(Fragment, null, createElement("div", {
    className: "block-editor-inserter__block-list"
  }, createElement(BlockTypesTab, {
    rootClientId: destinationRootClientId,
    onInsert: onInsert,
    onHover: onHover,
    showMostUsedBlocks: showMostUsedBlocks
  })), showInserterHelpPanel && createElement("div", {
    className: "block-editor-inserter__tips"
  }, createElement(VisuallyHidden, {
    as: "h2"
  }, __('A tip for using the block editor')), createElement(Tips, null))), [destinationRootClientId, onInsert, onHover, showMostUsedBlocks, showInserterHelpPanel]);
  const patternsTab = useMemo(() => createElement(BlockPatternsTab, {
    rootClientId: destinationRootClientId,
    onInsert: onInsertPattern,
    onSelectCategory: onClickPatternCategory,
    selectedCategory: selectedPatternCategory
  }), [destinationRootClientId, onInsertPattern, onClickPatternCategory, selectedPatternCategory]);
  const mediaTab = useMemo(() => createElement(MediaTab, {
    rootClientId: destinationRootClientId,
    selectedCategory: selectedMediaCategory,
    onSelectCategory: setSelectedMediaCategory,
    onInsert: onInsert
  }), [destinationRootClientId, onInsert, selectedMediaCategory, setSelectedMediaCategory]);
  const inserterTabsContents = useMemo(() => ({
    blocks: blocksTab,
    patterns: patternsTab,
    media: mediaTab
  }), [blocksTab, mediaTab, patternsTab]);
  const searchRef = useRef();
  useImperativeHandle(ref, () => ({
    focusSearch: () => {
      searchRef.current.focus();
    }
  }));
  const showPatternPanel = selectedTab === 'patterns' && !delayedFilterValue && selectedPatternCategory;
  const showAsTabs = !delayedFilterValue && (showPatterns || showMedia);
  const showMediaPanel = selectedTab === 'media' && !delayedFilterValue && selectedMediaCategory;
  const handleSetSelectedTab = value => {
    // If no longer on patterns tab remove the category setting.
    if (value !== 'patterns') {
      setSelectedPatternCategory(null);
    }
    setSelectedTab(value);
  };
  return createElement("div", {
    className: "block-editor-inserter__menu"
  }, createElement("div", {
    className: classnames('block-editor-inserter__main-area', {
      'show-as-tabs': showAsTabs
    })
  }, createElement(SearchControl, {
    __nextHasNoMarginBottom: true,
    className: "block-editor-inserter__search",
    onChange: value => {
      if (hoveredItem) setHoveredItem(null);
      setFilterValue(value);
    },
    value: filterValue,
    label: __('Search for blocks and patterns'),
    placeholder: __('Search'),
    ref: searchRef
  }), !!delayedFilterValue && createElement("div", {
    className: "block-editor-inserter__no-tab-container"
  }, createElement(InserterSearchResults, {
    filterValue: delayedFilterValue,
    onSelect: onSelect,
    onHover: onHover,
    onHoverPattern: onHoverPattern,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    __experimentalInsertionIndex: __experimentalInsertionIndex,
    showBlockDirectory: true,
    showBlocks: showBlocks,
    shouldFocusBlock: shouldFocusBlock
  })), showAsTabs && createElement(InserterTabs, {
    showBlocks: showBlocks,
    showPatterns: showPatterns,
    showMedia: showMedia,
    onSelect: handleSetSelectedTab,
    tabsContents: inserterTabsContents
  }), !delayedFilterValue && !showAsTabs && showBlocks && createElement("div", {
    className: "block-editor-inserter__no-tab-container"
  }, blocksTab)), showMediaPanel && createElement(MediaCategoryDialog, {
    rootClientId: destinationRootClientId,
    onInsert: onInsert,
    category: selectedMediaCategory
  }), showInserterHelpPanel && hoveredItem && createElement(Popover, {
    className: "block-editor-inserter__preview-container__popover",
    placement: "right-start",
    offset: 16,
    focusOnMount: false,
    animate: false
  }, createElement(InserterPreviewPanel, {
    item: hoveredItem
  })), showPatternPanel && createElement(PatternCategoryPreviewPanel, {
    rootClientId: destinationRootClientId,
    onInsert: onInsertPattern,
    onHover: onHoverPattern,
    category: selectedPatternCategory,
    patternFilter: patternFilter,
    showTitlesAsTooltip: true
  }));
}
export default forwardRef(InserterMenu);
//# sourceMappingURL=menu.js.map