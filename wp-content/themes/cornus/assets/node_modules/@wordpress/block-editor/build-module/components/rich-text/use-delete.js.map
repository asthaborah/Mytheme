{"version":3,"names":["useRef","useRefEffect","DELETE","BACKSPACE","isCollapsed","isEmpty","useDelete","props","propsRef","current","element","onKeyDown","event","keyCode","defaultPrevented","value","onMerge","onRemove","start","end","text","isReverse","hasActiveFormats","activeFormats","length","preventDefault","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/use-delete.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { DELETE, BACKSPACE } from '@wordpress/keycodes';\nimport { isCollapsed, isEmpty } from '@wordpress/rich-text';\n\nexport function useDelete( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onKeyDown( event ) {\n\t\t\tconst { keyCode } = event;\n\n\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { value, onMerge, onRemove } = propsRef.current;\n\n\t\t\tif ( keyCode === DELETE || keyCode === BACKSPACE ) {\n\t\t\t\tconst { start, end, text } = value;\n\t\t\t\tconst isReverse = keyCode === BACKSPACE;\n\t\t\t\tconst hasActiveFormats =\n\t\t\t\t\tvalue.activeFormats && !! value.activeFormats.length;\n\n\t\t\t\t// Only process delete if the key press occurs at an uncollapsed edge.\n\t\t\t\tif (\n\t\t\t\t\t! isCollapsed( value ) ||\n\t\t\t\t\thasActiveFormats ||\n\t\t\t\t\t( isReverse && start !== 0 ) ||\n\t\t\t\t\t( ! isReverse && end !== text.length )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( onMerge ) {\n\t\t\t\t\tonMerge( ! isReverse );\n\t\t\t\t}\n\n\t\t\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t\t\t// causing destruction of two fields (merge, then removed merged).\n\t\t\t\telse if ( onRemove && isEmpty( value ) && isReverse ) {\n\t\t\t\t\tonRemove( ! isReverse );\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\n\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t};\n\t}, [] );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,MAAM,EAAEC,SAAS,QAAQ,qBAAqB;AACvD,SAASC,WAAW,EAAEC,OAAO,QAAQ,sBAAsB;AAE3D,OAAO,SAASC,SAASA,CAAEC,KAAK,EAAG;EAClC,MAAMC,QAAQ,GAAGR,MAAM,CAAEO,KAAM,CAAC;EAChCC,QAAQ,CAACC,OAAO,GAAGF,KAAK;EACxB,OAAON,YAAY,CAAIS,OAAO,IAAM;IACnC,SAASC,SAASA,CAAEC,KAAK,EAAG;MAC3B,MAAM;QAAEC;MAAQ,CAAC,GAAGD,KAAK;MAEzB,IAAKA,KAAK,CAACE,gBAAgB,EAAG;QAC7B;MACD;MAEA,MAAM;QAAEC,KAAK;QAAEC,OAAO;QAAEC;MAAS,CAAC,GAAGT,QAAQ,CAACC,OAAO;MAErD,IAAKI,OAAO,KAAKX,MAAM,IAAIW,OAAO,KAAKV,SAAS,EAAG;QAClD,MAAM;UAAEe,KAAK;UAAEC,GAAG;UAAEC;QAAK,CAAC,GAAGL,KAAK;QAClC,MAAMM,SAAS,GAAGR,OAAO,KAAKV,SAAS;QACvC,MAAMmB,gBAAgB,GACrBP,KAAK,CAACQ,aAAa,IAAI,CAAC,CAAER,KAAK,CAACQ,aAAa,CAACC,MAAM;;QAErD;QACA,IACC,CAAEpB,WAAW,CAAEW,KAAM,CAAC,IACtBO,gBAAgB,IACdD,SAAS,IAAIH,KAAK,KAAK,CAAG,IAC1B,CAAEG,SAAS,IAAIF,GAAG,KAAKC,IAAI,CAACI,MAAQ,EACrC;UACD;QACD;QAEA,IAAKR,OAAO,EAAG;UACdA,OAAO,CAAE,CAAEK,SAAU,CAAC;QACvB;;QAEA;QACA;QACA;QACA;QAAA,KACK,IAAKJ,QAAQ,IAAIZ,OAAO,CAAEU,KAAM,CAAC,IAAIM,SAAS,EAAG;UACrDJ,QAAQ,CAAE,CAAEI,SAAU,CAAC;QACxB;QAEAT,KAAK,CAACa,cAAc,CAAC,CAAC;MACvB;IACD;IAEAf,OAAO,CAACgB,gBAAgB,CAAE,SAAS,EAAEf,SAAU,CAAC;IAChD,OAAO,MAAM;MACZD,OAAO,CAACiB,mBAAmB,CAAE,SAAS,EAAEhB,SAAU,CAAC;IACpD,CAAC;EACF,CAAC,EAAE,EAAG,CAAC;AACR"}