"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _useSettings = require("../use-settings");
var _lockUnlock = require("../../lock-unlock");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const colorsAndGradientKeys = ['colors', 'disableCustomColors', 'gradients', 'disableCustomGradients'];
const TAB_IDS = {
  color: 'color',
  gradient: 'gradient'
};
function ColorGradientControlInner({
  colors,
  gradients,
  disableCustomColors,
  disableCustomGradients,
  __experimentalIsRenderedInSidebar,
  className,
  label,
  onColorChange,
  onGradientChange,
  colorValue,
  gradientValue,
  clearable,
  showTitle = true,
  enableAlpha,
  headingLevel
}) {
  const canChooseAColor = onColorChange && (colors && colors.length > 0 || !disableCustomColors);
  const canChooseAGradient = onGradientChange && (gradients && gradients.length > 0 || !disableCustomGradients);
  if (!canChooseAColor && !canChooseAGradient) {
    return null;
  }
  const tabPanels = {
    [TAB_IDS.color]: (0, _react.createElement)(_components.ColorPalette, {
      value: colorValue,
      onChange: canChooseAGradient ? newColor => {
        onColorChange(newColor);
        onGradientChange();
      } : onColorChange,
      colors,
      disableCustomColors,
      __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar,
      clearable: clearable,
      enableAlpha: enableAlpha,
      headingLevel: headingLevel
    }),
    [TAB_IDS.gradient]: (0, _react.createElement)(_components.GradientPicker, {
      value: gradientValue,
      onChange: canChooseAColor ? newGradient => {
        onGradientChange(newGradient);
        onColorChange();
      } : onGradientChange,
      gradients,
      disableCustomGradients,
      __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar,
      clearable: clearable,
      headingLevel: headingLevel
    })
  };
  const renderPanelType = type => (0, _react.createElement)("div", {
    className: "block-editor-color-gradient-control__panel"
  }, tabPanels[type]);

  // Unlocking `Tabs` too early causes the `unlock` method to receive an empty
  // object, due to circular dependencies.
  // See https://github.com/WordPress/gutenberg/issues/52692
  const {
    Tabs
  } = (0, _lockUnlock.unlock)(_components.privateApis);
  return (0, _react.createElement)(_components.BaseControl, {
    __nextHasNoMarginBottom: true,
    className: (0, _classnames.default)('block-editor-color-gradient-control', className)
  }, (0, _react.createElement)("fieldset", {
    className: "block-editor-color-gradient-control__fieldset"
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: 1
  }, showTitle && (0, _react.createElement)("legend", null, (0, _react.createElement)("div", {
    className: "block-editor-color-gradient-control__color-indicator"
  }, (0, _react.createElement)(_components.BaseControl.VisualLabel, null, label))), canChooseAColor && canChooseAGradient && (0, _react.createElement)("div", null, (0, _react.createElement)(Tabs, {
    defaultTabId: gradientValue ? TAB_IDS.gradient : !!canChooseAColor && TAB_IDS.color
  }, (0, _react.createElement)(Tabs.TabList, null, (0, _react.createElement)(Tabs.Tab, {
    tabId: TAB_IDS.color
  }, (0, _i18n.__)('Solid')), (0, _react.createElement)(Tabs.Tab, {
    tabId: TAB_IDS.gradient
  }, (0, _i18n.__)('Gradient'))), (0, _react.createElement)(Tabs.TabPanel, {
    tabId: TAB_IDS.color,
    className: 'block-editor-color-gradient-control__panel',
    focusable: false
  }, tabPanels.color), (0, _react.createElement)(Tabs.TabPanel, {
    tabId: TAB_IDS.gradient,
    className: 'block-editor-color-gradient-control__panel',
    focusable: false
  }, tabPanels.gradient))), !canChooseAGradient && renderPanelType(TAB_IDS.color), !canChooseAColor && renderPanelType(TAB_IDS.gradient))));
}
function ColorGradientControlSelect(props) {
  const [colors, gradients, customColors, customGradients] = (0, _useSettings.useSettings)('color.palette', 'color.gradients', 'color.custom', 'color.customGradient');
  return (0, _react.createElement)(ColorGradientControlInner, {
    colors: colors,
    gradients: gradients,
    disableCustomColors: !customColors,
    disableCustomGradients: !customGradients,
    ...props
  });
}
function ColorGradientControl(props) {
  if (colorsAndGradientKeys.every(key => props.hasOwnProperty(key))) {
    return (0, _react.createElement)(ColorGradientControlInner, {
      ...props
    });
  }
  return (0, _react.createElement)(ColorGradientControlSelect, {
    ...props
  });
}
var _default = exports.default = ColorGradientControl;
//# sourceMappingURL=control.js.map