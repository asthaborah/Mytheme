"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeConfig = exports.store = void 0;
var _data = require("@wordpress/data");
var _reducer = _interopRequireDefault(require("./reducer"));
var selectors = _interopRequireWildcard(require("./selectors"));
var privateActions = _interopRequireWildcard(require("./private-actions"));
var privateSelectors = _interopRequireWildcard(require("./private-selectors"));
var actions = _interopRequireWildcard(require("./actions"));
var _constants = require("./constants");
var _lockUnlock = require("../lock-unlock");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Block editor data store configuration.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#registerStore
 */
const storeConfig = exports.storeConfig = {
  reducer: _reducer.default,
  selectors,
  actions
};

/**
 * Store definition for the block editor namespace.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore
 */
const store = exports.store = (0, _data.createReduxStore)(_constants.STORE_NAME, {
  ...storeConfig,
  persist: ['preferences']
});

// We will be able to use the `register` function once we switch
// the "preferences" persistence to use the new preferences package.
const registeredStore = (0, _data.registerStore)(_constants.STORE_NAME, {
  ...storeConfig,
  persist: ['preferences']
});
(0, _lockUnlock.unlock)(registeredStore).registerPrivateActions(privateActions);
(0, _lockUnlock.unlock)(registeredStore).registerPrivateSelectors(privateSelectors);

// TODO: Remove once we switch to the `register` function (see above).
//
// Until then, private functions also need to be attached to the original
// `store` descriptor in order to avoid unit tests failing, which could happen
// when tests create new registries in which they register stores.
//
// @see https://github.com/WordPress/gutenberg/pull/51145#discussion_r1239999590
(0, _lockUnlock.unlock)(store).registerPrivateActions(privateActions);
(0, _lockUnlock.unlock)(store).registerPrivateSelectors(privateSelectors);
//# sourceMappingURL=index.js.map