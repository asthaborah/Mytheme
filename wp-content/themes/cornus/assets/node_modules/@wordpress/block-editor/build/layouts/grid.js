"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _utils = require("./utils");
var _gap = require("../hooks/gap");
var _utils2 = require("../hooks/utils");
var _definitions = require("./definitions");
var _gridVisualizer = require("../components/grid-visualizer");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const RANGE_CONTROL_MAX_VALUES = {
  px: 600,
  '%': 100,
  vw: 100,
  vh: 100,
  em: 38,
  rem: 38,
  svw: 100,
  lvw: 100,
  dvw: 100,
  svh: 100,
  lvh: 100,
  dvh: 100,
  vi: 100,
  svi: 100,
  lvi: 100,
  dvi: 100,
  vb: 100,
  svb: 100,
  lvb: 100,
  dvb: 100,
  vmin: 100,
  svmin: 100,
  lvmin: 100,
  dvmin: 100,
  vmax: 100,
  svmax: 100,
  lvmax: 100,
  dvmax: 100
};
const units = [{
  value: 'px',
  label: 'px',
  default: 0
}, {
  value: 'rem',
  label: 'rem',
  default: 0
}, {
  value: 'em',
  label: 'em',
  default: 0
}];
var _default = exports.default = {
  name: 'grid',
  label: (0, _i18n.__)('Grid'),
  inspectorControls: function GridLayoutInspectorControls({
    layout = {},
    onChange,
    clientId
  }) {
    return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(GridLayoutTypeControl, {
      layout: layout,
      onChange: onChange
    }), layout?.columnCount ? (0, _react.createElement)(GridLayoutColumnsControl, {
      layout: layout,
      onChange: onChange
    }) : (0, _react.createElement)(GridLayoutMinimumWidthControl, {
      layout: layout,
      onChange: onChange
    }), window.__experimentalEnableGridInteractivity && (0, _react.createElement)(_gridVisualizer.GridVisualizer, {
      clientId: clientId
    }));
  },
  toolBarControls: function GridLayoutToolbarControls() {
    return null;
  },
  getLayoutStyle: function getLayoutStyle({
    selector,
    layout,
    style,
    blockName,
    hasBlockGapSupport,
    layoutDefinitions = _definitions.LAYOUT_DEFINITIONS
  }) {
    const {
      minimumColumnWidth = '12rem',
      columnCount = null
    } = layout;

    // If a block's block.json skips serialization for spacing or spacing.blockGap,
    // don't apply the user-defined value to the styles.
    const blockGapValue = style?.spacing?.blockGap && !(0, _utils2.shouldSkipSerialization)(blockName, 'spacing', 'blockGap') ? (0, _gap.getGapCSSValue)(style?.spacing?.blockGap, '0.5em') : undefined;
    let output = '';
    const rules = [];
    if (columnCount) {
      rules.push(`grid-template-columns: repeat(${columnCount}, minmax(0, 1fr))`);
    } else if (minimumColumnWidth) {
      rules.push(`grid-template-columns: repeat(auto-fill, minmax(min(${minimumColumnWidth}, 100%), 1fr))`, `container-type: inline-size`);
    }
    if (rules.length) {
      // Reason to disable: the extra line breaks added by prettier mess with the unit tests.
      // eslint-disable-next-line prettier/prettier
      output = `${(0, _utils.appendSelectors)(selector)} { ${rules.join('; ')}; }`;
    }

    // Output blockGap styles based on rules contained in layout definitions in theme.json.
    if (hasBlockGapSupport && blockGapValue) {
      output += (0, _utils.getBlockGapCSS)(selector, layoutDefinitions, 'grid', blockGapValue);
    }
    return output;
  },
  getOrientation() {
    return 'horizontal';
  },
  getAlignments() {
    return [];
  }
}; // Enables setting minimum width of grid items.
function GridLayoutMinimumWidthControl({
  layout,
  onChange
}) {
  const {
    minimumColumnWidth: value = '12rem'
  } = layout;
  const [quantity, unit] = (0, _components.__experimentalParseQuantityAndUnitFromRawValue)(value);
  const handleSliderChange = next => {
    onChange({
      ...layout,
      minimumColumnWidth: [next, unit].join('')
    });
  };

  // Mostly copied from HeightControl.
  const handleUnitChange = newUnit => {
    // Attempt to smooth over differences between currentUnit and newUnit.
    // This should slightly improve the experience of switching between unit types.
    let newValue;
    if (['em', 'rem'].includes(newUnit) && unit === 'px') {
      // Convert pixel value to an approximate of the new unit, assuming a root size of 16px.
      newValue = (quantity / 16).toFixed(2) + newUnit;
    } else if (['em', 'rem'].includes(unit) && newUnit === 'px') {
      // Convert to pixel value assuming a root size of 16px.
      newValue = Math.round(quantity * 16) + newUnit;
    }
    onChange({
      ...layout,
      minimumColumnWidth: newValue
    });
  };
  return (0, _react.createElement)("fieldset", null, (0, _react.createElement)(_components.BaseControl.VisualLabel, {
    as: "legend"
  }, (0, _i18n.__)('Minimum column width')), (0, _react.createElement)(_components.Flex, {
    gap: 4
  }, (0, _react.createElement)(_components.FlexItem, {
    isBlock: true
  }, (0, _react.createElement)(_components.__experimentalUnitControl, {
    size: '__unstable-large',
    onChange: newValue => {
      onChange({
        ...layout,
        minimumColumnWidth: newValue
      });
    },
    onUnitChange: handleUnitChange,
    value: value,
    units: units,
    min: 0,
    label: (0, _i18n.__)('Minimum column width'),
    hideLabelFromVision: true
  })), (0, _react.createElement)(_components.FlexItem, {
    isBlock: true
  }, (0, _react.createElement)(_components.RangeControl, {
    onChange: handleSliderChange,
    value: quantity,
    min: 0,
    max: RANGE_CONTROL_MAX_VALUES[unit] || 600,
    withInputField: false,
    label: (0, _i18n.__)('Minimum column width'),
    hideLabelFromVision: true
  }))));
}

// Enables setting number of grid columns
function GridLayoutColumnsControl({
  layout,
  onChange
}) {
  const {
    columnCount = 3
  } = layout;
  return (0, _react.createElement)("fieldset", null, (0, _react.createElement)(_components.BaseControl.VisualLabel, {
    as: "legend"
  }, (0, _i18n.__)('Columns')), (0, _react.createElement)(_components.Flex, {
    gap: 4
  }, (0, _react.createElement)(_components.FlexItem, {
    isBlock: true
  }, (0, _react.createElement)(_components.__experimentalNumberControl, {
    size: '__unstable-large',
    onChange: value => {
      /**
       * If the input is cleared, avoid switching
       * back to "Auto" by setting a value of "1".
       */
      const validValue = value !== '' ? value : '1';
      onChange({
        ...layout,
        columnCount: validValue
      });
    },
    value: columnCount,
    min: 1,
    label: (0, _i18n.__)('Columns'),
    hideLabelFromVision: true
  })), (0, _react.createElement)(_components.FlexItem, {
    isBlock: true
  }, (0, _react.createElement)(_components.RangeControl, {
    value: parseInt(columnCount, 10) // RangeControl can't deal with strings.
    ,
    onChange: value => onChange({
      ...layout,
      columnCount: value
    }),
    min: 1,
    max: 16,
    withInputField: false,
    label: (0, _i18n.__)('Columns'),
    hideLabelFromVision: true
  }))));
}

// Enables switching between grid types
function GridLayoutTypeControl({
  layout,
  onChange
}) {
  const {
    columnCount,
    minimumColumnWidth
  } = layout;

  /**
   * When switching, temporarily save any custom values set on the
   * previous type so we can switch back without loss.
   */
  const [tempColumnCount, setTempColumnCount] = (0, _element.useState)(columnCount || 3);
  const [tempMinimumColumnWidth, setTempMinimumColumnWidth] = (0, _element.useState)(minimumColumnWidth || '12rem');
  const isManual = !!columnCount ? 'manual' : 'auto';
  const onChangeType = value => {
    if (value === 'manual') {
      setTempMinimumColumnWidth(minimumColumnWidth || '12rem');
    } else {
      setTempColumnCount(columnCount || 3);
    }
    onChange({
      ...layout,
      columnCount: value === 'manual' ? tempColumnCount : null,
      minimumColumnWidth: value === 'auto' ? tempMinimumColumnWidth : null
    });
  };
  return (0, _react.createElement)(_components.__experimentalToggleGroupControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Type'),
    value: isManual,
    onChange: onChangeType,
    isBlock: true
  }, (0, _react.createElement)(_components.__experimentalToggleGroupControlOption, {
    key: 'auto',
    value: "auto",
    label: (0, _i18n.__)('Auto')
  }), (0, _react.createElement)(_components.__experimentalToggleGroupControlOption, {
    key: 'manual',
    value: "manual",
    label: (0, _i18n.__)('Manual')
  }));
}
//# sourceMappingURL=grid.js.map