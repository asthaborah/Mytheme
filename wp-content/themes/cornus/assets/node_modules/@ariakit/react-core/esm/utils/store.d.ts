import type { Store as CoreStore, State, StoreState } from "@ariakit/core/utils/store";
import type { PickByValue, SetState } from "@ariakit/core/utils/types";
type UseState<S> = {
    /**
     * Re-renders the component when state changes and returns the current state.
     * @example
     * const state = store.useState();
     */
    (): S;
    /**
     * Re-renders the component when the state changes and returns the current
     * state given the passed key. Changes on other keys will not trigger a
     * re-render.
     * @param key The state key.
     * @example
     * const foo = store.useState("foo");
     */
    <K extends keyof S>(key: K): S[K];
    /**
     * Re-renders the component when the state changes given the return value of
     * the selector function. The selector should return a stable value that will
     * be compared to the previous value. Returns the value returned by the
     * selector function.
     * @param selector The selector function.
     * @example
     * const foo = store.useState((state) => state.foo);
     */
    <V>(selector: (state: S) => V): V;
};
type StateKey<T = CoreStore> = keyof StoreState<T>;
export declare function useStoreState<T extends CoreStore>(store: T): StoreState<T>;
export declare function useStoreState<T extends CoreStore>(store: T | null | undefined): StoreState<T> | undefined;
export declare function useStoreState<T extends CoreStore, K extends StateKey<T>>(store: T, key: K): StoreState<T>[K];
export declare function useStoreState<T extends CoreStore, K extends StateKey<T>>(store: T | null | undefined, key: K): StoreState<T>[K] | undefined;
export declare function useStoreState<T extends CoreStore, V>(store: T, selector: (state: StoreState<T>) => V): V;
export declare function useStoreState<T extends CoreStore, V>(store: T | null | undefined, selector: (state?: StoreState<T>) => V): V;
/**
 * Synchronizes the store with the props, including parent store props.
 * @param store The store to synchronize.
 * @param props The props to synchronize with.
 * @param key The key of the value prop.
 * @param setKey The key of the setValue prop.
 */
export declare function useStoreProps<S extends State, P extends Partial<S>, K extends keyof S, SK extends keyof PickByValue<P, SetState<P[K]>>>(store: CoreStore<S>, props: P, key: K, setKey?: SK): void;
/**
 * Creates a React store from a core store object and returns a tuple with the
 * store and a function to update the store.
 * @param createStore A function that receives the props and returns a core
 * store object.
 * @param props The props to pass to the createStore function.
 */
export declare function useStore<T extends CoreStore, P>(createStore: (props: P) => T, props: P): readonly [T & {
    useState: UseState<StoreState<T>>;
}, () => void];
export type Store<T extends CoreStore = CoreStore> = T & {
    /**
     * Re-renders the component when the state changes and returns the current
     * state.
     */
    useState: UseState<StoreState<T>>;
};
export {};
