"use client";
import {
  useCompositeTypeahead
} from "./346FK57L.js";
import {
  SelectScopedContextProvider,
  useSelectProviderContext
} from "./5HVNGX6D.js";
import {
  useComposite
} from "./7QTPYGNZ.js";
import {
  isHidden
} from "./CLE7NTOY.js";
import {
  createComponent,
  createElement,
  createHook
} from "./3ORBWXWF.js";
import {
  useAttribute,
  useBooleanEvent,
  useEvent,
  useId,
  useMergeRefs,
  useWrapElement
} from "./6O5OEQGF.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./4R3V3JGP.js";

// src/select/select-list.tsx
import { useEffect, useRef, useState } from "react";
import { isSelfTarget } from "@ariakit/core/utils/events";
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useSelectList = createHook(
  (_a) => {
    var _b = _a, {
      store,
      resetOnEscape = true,
      hideOnEnter = true,
      focusOnMove = true,
      composite,
      alwaysVisible
    } = _b, props = __objRest(_b, [
      "store",
      "resetOnEscape",
      "hideOnEnter",
      "focusOnMove",
      "composite",
      "alwaysVisible"
    ]);
    const context = useSelectProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "SelectList must receive a `store` prop or be wrapped in a SelectProvider component."
    );
    const ref = useRef(null);
    const id = useId(props.id);
    const value = store.useState("value");
    const multiSelectable = Array.isArray(value);
    const [defaultValue, setDefaultValue] = useState(value);
    const mounted = store.useState("mounted");
    useEffect(() => {
      if (mounted)
        return;
      setDefaultValue(value);
    }, [mounted, value]);
    resetOnEscape = resetOnEscape && !multiSelectable;
    const onKeyDownProp = props.onKeyDown;
    const resetOnEscapeProp = useBooleanEvent(resetOnEscape);
    const hideOnEnterProp = useBooleanEvent(hideOnEnter);
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.key === "Escape" && resetOnEscapeProp(event)) {
        store == null ? void 0 : store.setValue(defaultValue);
      }
      if (event.key === " " || event.key === "Enter") {
        if (isSelfTarget(event) && hideOnEnterProp(event)) {
          event.preventDefault();
          store == null ? void 0 : store.hide();
        }
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(SelectScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const labelId = store.useState((state) => {
      var _a2;
      return (_a2 = state.labelElement) == null ? void 0 : _a2.id;
    });
    const hasCombobox = !!store.combobox;
    composite = composite != null ? composite : !hasCombobox;
    if (composite) {
      props = __spreadValues({ role: "listbox" }, props);
    }
    const role = useAttribute(ref, "role", props.role);
    const isCompositeRole = role === "listbox" || role === "menu" || role === "tree" || role === "grid";
    const ariaMultiSelectable = composite || isCompositeRole ? multiSelectable || void 0 : void 0;
    const hidden = isHidden(mounted, props.hidden, alwaysVisible);
    const style = hidden ? __spreadProps(__spreadValues({}, props.style), { display: "none" }) : props.style;
    props = __spreadProps(__spreadValues({
      id,
      "aria-labelledby": labelId,
      "aria-multiselectable": ariaMultiSelectable,
      hidden
    }, props), {
      ref: useMergeRefs(id ? store.setContentElement : null, ref, props.ref),
      style,
      onKeyDown
    });
    props = useComposite(__spreadProps(__spreadValues({ store }, props), { composite }));
    props = useCompositeTypeahead(__spreadValues({ store, typeahead: !hasCombobox }, props));
    return props;
  }
);
var SelectList = createComponent((props) => {
  const htmlProps = useSelectList(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  SelectList.displayName = "SelectList";
}

export {
  useSelectList,
  SelectList
};
