{"version":3,"names":["_element","require","_data","_richText","formatTypesSelector","select","richTextStore","getFormatTypes","interactiveContentTags","Set","prefixSelectKeys","selected","prefix","Object","fromEntries","entries","map","key","value","getPrefixedSelectKeys","keys","filter","startsWith","reduce","accumulator","slice","length","useFormatTypes","clientId","identifier","withoutInteractiveFormatting","allowedFormats","allFormatTypes","useSelect","formatTypes","useMemo","name","interactive","tagName","includes","has","keyedSelected","type","__experimentalGetPropsForEditableTreePreparation","richTextIdentifier","blockClientId","dispatch","useDispatch","prepareHandlers","valueHandlers","changeHandlers","dependencies","push","forEach","__experimentalCreatePrepareEditableTree","handler","__experimentalCreateOnChangeEditableValue","dispatchers","__experimentalGetPropsForEditableTreeChangeHandler"],"sources":["@wordpress/block-editor/src/components/rich-text/use-format-types.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as richTextStore } from '@wordpress/rich-text';\n\nfunction formatTypesSelector( select ) {\n\treturn select( richTextStore ).getFormatTypes();\n}\n\n/**\n * Set of all interactive content tags.\n *\n * @see https://html.spec.whatwg.org/multipage/dom.html#interactive-content\n */\nconst interactiveContentTags = new Set( [\n\t'a',\n\t'audio',\n\t'button',\n\t'details',\n\t'embed',\n\t'iframe',\n\t'input',\n\t'label',\n\t'select',\n\t'textarea',\n\t'video',\n] );\n\nfunction prefixSelectKeys( selected, prefix ) {\n\tif ( typeof selected !== 'object' ) return { [ prefix ]: selected };\n\treturn Object.fromEntries(\n\t\tObject.entries( selected ).map( ( [ key, value ] ) => [\n\t\t\t`${ prefix }.${ key }`,\n\t\t\tvalue,\n\t\t] )\n\t);\n}\n\nfunction getPrefixedSelectKeys( selected, prefix ) {\n\tif ( selected[ prefix ] ) return selected[ prefix ];\n\treturn Object.keys( selected )\n\t\t.filter( ( key ) => key.startsWith( prefix + '.' ) )\n\t\t.reduce( ( accumulator, key ) => {\n\t\t\taccumulator[ key.slice( prefix.length + 1 ) ] = selected[ key ];\n\t\t\treturn accumulator;\n\t\t}, {} );\n}\n\n/**\n * This hook provides RichText with the `formatTypes` and its derived props from\n * experimental format type settings.\n *\n * @param {Object}  $0                              Options\n * @param {string}  $0.clientId                     Block client ID.\n * @param {string}  $0.identifier                   Block attribute.\n * @param {boolean} $0.withoutInteractiveFormatting Whether to clean the interactive formattings or not.\n * @param {Array}   $0.allowedFormats               Allowed formats\n */\nexport function useFormatTypes( {\n\tclientId,\n\tidentifier,\n\twithoutInteractiveFormatting,\n\tallowedFormats,\n} ) {\n\tconst allFormatTypes = useSelect( formatTypesSelector, [] );\n\tconst formatTypes = useMemo( () => {\n\t\treturn allFormatTypes.filter( ( { name, interactive, tagName } ) => {\n\t\t\tif ( allowedFormats && ! allowedFormats.includes( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\twithoutInteractiveFormatting &&\n\t\t\t\t( interactive || interactiveContentTags.has( tagName ) )\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} );\n\t}, [ allFormatTypes, allowedFormats, withoutInteractiveFormatting ] );\n\tconst keyedSelected = useSelect(\n\t\t( select ) =>\n\t\t\tformatTypes.reduce( ( accumulator, type ) => {\n\t\t\t\tif ( ! type.__experimentalGetPropsForEditableTreePreparation ) {\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t...prefixSelectKeys(\n\t\t\t\t\t\ttype.__experimentalGetPropsForEditableTreePreparation(\n\t\t\t\t\t\t\tselect,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype.name\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}, {} ),\n\t\t[ formatTypes, clientId, identifier ]\n\t);\n\tconst dispatch = useDispatch();\n\tconst prepareHandlers = [];\n\tconst valueHandlers = [];\n\tconst changeHandlers = [];\n\tconst dependencies = [];\n\n\tfor ( const key in keyedSelected ) {\n\t\tdependencies.push( keyedSelected[ key ] );\n\t}\n\n\tformatTypes.forEach( ( type ) => {\n\t\tif ( type.__experimentalCreatePrepareEditableTree ) {\n\t\t\tconst handler = type.__experimentalCreatePrepareEditableTree(\n\t\t\t\tgetPrefixedSelectKeys( keyedSelected, type.name ),\n\t\t\t\t{\n\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\t\tvalueHandlers.push( handler );\n\t\t\t} else {\n\t\t\t\tprepareHandlers.push( handler );\n\t\t\t}\n\t\t}\n\n\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\tlet dispatchers = {};\n\n\t\t\tif ( type.__experimentalGetPropsForEditableTreeChangeHandler ) {\n\t\t\t\tdispatchers =\n\t\t\t\t\ttype.__experimentalGetPropsForEditableTreeChangeHandler(\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst selected = getPrefixedSelectKeys( keyedSelected, type.name );\n\t\t\tchangeHandlers.push(\n\t\t\t\ttype.__experimentalCreateOnChangeEditableValue(\n\t\t\t\t\t{\n\t\t\t\t\t\t...( typeof selected === 'object' ? selected : {} ),\n\t\t\t\t\t\t...dispatchers,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t} );\n\n\treturn {\n\t\tformatTypes,\n\t\tprepareHandlers,\n\t\tvalueHandlers,\n\t\tchangeHandlers,\n\t\tdependencies,\n\t};\n}\n"],"mappings":"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"}