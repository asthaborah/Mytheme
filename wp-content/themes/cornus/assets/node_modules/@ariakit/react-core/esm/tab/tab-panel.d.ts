import type { CollectionItemOptions } from "../collection/collection-item.js";
import type { DisclosureContentOptions } from "../disclosure/disclosure-content.jsx";
import type { FocusableOptions } from "../focusable/focusable.js";
import type { As, Props } from "../utils/types.js";
import type { TabStore } from "./tab-store.js";
/**
 * Returns props to create a `TabPanel` component.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const store = useTabStore();
 * const props = useTabPanel({ store });
 * <TabList store={store}>
 *   <Tab>Tab 1</Tab>
 * </TabList>
 * <Role {...props}>Panel 1</Role>
 * ```
 */
export declare const useTabPanel: import("../utils/types.js").Hook<TabPanelOptions<"div">>;
/**
 * Renders a tab panel element that's controlled by a
 * [`Tab`](https://ariakit.org/reference/tab) component.
 *
 * If the [`tabId`](https://ariakit.org/reference/tab-panel#tabid) prop isn't
 * provided, the tab panel will automatically associate with a
 * [`Tab`](https://ariakit.org/reference/tab) based on its position in the DOM.
 * Alternatively, you can render a single tab panel with a dynamic
 * [`tabId`](https://ariakit.org/reference/tab-panel#tabid) value pointing to
 * the selected tab.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx {6,7}
 * <TabProvider>
 *   <TabList>
 *     <Tab>Tab 1</Tab>
 *     <Tab>Tab 2</Tab>
 *   </TabList>
 *   <TabPanel>Panel 1</TabPanel>
 *   <TabPanel>Panel 2</TabPanel>
 * </TabProvider>
 * ```
 */
export declare const TabPanel: import("../utils/types.js").Component<TabPanelOptions<"div">>;
export interface TabPanelOptions<T extends As = "div"> extends FocusableOptions<T>, CollectionItemOptions<T>, Omit<DisclosureContentOptions<T>, "store" | "unmountOnHide"> {
    /**
     * Object returned by the
     * [`useTabStore`](https://ariakit.org/reference/use-tab-store) hook. If not
     * provided, the closest
     * [`TabProvider`](https://ariakit.org/reference/tab-provider) component's
     * context will be used.
     */
    store?: TabStore;
    /**
     * The [`id`](https://ariakit.org/reference/tab#id) of the tab controlling
     * this panel. This connection is used to assign the `aria-labelledby`
     * attribute to the tab panel and to determine if the tab panel should be
     * visible.
     *
     * This link is automatically established by matching the order of
     * [`Tab`](https://ariakit.org/reference/tab) and
     * [`TabPanel`](https://ariakit.org/reference/tab-panel) elements in the DOM.
     * If you're rendering a single tab panel, this can be set to a dynamic value
     * that refers to the selected tab.
     *
     * Live examples:
     * - [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)
     * - [Tab with React Router](https://ariakit.org/examples/tab-react-router)
     */
    tabId?: string | null;
}
export type TabPanelProps<T extends As = "div"> = Props<TabPanelOptions<T>>;
