"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _TGTVGYEZcjs = require('../__chunks/TGTVGYEZ.cjs');


var _M5JJ43ATcjs = require('../__chunks/M5JJ43AT.cjs');
require('../__chunks/3W6FH6JK.cjs');
require('../__chunks/UVBBMANL.cjs');
require('../__chunks/F2A2ZQDB.cjs');
require('../__chunks/S6UU7NA4.cjs');
require('../__chunks/Z3GCTNW4.cjs');
require('../__chunks/75KXQZJX.cjs');




var _RNZNGEL4cjs = require('../__chunks/RNZNGEL4.cjs');


var _EO6LS72Hcjs = require('../__chunks/EO6LS72H.cjs');
require('../__chunks/CJDHQUBR.cjs');




var _AV6KTKLEcjs = require('../__chunks/AV6KTKLE.cjs');

// src/tooltip/tooltip-anchor.ts
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var _store = require('@ariakit/core/utils/store');
var globalStore = _store.createStore.call(void 0, {
  activeStore: null
});
var useTooltipAnchor = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, showOnHover = true } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, ["store", "showOnHover"]);
    const context = _M5JJ43ATcjs.useTooltipProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "TooltipAnchor must receive a `store` prop or be wrapped in a TooltipProvider component."
    );
    const canShowOnHoverRef = _react.useRef.call(void 0, false);
    _react.useEffect.call(void 0, () => {
      return _store.sync.call(void 0, store, ["mounted"], (state) => {
        if (state.mounted)
          return;
        canShowOnHoverRef.current = false;
      });
    }, [store]);
    _react.useEffect.call(void 0, () => {
      return _store.sync.call(void 0, store, ["mounted", "skipTimeout"], (state) => {
        if (!store)
          return;
        if (state.mounted) {
          const { activeStore } = globalStore.getState();
          if (activeStore !== store) {
            activeStore == null ? void 0 : activeStore.hide();
          }
          return globalStore.setState("activeStore", store);
        }
        const id = setTimeout(() => {
          const { activeStore } = globalStore.getState();
          if (activeStore !== store)
            return;
          globalStore.setState("activeStore", null);
        }, state.skipTimeout);
        return () => clearTimeout(id);
      });
    }, [store]);
    const onMouseEnterProp = props.onMouseEnter;
    const onMouseEnter = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
      canShowOnHoverRef.current = true;
    });
    const onFocusVisibleProp = props.onFocusVisible;
    const onFocusVisible = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onFocusVisibleProp == null ? void 0 : onFocusVisibleProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setAnchorElement(event.currentTarget);
      store == null ? void 0 : store.show();
    });
    const onBlurProp = props.onBlur;
    const onBlur = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      const { activeStore } = globalStore.getState();
      if (activeStore === store) {
        globalStore.setState("activeStore", null);
      }
    });
    const type = store.useState("type");
    const contentId = store.useState((state) => {
      var _a2;
      return (_a2 = state.contentElement) == null ? void 0 : _a2.id;
    });
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      "aria-labelledby": type === "label" ? contentId : void 0,
      "aria-describedby": type === "description" ? contentId : void 0
    }, props), {
      onMouseEnter,
      onFocusVisible,
      onBlur
    });
    props = _TGTVGYEZcjs.useHovercardAnchor.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      store,
      showOnHover: (event) => {
        if (!canShowOnHoverRef.current)
          return false;
        if (_misc.isFalsyBooleanCallback.call(void 0, showOnHover, event))
          return false;
        const { activeStore } = globalStore.getState();
        if (!activeStore)
          return true;
        store == null ? void 0 : store.show();
        return false;
      }
    }, props));
    return props;
  }
);
var TooltipAnchor = _RNZNGEL4cjs.createComponent.call(void 0, (props) => {
  const htmlProps = useTooltipAnchor(props);
  return _RNZNGEL4cjs.createElement.call(void 0, "div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  TooltipAnchor.displayName = "TooltipAnchor";
}



exports.TooltipAnchor = TooltipAnchor; exports.useTooltipAnchor = useTooltipAnchor;
