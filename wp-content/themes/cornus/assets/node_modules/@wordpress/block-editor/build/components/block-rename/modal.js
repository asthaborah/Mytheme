"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockRenameModal;
var _react = require("react");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _a11y = require("@wordpress/a11y");
var _isEmptyString = _interopRequireDefault(require("./is-empty-string"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function BlockRenameModal({
  blockName,
  originalBlockName,
  onClose,
  onSave
}) {
  const [editedBlockName, setEditedBlockName] = (0, _element.useState)(blockName);
  const nameHasChanged = editedBlockName !== blockName;
  const nameIsOriginal = editedBlockName === originalBlockName;
  const nameIsEmpty = (0, _isEmptyString.default)(editedBlockName);
  const isNameValid = nameHasChanged || nameIsOriginal;
  const autoSelectInputText = event => event.target.select();
  const dialogDescription = (0, _compose.useInstanceId)(BlockRenameModal, `block-editor-rename-modal__description`);
  const handleSubmit = () => {
    const message = nameIsOriginal || nameIsEmpty ? (0, _i18n.sprintf)( /* translators: %s: new name/label for the block */
    (0, _i18n.__)('Block name reset to: "%s".'), editedBlockName) : (0, _i18n.sprintf)( /* translators: %s: new name/label for the block */
    (0, _i18n.__)('Block name changed to: "%s".'), editedBlockName);

    // Must be assertive to immediately announce change.
    (0, _a11y.speak)(message, 'assertive');
    onSave(editedBlockName);

    // Immediate close avoids ability to hit save multiple times.
    onClose();
  };
  return (0, _react.createElement)(_components.Modal, {
    title: (0, _i18n.__)('Rename'),
    onRequestClose: onClose,
    overlayClassName: "block-editor-block-rename-modal",
    aria: {
      describedby: dialogDescription
    },
    focusOnMount: "firstContentElement"
  }, (0, _react.createElement)("p", {
    id: dialogDescription
  }, (0, _i18n.__)('Enter a custom name for this block.')), (0, _react.createElement)("form", {
    onSubmit: e => {
      e.preventDefault();
      if (!isNameValid) {
        return;
      }
      handleSubmit();
    }
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: "3"
  }, (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    value: editedBlockName,
    label: (0, _i18n.__)('Block name'),
    hideLabelFromVision: true,
    placeholder: originalBlockName,
    onChange: setEditedBlockName,
    onFocus: autoSelectInputText
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    justify: "right"
  }, (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: onClose
  }, (0, _i18n.__)('Cancel')), (0, _react.createElement)(_components.Button, {
    __next40pxDefaultSize: true,
    "aria-disabled": !isNameValid,
    variant: "primary",
    type: "submit"
  }, (0, _i18n.__)('Save'))))));
}
//# sourceMappingURL=modal.js.map