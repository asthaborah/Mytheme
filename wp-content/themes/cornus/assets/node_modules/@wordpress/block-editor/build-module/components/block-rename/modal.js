import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { __experimentalHStack as HStack, __experimentalVStack as VStack, Button, TextControl, Modal } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { __, sprintf } from '@wordpress/i18n';
import { useState } from '@wordpress/element';
import { speak } from '@wordpress/a11y';

/**
 * Internal dependencies
 */
import isEmptyString from './is-empty-string';
export default function BlockRenameModal({
  blockName,
  originalBlockName,
  onClose,
  onSave
}) {
  const [editedBlockName, setEditedBlockName] = useState(blockName);
  const nameHasChanged = editedBlockName !== blockName;
  const nameIsOriginal = editedBlockName === originalBlockName;
  const nameIsEmpty = isEmptyString(editedBlockName);
  const isNameValid = nameHasChanged || nameIsOriginal;
  const autoSelectInputText = event => event.target.select();
  const dialogDescription = useInstanceId(BlockRenameModal, `block-editor-rename-modal__description`);
  const handleSubmit = () => {
    const message = nameIsOriginal || nameIsEmpty ? sprintf( /* translators: %s: new name/label for the block */
    __('Block name reset to: "%s".'), editedBlockName) : sprintf( /* translators: %s: new name/label for the block */
    __('Block name changed to: "%s".'), editedBlockName);

    // Must be assertive to immediately announce change.
    speak(message, 'assertive');
    onSave(editedBlockName);

    // Immediate close avoids ability to hit save multiple times.
    onClose();
  };
  return createElement(Modal, {
    title: __('Rename'),
    onRequestClose: onClose,
    overlayClassName: "block-editor-block-rename-modal",
    aria: {
      describedby: dialogDescription
    },
    focusOnMount: "firstContentElement"
  }, createElement("p", {
    id: dialogDescription
  }, __('Enter a custom name for this block.')), createElement("form", {
    onSubmit: e => {
      e.preventDefault();
      if (!isNameValid) {
        return;
      }
      handleSubmit();
    }
  }, createElement(VStack, {
    spacing: "3"
  }, createElement(TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    value: editedBlockName,
    label: __('Block name'),
    hideLabelFromVision: true,
    placeholder: originalBlockName,
    onChange: setEditedBlockName,
    onFocus: autoSelectInputText
  }), createElement(HStack, {
    justify: "right"
  }, createElement(Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: onClose
  }, __('Cancel')), createElement(Button, {
    __next40pxDefaultSize: true,
    "aria-disabled": !isNameValid,
    variant: "primary",
    type: "submit"
  }, __('Save'))))));
}
//# sourceMappingURL=modal.js.map