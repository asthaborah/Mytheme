"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _blocks = require("@wordpress/blocks");
var _blockEditor = require("@wordpress/block-editor");
var _reactNative = require("react-native");
var _blockTitle = _interopRequireDefault(require("../block-title"));
var _useBlockDisplayInformation = _interopRequireDefault(require("../use-block-display-information"));
var _subdirectoryIcon = _interopRequireDefault(require("./subdirectory-icon"));
var _store = require("../../store");
var _blockSelectionButton = _interopRequireDefault(require("./block-selection-button.scss"));
/**
 * WordPress dependencies
 */

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

const BlockSelectionButton = ({
  clientId,
  rootClientId,
  rootBlockIcon,
  isRTL
}) => {
  const blockInformation = (0, _useBlockDisplayInformation.default)(clientId);
  return (0, _react.createElement)(_reactNative.View, {
    style: [_blockSelectionButton.default.selectionButtonContainer, rootClientId && _blockSelectionButton.default.densedPaddingLeft]
  }, (0, _react.createElement)(_reactNative.TouchableOpacity, {
    style: _blockSelectionButton.default.button,
    onPress: () => {
      /* Open BottomSheet with markup. */
    },
    disabled: true /* Disable temporarily since onPress function is empty. */
  }, rootClientId && rootBlockIcon && [(0, _react.createElement)(_components.Icon, {
    key: "parent-icon",
    size: 24,
    icon: rootBlockIcon.src,
    fill: _blockSelectionButton.default.icon.color
  }), (0, _react.createElement)(_reactNative.View, {
    key: "subdirectory-icon",
    style: _blockSelectionButton.default.arrow
  }, (0, _react.createElement)(_subdirectoryIcon.default, {
    fill: _blockSelectionButton.default.arrow.color,
    isRTL: isRTL
  }))], blockInformation?.icon && (0, _react.createElement)(_blockEditor.BlockIcon, {
    size: 24,
    icon: blockInformation.icon,
    fill: _blockSelectionButton.default.icon.color
  }), (0, _react.createElement)(_reactNative.Text, {
    maxFontSizeMultiplier: 1.25,
    ellipsizeMode: "tail",
    numberOfLines: 1,
    style: _blockSelectionButton.default.selectionButtonTitle
  }, (0, _react.createElement)(_blockTitle.default, {
    clientId: clientId,
    maximumLength: 35
  }))));
};
var _default = exports.default = (0, _compose.compose)([(0, _data.withSelect)((select, {
  clientId
}) => {
  const {
    getBlockRootClientId,
    getBlockName,
    getSettings
  } = select(_store.store);
  const rootClientId = getBlockRootClientId(clientId);
  if (!rootClientId) {
    return {
      clientId
    };
  }
  const rootBlockName = getBlockName(rootClientId);
  const rootBlockType = (0, _blocks.getBlockType)(rootBlockName);
  const rootBlockIcon = rootBlockType ? rootBlockType.icon : {};
  return {
    clientId,
    rootClientId,
    rootBlockIcon,
    isRTL: getSettings().isRTL
  };
})])(BlockSelectionButton);
//# sourceMappingURL=block-selection-button.native.js.map