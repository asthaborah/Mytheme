import type { KeyboardEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CompositeTypeaheadOptions } from "../composite/composite-typeahead.js";
import type { CompositeOptions } from "../composite/composite.js";
import type { DisclosureContentOptions } from "../disclosure/disclosure-content.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectList` component.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelectList({ store });
 * <Role {...props}>
 *   <SelectItem value="Apple" />
 *   <SelectItem value="Orange" />
 * </Role>
 * ```
 */
export declare const useSelectList: import("../utils/types.js").Hook<SelectListOptions<"div">>;
/**
 * Renders a select list element. This is the primitive component used by the
 * [`SelectPopover`](https://ariakit.org/reference/select-popover) component.
 *
 * Unlike [`SelectPopover`](https://ariakit.org/reference/select-popover), this
 * component doesn't render a popover and therefore doesn't automatically focus
 * on items when opened.
 *
 * The `aria-labelledby` prop is set to the
 * [`Select`](https://ariakit.org/reference/select) element's `id` by default.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx {3-6}
 * <SelectProvider>
 *   <Select />
 *   <SelectList>
 *     <SelectItem value="Apple" />
 *     <SelectItem value="Orange" />
 *   </SelectList>
 * </SelectProvider>
 * ```
 */
export declare const SelectList: import("../utils/types.js").Component<SelectListOptions<"div">>;
export interface SelectListOptions<T extends As = "div"> extends CompositeOptions<T>, CompositeTypeaheadOptions<T>, Pick<DisclosureContentOptions, "alwaysVisible"> {
    /**
     * Object returned by the
     * [`useSelectStore`](https://ariakit.org/reference/use-select-store) hook. If
     * not provided, the closest
     * [`SelectProvider`](https://ariakit.org/reference/select-provider)
     * component's context will be used.
     */
    store?: SelectStore;
    /**
     * Whether the select value should be reset to the value before the list got
     * shown when Escape is pressed. This has effect only when
     * [`setValueOnMove`](https://ariakit.org/reference/select-provider#setvalueonmove)
     * is `true`.
     * @default true
     */
    resetOnEscape?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
    /**
     * Whether the [`SelectList`](https://ariakit.org/reference/select-list) or
     * [`SelectPopover`](https://ariakit.org/reference/select-popover) components
     * should be hidden when the user presses Enter or Space while the list
     * element is focused and no item is active.
     * @default true
     */
    hideOnEnter?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
}
export type SelectListProps<T extends As = "div"> = Props<SelectListOptions<T>>;
