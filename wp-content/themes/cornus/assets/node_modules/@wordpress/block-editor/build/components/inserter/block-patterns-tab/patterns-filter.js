"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PatternsFilter = PatternsFilter;
var _react = require("react");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _element = require("@wordpress/element");
var _utils = require("./utils");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const getShouldDisableSyncFilter = sourceFilter => sourceFilter !== 'all';
const getShouldDisableNonUserSources = category => {
  return category.name === _utils.myPatternsCategory.name;
};
function PatternsFilter({
  setPatternSyncFilter,
  setPatternSourceFilter,
  patternSyncFilter,
  patternSourceFilter,
  scrollContainerRef,
  category
}) {
  // If the category is `myPatterns` then we need to set the source filter to `user`, but
  // we do this by deriving from props rather than calling setPatternSourceFilter otherwise
  // the user may be confused when switching to another category if the haven't explicity set
  // this filter themselves.
  const currentPatternSourceFilter = category.name === _utils.myPatternsCategory.name ? _utils.INSERTER_PATTERN_TYPES.user : patternSourceFilter;

  // We need to disable the sync filter option if the source filter is not 'all' or 'user'
  // otherwise applying them will just result in no patterns being shown.
  const shouldDisableSyncFilter = getShouldDisableSyncFilter(currentPatternSourceFilter);

  // We also need to disable the directory and theme source filter options if the category
  // is `myPatterns` otherwise applying them will also just result in no patterns being shown.
  const shouldDisableNonUserSources = getShouldDisableNonUserSources(category);
  const patternSyncMenuOptions = (0, _element.useMemo)(() => [{
    value: 'all',
    label: (0, _i18n._x)('All', 'patterns')
  }, {
    value: _utils.INSERTER_SYNC_TYPES.full,
    label: (0, _i18n._x)('Synced', 'patterns'),
    disabled: shouldDisableSyncFilter
  }, {
    value: _utils.INSERTER_SYNC_TYPES.unsynced,
    label: (0, _i18n._x)('Not synced', 'patterns'),
    disabled: shouldDisableSyncFilter
  }], [shouldDisableSyncFilter]);
  const patternSourceMenuOptions = (0, _element.useMemo)(() => [{
    value: 'all',
    label: (0, _i18n._x)('All', 'patterns'),
    disabled: shouldDisableNonUserSources
  }, {
    value: _utils.INSERTER_PATTERN_TYPES.directory,
    label: (0, _i18n.__)('Pattern Directory'),
    disabled: shouldDisableNonUserSources
  }, {
    value: _utils.INSERTER_PATTERN_TYPES.theme,
    label: (0, _i18n.__)('Theme & Plugins'),
    disabled: shouldDisableNonUserSources
  }, {
    value: _utils.INSERTER_PATTERN_TYPES.user,
    label: (0, _i18n.__)('User')
  }], [shouldDisableNonUserSources]);
  function handleSetSourceFilterChange(newSourceFilter) {
    setPatternSourceFilter(newSourceFilter);
    if (getShouldDisableSyncFilter(newSourceFilter)) {
      setPatternSyncFilter('all');
    }
  }
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.DropdownMenu, {
    popoverProps: {
      placement: 'right-end'
    },
    label: "Filter patterns",
    icon: (0, _react.createElement)(_icons.Icon, {
      icon: (0, _react.createElement)(_components.SVG, {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0, _react.createElement)(_components.Path, {
        d: "M10 17.5H14V16H10V17.5ZM6 6V7.5H18V6H6ZM8 12.5H16V11H8V12.5Z",
        fill: "#1E1E1E"
      }))
    })
  }, () => (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components.MenuGroup, {
    label: (0, _i18n.__)('Source')
  }, (0, _react.createElement)(_components.MenuItemsChoice, {
    choices: patternSourceMenuOptions,
    onSelect: value => {
      handleSetSourceFilterChange(value);
      scrollContainerRef.current?.scrollTo(0, 0);
    },
    value: currentPatternSourceFilter
  })), (0, _react.createElement)(_components.MenuGroup, {
    label: (0, _i18n.__)('Type')
  }, (0, _react.createElement)(_components.MenuItemsChoice, {
    choices: patternSyncMenuOptions,
    onSelect: value => {
      setPatternSyncFilter(value);
      scrollContainerRef.current?.scrollTo(0, 0);
    },
    value: patternSyncFilter
  })), (0, _react.createElement)("div", {
    className: "block-editor-tool-selector__help"
  }, (0, _element.createInterpolateElement)((0, _i18n.__)('Patterns are available from the <Link>WordPress.org Pattern Directory</Link>, bundled in the active theme, or created by users on this site. Only patterns created on this site can be synced.'), {
    Link: (0, _react.createElement)(_components.ExternalLink, {
      href: (0, _i18n.__)('https://wordpress.org/patterns/')
    })
  })))));
}
//# sourceMappingURL=patterns-filter.js.map