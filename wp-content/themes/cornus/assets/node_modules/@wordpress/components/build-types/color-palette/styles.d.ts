/// <reference types="react" />
export declare const ColorHeading: import("@emotion/styled").StyledComponent<Omit<import("../text/types").Props, "color" | "size" | "weight" | "isBlock"> & {
    level?: import("../heading/types").HeadingSize | undefined;
    isBlock?: boolean | undefined;
    color?: import("csstype").Property.Color | undefined;
    weight?: import("csstype").Property.FontWeight | (700 | 900 | 800 | 600 | 400 | 300 | 200 | 100 | 500) | undefined;
} & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "key" | keyof import("react").HTMLAttributes<HTMLHeadingElement>>, "children" | "variant" | "color" | "display" | "letterSpacing" | "lineHeight" | "as" | "align" | "ellipsis" | "weight" | keyof import("react").RefAttributes<any> | "isBlock" | "ellipsizeMode" | "limit" | "numberOfLines" | "adjustLineHeightForInnerControls" | "isDestructive" | "highlightEscape" | "highlightCaseSensitive" | "highlightSanitize" | "optimizeReadabilityFor" | "truncate" | "upperCase" | "highlightWords" | "level"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map