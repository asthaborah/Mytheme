"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridVisualizer = GridVisualizer;
var _react = require("react");
var _element = require("@wordpress/element");
var _useBlockRefs = require("../block-list/use-block-props/use-block-refs");
var _cover = _interopRequireDefault(require("../block-popover/cover"));
var _utils = require("./utils");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function GridVisualizer({
  clientId
}) {
  const blockElement = (0, _useBlockRefs.__unstableUseBlockElement)(clientId);
  if (!blockElement) {
    return null;
  }
  return (0, _react.createElement)(_cover.default, {
    className: "block-editor-grid-visualizer",
    clientId: clientId,
    __unstablePopoverSlot: "block-toolbar"
  }, (0, _react.createElement)(GridVisualizerGrid, {
    blockElement: blockElement
  }));
}
function GridVisualizerGrid({
  blockElement
}) {
  const [gridInfo, setGridInfo] = (0, _element.useState)(() => getGridInfo(blockElement));
  (0, _element.useEffect)(() => {
    const observers = [];
    for (const element of [blockElement, ...blockElement.children]) {
      const observer = new window.ResizeObserver(() => {
        setGridInfo(getGridInfo(blockElement));
      });
      observer.observe(element);
      observers.push(observer);
    }
    return () => {
      for (const observer of observers) {
        observer.disconnect();
      }
    };
  }, [blockElement]);
  return (0, _react.createElement)("div", {
    className: "block-editor-grid-visualizer__grid",
    style: gridInfo.style
  }, Array.from({
    length: gridInfo.numItems
  }, (_, i) => (0, _react.createElement)("div", {
    key: i,
    className: "block-editor-grid-visualizer__item"
  })));
}
function getGridInfo(blockElement) {
  const gridTemplateColumns = (0, _utils.getComputedCSS)(blockElement, 'grid-template-columns');
  const gridTemplateRows = (0, _utils.getComputedCSS)(blockElement, 'grid-template-rows');
  const numColumns = gridTemplateColumns.split(' ').length;
  const numRows = gridTemplateRows.split(' ').length;
  const numItems = numColumns * numRows;
  return {
    numItems,
    style: {
      gridTemplateColumns,
      gridTemplateRows,
      gap: (0, _utils.getComputedCSS)(blockElement, 'gap'),
      padding: (0, _utils.getComputedCSS)(blockElement, 'padding')
    }
  };
}
//# sourceMappingURL=grid-visualizer.js.map