"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _compose = require("@wordpress/compose");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _lockUnlock = require("../../lock-unlock");
var _blockPreview = _interopRequireDefault(require("../block-preview"));
var _inserterDraggableBlocks = _interopRequireDefault(require("../inserter-draggable-blocks"));
var _blockPatternsPaging = _interopRequireDefault(require("../block-patterns-paging"));
var _utils = require("../inserter/block-patterns-tab/utils");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  CompositeV2: Composite,
  CompositeItemV2: CompositeItem,
  useCompositeStoreV2: useCompositeStore
} = (0, _lockUnlock.unlock)(_components.privateApis);
const WithToolTip = ({
  showTooltip,
  title,
  children
}) => {
  if (showTooltip) {
    return (0, _react.createElement)(_components.Tooltip, {
      text: title
    }, children);
  }
  return (0, _react.createElement)(_react.Fragment, null, children);
};
function BlockPattern({
  id,
  isDraggable,
  pattern,
  onClick,
  onHover,
  showTooltip
}) {
  const [isDragging, setIsDragging] = (0, _element.useState)(false);
  const {
    blocks,
    viewportWidth
  } = pattern;
  const instanceId = (0, _compose.useInstanceId)(BlockPattern);
  const descriptionId = `block-editor-block-patterns-list__item-description-${instanceId}`;
  return (0, _react.createElement)(_inserterDraggableBlocks.default, {
    isEnabled: isDraggable,
    blocks: blocks,
    pattern: pattern
  }, ({
    draggable,
    onDragStart,
    onDragEnd
  }) => (0, _react.createElement)("div", {
    className: "block-editor-block-patterns-list__list-item",
    draggable: draggable,
    onDragStart: event => {
      setIsDragging(true);
      if (onDragStart) {
        onHover?.(null);
        onDragStart(event);
      }
    },
    onDragEnd: event => {
      setIsDragging(false);
      if (onDragEnd) {
        onDragEnd(event);
      }
    }
  }, (0, _react.createElement)(WithToolTip, {
    showTooltip: showTooltip && !pattern.type !== _utils.INSERTER_PATTERN_TYPES.user,
    title: pattern.title
  }, (0, _react.createElement)(CompositeItem, {
    render: (0, _react.createElement)("div", {
      role: "option",
      "aria-label": pattern.title,
      "aria-describedby": pattern.description ? descriptionId : undefined,
      className: (0, _classnames.default)('block-editor-block-patterns-list__item', {
        'block-editor-block-patterns-list__list-item-synced': pattern.type === _utils.INSERTER_PATTERN_TYPES.user && !pattern.syncStatus
      })
    }),
    id: id,
    onClick: () => {
      onClick(pattern, blocks);
      onHover?.(null);
    },
    onMouseEnter: () => {
      if (isDragging) {
        return;
      }
      onHover?.(pattern);
    },
    onMouseLeave: () => onHover?.(null)
  }, (0, _react.createElement)(_blockPreview.default, {
    blocks: blocks,
    viewportWidth: viewportWidth
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    className: "block-editor-patterns__pattern-details"
  }, pattern.type === _utils.INSERTER_PATTERN_TYPES.user && !pattern.syncStatus && (0, _react.createElement)("div", {
    className: "block-editor-patterns__pattern-icon-wrapper"
  }, (0, _react.createElement)(_icons.Icon, {
    className: "block-editor-patterns__pattern-icon",
    icon: _icons.symbol
  })), (!showTooltip || pattern.type === _utils.INSERTER_PATTERN_TYPES.user) && (0, _react.createElement)("div", {
    className: "block-editor-block-patterns-list__item-title"
  }, pattern.title)), !!pattern.description && (0, _react.createElement)(_components.VisuallyHidden, {
    id: descriptionId
  }, pattern.description)))));
}
function BlockPatternPlaceholder() {
  return (0, _react.createElement)("div", {
    className: "block-editor-block-patterns-list__item is-placeholder"
  });
}
function BlockPatternsList({
  isDraggable,
  blockPatterns,
  shownPatterns,
  onHover,
  onClickPattern,
  orientation,
  label = (0, _i18n.__)('Block patterns'),
  showTitlesAsTooltip,
  pagingProps
}, ref) {
  const compositeStore = useCompositeStore({
    orientation
  });
  const {
    setActiveId
  } = compositeStore;
  (0, _element.useEffect)(() => {
    // We reset the active composite item whenever the
    // available patterns change, to make sure that
    // focus is put back to the start.
    setActiveId(undefined);
  }, [setActiveId, shownPatterns, blockPatterns]);
  return (0, _react.createElement)(Composite, {
    store: compositeStore,
    role: "listbox",
    className: "block-editor-block-patterns-list",
    "aria-label": label,
    ref: ref
  }, blockPatterns.map(pattern => {
    const isShown = shownPatterns.includes(pattern);
    return isShown ? (0, _react.createElement)(BlockPattern, {
      key: pattern.name,
      id: pattern.name,
      pattern: pattern,
      onClick: onClickPattern,
      onHover: onHover,
      isDraggable: isDraggable,
      showTooltip: showTitlesAsTooltip
    }) : (0, _react.createElement)(BlockPatternPlaceholder, {
      key: pattern.name
    });
  }), pagingProps && (0, _react.createElement)(_blockPatternsPaging.default, {
    ...pagingProps
  }));
}
var _default = exports.default = (0, _element.forwardRef)(BlockPatternsList);
//# sourceMappingURL=index.js.map