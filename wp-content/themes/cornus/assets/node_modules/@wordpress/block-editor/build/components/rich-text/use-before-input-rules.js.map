{"version":3,"names":["_element","require","_compose","_richText","_data","_hooks","_store","wrapSelectionSettings","useBeforeInputRules","props","__unstableMarkLastChangeAsPersistent","__unstableMarkAutomaticChange","useDispatch","blockEditorStore","propsRef","useRef","current","useRefEffect","element","onInput","event","inputType","data","value","onChange","isCollapsed","pair","applyFilters","find","startChar","endChar","start","end","length","newValue","insert","init","key","ownerDocument","defaultView","newEvent","InputEvent","window","queueMicrotask","target","dispatchEvent","preventDefault","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/use-before-input-rules.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { insert, isCollapsed } from '@wordpress/rich-text';\nimport { useDispatch } from '@wordpress/data';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * When typing over a selection, the selection will we wrapped by a matching\n * character pair. The second character is optional, it defaults to the first\n * character.\n *\n * @type {string[]} Array of character pairs.\n */\nconst wrapSelectionSettings = [ '`', '\"', \"'\", '“”', '‘’' ];\n\nexport function useBeforeInputRules( props ) {\n\tconst {\n\t\t__unstableMarkLastChangeAsPersistent,\n\t\t__unstableMarkAutomaticChange,\n\t} = useDispatch( blockEditorStore );\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onInput( event ) {\n\t\t\tconst { inputType, data } = event;\n\t\t\tconst { value, onChange } = propsRef.current;\n\n\t\t\t// Only run the rules when inserting text.\n\t\t\tif ( inputType !== 'insertText' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isCollapsed( value ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pair = applyFilters(\n\t\t\t\t'blockEditor.wrapSelectionSettings',\n\t\t\t\twrapSelectionSettings\n\t\t\t).find(\n\t\t\t\t( [ startChar, endChar ] ) =>\n\t\t\t\t\tstartChar === data || endChar === data\n\t\t\t);\n\n\t\t\tif ( ! pair ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [ startChar, endChar = startChar ] = pair;\n\t\t\tconst start = value.start;\n\t\t\tconst end = value.end + startChar.length;\n\n\t\t\tlet newValue = insert( value, startChar, start, start );\n\t\t\tnewValue = insert( newValue, endChar, end, end );\n\n\t\t\t__unstableMarkLastChangeAsPersistent();\n\t\t\tonChange( newValue );\n\t\t\t__unstableMarkAutomaticChange();\n\n\t\t\tconst init = {};\n\n\t\t\tfor ( const key in event ) {\n\t\t\t\tinit[ key ] = event[ key ];\n\t\t\t}\n\n\t\t\tinit.data = endChar;\n\n\t\t\tconst { ownerDocument } = element;\n\t\t\tconst { defaultView } = ownerDocument;\n\t\t\tconst newEvent = new defaultView.InputEvent( 'input', init );\n\n\t\t\t// Dispatch an `input` event with the new data. This will trigger the\n\t\t\t// input rules.\n\t\t\t// Postpone the `input` to the next event loop tick so that the dispatch\n\t\t\t// doesn't happen synchronously in the middle of `beforeinput` dispatch.\n\t\t\t// This is closer to how native `input` event would be timed, and also\n\t\t\t// makes sure that the `input` event is dispatched only after the `onChange`\n\t\t\t// call few lines above has fully updated the data store state and rerendered\n\t\t\t// all affected components.\n\t\t\twindow.queueMicrotask( () => {\n\t\t\t\tevent.target.dispatchEvent( newEvent );\n\t\t\t} );\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\telement.addEventListener( 'beforeinput', onInput );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'beforeinput', onInput );\n\t\t};\n\t}, [] );\n}\n"],"mappings":"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"}