"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canBindAttribute = canBindAttribute;
exports.canBindBlock = canBindBlock;
var _react = require("react");
var _blocks = require("@wordpress/blocks");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _hooks = require("@wordpress/hooks");
var _richText = require("@wordpress/rich-text");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/** @typedef {import('@wordpress/compose').WPHigherOrderComponent} WPHigherOrderComponent */
/** @typedef {import('@wordpress/blocks').WPBlockSettings} WPBlockSettings */

/**
 * Given a binding of block attributes, returns a higher order component that
 * overrides its `attributes` and `setAttributes` props to sync any changes needed.
 *
 * @return {WPHigherOrderComponent} Higher-order component.
 */

const BLOCK_BINDINGS_ALLOWED_BLOCKS = {
  'core/paragraph': ['content'],
  'core/heading': ['content'],
  'core/image': ['url', 'title', 'alt'],
  'core/button': ['url', 'text', 'linkTarget']
};

/**
 * Based on the given block name,
 * check if it is possible to bind the block.
 *
 * @param {string} blockName - The block name.
 * @return {boolean} Whether it is possible to bind the block to sources.
 */
function canBindBlock(blockName) {
  return blockName in BLOCK_BINDINGS_ALLOWED_BLOCKS;
}

/**
 * Based on the given block name and attribute name,
 * check if it is possible to bind the block attribute.
 *
 * @param {string} blockName     - The block name.
 * @param {string} attributeName - The attribute name.
 * @return {boolean} Whether it is possible to bind the block attribute.
 */
function canBindAttribute(blockName, attributeName) {
  return canBindBlock(blockName) && BLOCK_BINDINGS_ALLOWED_BLOCKS[blockName].includes(attributeName);
}

/**
 * This component is responsible for detecting and
 * propagating data changes from the source to the block.
 *
 * @param {Object}   props                   - The component props.
 * @param {string}   props.attrName          - The attribute name.
 * @param {Object}   props.blockProps        - The block props with bound attribute.
 * @param {Object}   props.source            - Source handler.
 * @param {Object}   props.args              - The arguments to pass to the source.
 * @param {Function} props.onPropValueChange - The function to call when the attribute value changes.
 * @return {null}                              Data-handling component. Render nothing.
 */
const BindingConnector = ({
  args,
  attrName,
  blockProps,
  source,
  onPropValueChange
}) => {
  const {
    placeholder,
    value: propValue
  } = source.useSource(blockProps, args);
  const {
    name: blockName
  } = blockProps;
  const attrValue = blockProps.attributes[attrName];
  const updateBoundAttibute = (0, _element.useCallback)((newAttrValue, prevAttrValue) => {
    /*
     * If the attribute is a RichTextData instance,
     * (core/paragraph, core/heading, core/button, etc.)
     * compare its HTML representation with the new value.
     *
     * To do: it looks like a workaround.
     * Consider improving the attribute and metadata fields types.
     */
    if (prevAttrValue instanceof _richText.RichTextData) {
      // Bail early if the Rich Text value is the same.
      if (prevAttrValue.toHTMLString() === newAttrValue) {
        return;
      }

      /*
       * To preserve the value type,
       * convert the new value to a RichTextData instance.
       */
      newAttrValue = _richText.RichTextData.fromHTMLString(newAttrValue);
    }
    if (prevAttrValue === newAttrValue) {
      return;
    }
    onPropValueChange({
      [attrName]: newAttrValue
    });
  }, [attrName, onPropValueChange]);
  (0, _element.useLayoutEffect)(() => {
    if (typeof propValue !== 'undefined') {
      updateBoundAttibute(propValue, attrValue);
    } else if (placeholder) {
      /*
       * Placeholder fallback.
       * If the attribute is `src` or `href`,
       * a placeholder can't be used because it is not a valid url.
       * Adding this workaround until
       * attributes and metadata fields types are improved and include `url`.
       */
      const htmlAttribute = (0, _blocks.getBlockType)(blockName).attributes[attrName].attribute;
      if (htmlAttribute === 'src' || htmlAttribute === 'href') {
        updateBoundAttibute(null);
        return;
      }
      updateBoundAttibute(placeholder);
    }
  }, [updateBoundAttibute, propValue, attrValue, placeholder, blockName, attrName]);
  return null;
};

/**
 * BlockBindingBridge acts like a component wrapper
 * that connects the bound attributes of a block
 * to the source handlers.
 * For this, it creates a BindingConnector for each bound attribute.
 *
 * @param {Object}   props                   - The component props.
 * @param {Object}   props.blockProps        - The BlockEdit props object.
 * @param {Object}   props.bindings          - The block bindings settings.
 * @param {Function} props.onPropValueChange - The function to call when the attribute value changes.
 * @return {null}                              Data-handling component. Render nothing.
 */
function BlockBindingBridge({
  blockProps,
  bindings,
  onPropValueChange
}) {
  const blockBindingsSources = (0, _lockUnlock.unlock)((0, _data.useSelect)(_blocks.store)).getAllBlockBindingsSources();
  return (0, _react.createElement)(_react.Fragment, null, Object.entries(bindings).map(([attrName, boundAttribute]) => {
    // Bail early if the block doesn't have a valid source handler.
    const source = blockBindingsSources[boundAttribute.source];
    if (!source?.useSource) {
      return null;
    }
    return (0, _react.createElement)(BindingConnector, {
      key: attrName,
      attrName: attrName,
      source: source,
      blockProps: blockProps,
      args: boundAttribute.args,
      onPropValueChange: onPropValueChange
    });
  }));
}
const withBlockBindingSupport = (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  /*
   * Collect and update the bound attributes
   * in a separate state.
   */
  const [boundAttributes, setBoundAttributes] = (0, _element.useState)({});
  const updateBoundAttributes = (0, _element.useCallback)(newAttributes => setBoundAttributes(prev => ({
    ...prev,
    ...newAttributes
  })), []);

  /*
   * Create binding object filtering
   * only the attributes that can be bound.
   */
  const bindings = Object.fromEntries(Object.entries(props.attributes.metadata?.bindings || {}).filter(([attrName]) => canBindAttribute(props.name, attrName)));
  return (0, _react.createElement)(_react.Fragment, null, Object.keys(bindings).length > 0 && (0, _react.createElement)(BlockBindingBridge, {
    blockProps: props,
    bindings: bindings,
    onPropValueChange: updateBoundAttributes
  }), (0, _react.createElement)(BlockEdit, {
    ...props,
    attributes: {
      ...props.attributes,
      ...boundAttributes
    }
  }));
}, 'withBlockBindingSupport');

/**
 * Filters a registered block's settings to enhance a block's `edit` component
 * to upgrade bound attributes.
 *
 * @param {WPBlockSettings} settings - Registered block settings.
 * @param {string}          name     - Block name.
 * @return {WPBlockSettings} Filtered block settings.
 */
function shimAttributeSource(settings, name) {
  if (!canBindBlock(name)) {
    return settings;
  }
  return {
    ...settings,
    edit: withBlockBindingSupport(settings.edit)
  };
}
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/editor/custom-sources-backwards-compatibility/shim-attribute-source', shimAttributeSource);
//# sourceMappingURL=use-bindings-attributes.js.map