{"version":3,"names":["classnames","BaseControl","Button","__","isRTL","textHorizontal","textVertical","WRITING_MODES","name","value","icon","WritingModeControl","className","onChange","createElement","VisualLabel","as","map","writingMode","key","label","isPressed","onClick","undefined"],"sources":["@wordpress/block-editor/src/components/writing-mode-control/index.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { BaseControl, Button } from '@wordpress/components';\nimport { __, isRTL } from '@wordpress/i18n';\nimport { textHorizontal, textVertical } from '@wordpress/icons';\n\nconst WRITING_MODES = [\n\t{\n\t\tname: __( 'Horizontal' ),\n\t\tvalue: 'horizontal-tb',\n\t\ticon: textHorizontal,\n\t},\n\t{\n\t\tname: __( 'Vertical' ),\n\t\tvalue: isRTL() ? 'vertical-lr' : 'vertical-rl',\n\t\ticon: textVertical,\n\t},\n];\n\n/**\n * Control to facilitate writing mode selections.\n *\n * @param {Object}   props           Component props.\n * @param {string}   props.className Class name to add to the control.\n * @param {string}   props.value     Currently selected writing mode.\n * @param {Function} props.onChange  Handles change in the writing mode selection.\n *\n * @return {Element} Writing Mode control.\n */\nexport default function WritingModeControl( { className, value, onChange } ) {\n\treturn (\n\t\t<fieldset\n\t\t\tclassName={ classnames(\n\t\t\t\t'block-editor-writing-mode-control',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t>\n\t\t\t<BaseControl.VisualLabel as=\"legend\">\n\t\t\t\t{ __( 'Orientation' ) }\n\t\t\t</BaseControl.VisualLabel>\n\t\t\t<div className=\"block-editor-writing-mode-control__buttons\">\n\t\t\t\t{ WRITING_MODES.map( ( writingMode ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={ writingMode.value }\n\t\t\t\t\t\t\ticon={ writingMode.icon }\n\t\t\t\t\t\t\tlabel={ writingMode.name }\n\t\t\t\t\t\t\tisPressed={ writingMode.value === value }\n\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\tonChange(\n\t\t\t\t\t\t\t\t\twritingMode.value === value\n\t\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t\t: writingMode.value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t} ) }\n\t\t\t</div>\n\t\t</fieldset>\n\t);\n}\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,YAAY;;AAEnC;AACA;AACA;AACA,SAASC,WAAW,EAAEC,MAAM,QAAQ,uBAAuB;AAC3D,SAASC,EAAE,EAAEC,KAAK,QAAQ,iBAAiB;AAC3C,SAASC,cAAc,EAAEC,YAAY,QAAQ,kBAAkB;AAE/D,MAAMC,aAAa,GAAG,CACrB;EACCC,IAAI,EAAEL,EAAE,CAAE,YAAa,CAAC;EACxBM,KAAK,EAAE,eAAe;EACtBC,IAAI,EAAEL;AACP,CAAC,EACD;EACCG,IAAI,EAAEL,EAAE,CAAE,UAAW,CAAC;EACtBM,KAAK,EAAEL,KAAK,CAAC,CAAC,GAAG,aAAa,GAAG,aAAa;EAC9CM,IAAI,EAAEJ;AACP,CAAC,CACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASK,kBAAkBA,CAAE;EAAEC,SAAS;EAAEH,KAAK;EAAEI;AAAS,CAAC,EAAG;EAC5E,OACCC,aAAA;IACCF,SAAS,EAAGZ,UAAU,CACrB,mCAAmC,EACnCY,SACD;EAAG,GAEHE,aAAA,CAACb,WAAW,CAACc,WAAW;IAACC,EAAE,EAAC;EAAQ,GACjCb,EAAE,CAAE,aAAc,CACI,CAAC,EAC1BW,aAAA;IAAKF,SAAS,EAAC;EAA4C,GACxDL,aAAa,CAACU,GAAG,CAAIC,WAAW,IAAM;IACvC,OACCJ,aAAA,CAACZ,MAAM;MACNiB,GAAG,EAAGD,WAAW,CAACT,KAAO;MACzBC,IAAI,EAAGQ,WAAW,CAACR,IAAM;MACzBU,KAAK,EAAGF,WAAW,CAACV,IAAM;MAC1Ba,SAAS,EAAGH,WAAW,CAACT,KAAK,KAAKA,KAAO;MACzCa,OAAO,EAAGA,CAAA,KAAM;QACfT,QAAQ,CACPK,WAAW,CAACT,KAAK,KAAKA,KAAK,GACxBc,SAAS,GACTL,WAAW,CAACT,KAChB,CAAC;MACF;IAAG,CACH,CAAC;EAEJ,CAAE,CACE,CACI,CAAC;AAEb"}