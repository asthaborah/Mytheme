"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useWritingFlow = useWritingFlow;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _data = require("@wordpress/data");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _element = require("@wordpress/element");
var _useMultiSelection = _interopRequireDefault(require("./use-multi-selection"));
var _useTabNav = _interopRequireDefault(require("./use-tab-nav"));
var _useArrowNav = _interopRequireDefault(require("./use-arrow-nav"));
var _useSelectAll = _interopRequireDefault(require("./use-select-all"));
var _useDragSelection = _interopRequireDefault(require("./use-drag-selection"));
var _useSelectionObserver = _interopRequireDefault(require("./use-selection-observer"));
var _useClickSelection = _interopRequireDefault(require("./use-click-selection"));
var _useInput = _interopRequireDefault(require("./use-input"));
var _useClipboardHandler = _interopRequireDefault(require("./use-clipboard-handler"));
var _store = require("../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useWritingFlow() {
  const [before, ref, after] = (0, _useTabNav.default)();
  const hasMultiSelection = (0, _data.useSelect)(select => select(_store.store).hasMultiSelection(), []);
  return [before, (0, _compose.useMergeRefs)([ref, (0, _useClipboardHandler.default)(), (0, _useInput.default)(), (0, _useDragSelection.default)(), (0, _useSelectionObserver.default)(), (0, _useClickSelection.default)(), (0, _useMultiSelection.default)(), (0, _useSelectAll.default)(), (0, _useArrowNav.default)(), (0, _compose.useRefEffect)(node => {
    node.tabIndex = 0;
    if (!hasMultiSelection) {
      return;
    }
    node.classList.add('has-multi-selection');
    node.setAttribute('aria-label', (0, _i18n.__)('Multiple selected blocks'));
    return () => {
      node.classList.remove('has-multi-selection');
      node.removeAttribute('aria-label');
    };
  }, [hasMultiSelection])]), after];
}
function WritingFlow({
  children,
  ...props
}, forwardedRef) {
  const [before, ref, after] = useWritingFlow();
  return (0, _react.createElement)(_react.Fragment, null, before, (0, _react.createElement)("div", {
    ...props,
    ref: (0, _compose.useMergeRefs)([ref, forwardedRef]),
    className: (0, _classnames.default)(props.className, 'block-editor-writing-flow')
  }, children), after);
}

/**
 * Handles selection and navigation across blocks. This component should be
 * wrapped around BlockList.
 *
 * @param {Object}  props          Component properties.
 * @param {Element} props.children Children to be rendered.
 */
var _default = exports.default = (0, _element.forwardRef)(WritingFlow);
//# sourceMappingURL=index.js.map