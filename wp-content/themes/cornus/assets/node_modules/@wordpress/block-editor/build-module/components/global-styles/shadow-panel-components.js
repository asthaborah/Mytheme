import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { __experimentalVStack as VStack, __experimentalHeading as Heading, __experimentalHStack as HStack, __experimentalDropdownContentWrapper as DropdownContentWrapper, Button, FlexItem, Dropdown, privateApis as componentsPrivateApis } from '@wordpress/components';
import { useMemo } from '@wordpress/element';
import { shadow as shadowIcon, Icon, check } from '@wordpress/icons';

/**
 * External dependencies
 */
import classNames from 'classnames';

/**
 * Internal dependencies
 */
import { unlock } from '../../lock-unlock';

/**
 * Shared reference to an empty array for cases where it is important to avoid
 * returning a new array reference on every invocation.
 *
 * @type {Array}
 */
const EMPTY_ARRAY = [];
export function ShadowPopoverContainer({
  shadow,
  onShadowChange,
  settings
}) {
  const shadows = useShadowPresets(settings);
  return createElement("div", {
    className: "block-editor-global-styles__shadow-popover-container"
  }, createElement(VStack, {
    spacing: 4
  }, createElement(Heading, {
    level: 5
  }, __('Drop shadow')), createElement(ShadowPresets, {
    presets: shadows,
    activeShadow: shadow,
    onSelect: onShadowChange
  }), createElement("div", {
    className: "block-editor-global-styles__clear-shadow"
  }, createElement(Button, {
    variant: "tertiary",
    onClick: () => onShadowChange(undefined)
  }, __('Clear')))));
}
export function ShadowPresets({
  presets,
  activeShadow,
  onSelect
}) {
  const {
    CompositeV2: Composite,
    useCompositeStoreV2: useCompositeStore
  } = unlock(componentsPrivateApis);
  const compositeStore = useCompositeStore();
  return !presets ? null : createElement(Composite, {
    store: compositeStore,
    role: "listbox",
    className: "block-editor-global-styles__shadow__list",
    "aria-label": __('Drop shadows')
  }, presets.map(({
    name,
    slug,
    shadow
  }) => createElement(ShadowIndicator, {
    key: slug,
    label: name,
    isActive: shadow === activeShadow,
    type: slug === 'unset' ? 'unset' : 'preset',
    onSelect: () => onSelect(shadow === activeShadow ? undefined : shadow),
    shadow: shadow
  })));
}
export function ShadowIndicator({
  type,
  label,
  isActive,
  onSelect,
  shadow
}) {
  const {
    CompositeItemV2: CompositeItem
  } = unlock(componentsPrivateApis);
  return createElement(CompositeItem, {
    role: "option",
    "aria-label": label,
    "aria-selected": isActive,
    className: classNames('block-editor-global-styles__shadow__item', {
      'is-active': isActive
    }),
    render: createElement(Button, {
      className: classNames('block-editor-global-styles__shadow-indicator', {
        unset: type === 'unset'
      }),
      onClick: onSelect,
      label: label,
      style: {
        boxShadow: shadow
      },
      showTooltip: true
    }, isActive && createElement(Icon, {
      icon: check
    }))
  });
}
export function ShadowPopover({
  shadow,
  onShadowChange,
  settings
}) {
  const popoverProps = {
    placement: 'left-start',
    offset: 36,
    shift: true
  };
  return createElement(Dropdown, {
    popoverProps: popoverProps,
    className: "block-editor-global-styles__shadow-dropdown",
    renderToggle: renderShadowToggle(),
    renderContent: () => createElement(DropdownContentWrapper, {
      paddingSize: "medium"
    }, createElement(ShadowPopoverContainer, {
      shadow: shadow,
      onShadowChange: onShadowChange,
      settings: settings
    }))
  });
}
function renderShadowToggle() {
  return ({
    onToggle,
    isOpen
  }) => {
    const toggleProps = {
      onClick: onToggle,
      className: classNames({
        'is-open': isOpen
      }),
      'aria-expanded': isOpen
    };
    return createElement(Button, {
      ...toggleProps
    }, createElement(HStack, {
      justify: "flex-start"
    }, createElement(Icon, {
      className: "block-editor-global-styles__toggle-icon",
      icon: shadowIcon,
      size: 24
    }), createElement(FlexItem, null, __('Drop shadow'))));
  };
}
export function useShadowPresets(settings) {
  return useMemo(() => {
    var _settings$shadow$pres;
    if (!settings?.shadow) {
      return EMPTY_ARRAY;
    }
    const defaultPresetsEnabled = settings?.shadow?.defaultPresets;
    const {
      default: defaultShadows,
      theme: themeShadows
    } = (_settings$shadow$pres = settings?.shadow?.presets) !== null && _settings$shadow$pres !== void 0 ? _settings$shadow$pres : {};
    const unsetShadow = {
      name: __('Unset'),
      slug: 'unset',
      shadow: 'none'
    };
    const shadowPresets = [...(defaultPresetsEnabled && defaultShadows || EMPTY_ARRAY), ...(themeShadows || EMPTY_ARRAY)];
    if (shadowPresets.length) {
      shadowPresets.unshift(unsetShadow);
    }
    return shadowPresets;
  }, [settings]);
}
//# sourceMappingURL=shadow-panel-components.js.map