"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SeparatedInputControls;
var _react = require("react");
var _spacingInputControl = _interopRequireDefault(require("./spacing-input-control"));
var _utils = require("../utils");
/**
 * Internal dependencies
 */

function SeparatedInputControls({
  minimumCustomValue,
  onChange,
  onMouseOut,
  onMouseOver,
  sides,
  spacingSizes,
  type,
  values
}) {
  // Filter sides if custom configuration provided, maintaining default order.
  const filteredSides = sides?.length ? _utils.ALL_SIDES.filter(side => sides.includes(side)) : _utils.ALL_SIDES;
  const createHandleOnChange = side => next => {
    // Encode the existing value into the preset value if the passed in value matches the value of one of the spacingSizes.
    const nextValues = {
      ...Object.keys(values).reduce((acc, key) => {
        acc[key] = (0, _utils.getPresetValueFromCustomValue)(values[key], spacingSizes);
        return acc;
      }, {})
    };
    nextValues[side] = next;
    onChange(nextValues);
  };
  return (0, _react.createElement)(_react.Fragment, null, filteredSides.map(side => {
    return (0, _react.createElement)(_spacingInputControl.default, {
      key: `spacing-sizes-control-${side}`,
      icon: _utils.ICONS[side],
      label: _utils.LABELS[side],
      minimumCustomValue: minimumCustomValue,
      onChange: createHandleOnChange(side),
      onMouseOut: onMouseOut,
      onMouseOver: onMouseOver,
      side: side,
      spacingSizes: spacingSizes,
      type: type,
      value: values[side],
      withInputField: false
    });
  }));
}
//# sourceMappingURL=separated.js.map