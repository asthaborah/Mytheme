"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockSettingsScreens = void 0;
exports.default = BottomSheetSettings;
var _react = require("react");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _containerNative = _interopRequireDefault(require("./container.native.scss"));
var _inspectorControls = _interopRequireDefault(require("../inspector-controls"));
var _imageLinkDestinations = _interopRequireDefault(require("../image-link-destinations"));
var _useMultipleOriginColorsAndGradients = _interopRequireDefault(require("../colors-gradients/use-multiple-origin-colors-and-gradients"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const blockSettingsScreens = exports.blockSettingsScreens = {
  settings: 'Settings',
  color: 'Color',
  focalPoint: 'FocalPoint',
  linkPicker: 'linkPicker',
  imageLinkDestinations: 'imageLinkDestinations'
};
function BottomSheetSettings(props) {
  const colorSettings = (0, _useMultipleOriginColorsAndGradients.default)();
  const {
    closeGeneralSidebar
  } = (0, _data.useDispatch)('core/edit-post');
  const editorSidebarOpened = (0, _data.useSelect)(select => select('core/edit-post').isEditorSidebarOpened());
  return (0, _react.createElement)(_components.BottomSheet, {
    isVisible: editorSidebarOpened,
    onClose: closeGeneralSidebar,
    hideHeader: true,
    contentStyle: _containerNative.default.content,
    hasNavigation: true,
    testID: "block-settings-modal",
    ...props
  }, (0, _react.createElement)(_components.BottomSheet.NavigationContainer, {
    animate: true,
    main: true
  }, (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.settings
  }, (0, _react.createElement)(_inspectorControls.default.Slot, null)), (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: _components.BottomSheet.SubSheet.screenName
  }, (0, _react.createElement)(_components.BottomSheet.SubSheet.Slot, null)), (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.color
  }, (0, _react.createElement)(_components.ColorSettings, {
    defaultSettings: colorSettings
  })), (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.focalPoint,
    fullScreen: true
  }, (0, _react.createElement)(_components.FocalPointSettingsPanel, null)), (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.linkPicker,
    fullScreen: true,
    isScrollable: true
  }, (0, _react.createElement)(_components.LinkPickerScreen, {
    returnScreenName: blockSettingsScreens.settings
  })), (0, _react.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.imageLinkDestinations
  }, (0, _react.createElement)(_imageLinkDestinations.default, {
    ...props
  }))));
}
//# sourceMappingURL=container.native.js.map