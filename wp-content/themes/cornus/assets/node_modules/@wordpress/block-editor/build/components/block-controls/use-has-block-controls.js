"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHasAnyBlockControls = useHasAnyBlockControls;
exports.useHasBlockControls = useHasBlockControls;
var _components = require("@wordpress/components");
var _warning = _interopRequireDefault(require("@wordpress/warning"));
var _groups = _interopRequireDefault(require("./groups"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useHasAnyBlockControls() {
  let hasAnyBlockControls = false;
  for (const group in _groups.default) {
    // It is safe to violate the rules of hooks here as the `groups` object
    // is static and will not change length between renders. Do not return
    // early as that will cause the hook to be called a different number of
    // times between renders.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    if (useHasBlockControls(group)) {
      hasAnyBlockControls = true;
    }
  }
  return hasAnyBlockControls;
}
function useHasBlockControls(group = 'default') {
  const Slot = _groups.default[group]?.Slot;
  const fills = (0, _components.__experimentalUseSlotFills)(Slot?.__unstableName);
  if (!Slot) {
    typeof SCRIPT_DEBUG !== "undefined" && SCRIPT_DEBUG === true ? (0, _warning.default)(`Unknown BlockControls group "${group}" provided.`) : void 0;
    return null;
  }
  return !!fills?.length;
}
//# sourceMappingURL=use-has-block-controls.js.map