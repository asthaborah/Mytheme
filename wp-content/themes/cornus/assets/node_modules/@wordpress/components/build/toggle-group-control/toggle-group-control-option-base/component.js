"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _framerMotion = require("framer-motion");
var _compose = require("@wordpress/compose");
var _element = require("@wordpress/element");
var _context = require("../../context");
var _context2 = require("../context");
var styles = _interopRequireWildcard(require("./styles"));
var _hooks = require("../../utils/hooks");
var _tooltip = _interopRequireDefault(require("../../tooltip"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * External dependencies
 */

// eslint-disable-next-line no-restricted-imports

// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

const {
  ButtonContentView,
  LabelView
} = styles;
const REDUCED_MOTION_TRANSITION_CONFIG = {
  duration: 0
};
const LAYOUT_ID = 'toggle-group-backdrop-shared-layout-id';
const WithToolTip = ({
  showTooltip,
  text,
  children
}) => {
  if (showTooltip && text) {
    return (0, _react.createElement)(_tooltip.default, {
      text: text,
      placement: "top"
    }, children);
  }
  return (0, _react.createElement)(_react.Fragment, null, children);
};
function ToggleGroupControlOptionBase(props, forwardedRef) {
  const shouldReduceMotion = (0, _framerMotion.useReducedMotion)();
  const toggleGroupControlContext = (0, _context2.useToggleGroupControlContext)();
  const id = (0, _compose.useInstanceId)(ToggleGroupControlOptionBase, toggleGroupControlContext.baseId || 'toggle-group-control-option-base');
  const buttonProps = (0, _context.useContextSystem)({
    ...props,
    id
  }, 'ToggleGroupControlOptionBase');
  const {
    isBlock = false,
    isDeselectable = false,
    size = 'default'
  } = toggleGroupControlContext;
  const {
    className,
    isIcon = false,
    value,
    children,
    showTooltip = false,
    onFocus: onFocusProp,
    ...otherButtonProps
  } = buttonProps;
  const isPressed = toggleGroupControlContext.value === value;
  const cx = (0, _hooks.useCx)();
  const labelViewClasses = (0, _element.useMemo)(() => cx(isBlock && styles.labelBlock), [cx, isBlock]);
  const itemClasses = (0, _element.useMemo)(() => cx(styles.buttonView({
    isDeselectable,
    isIcon,
    isPressed,
    size
  }), className), [cx, isDeselectable, isIcon, isPressed, size, className]);
  const backdropClasses = (0, _element.useMemo)(() => cx(styles.backdropView), [cx]);
  const buttonOnClick = () => {
    if (isDeselectable && isPressed) {
      toggleGroupControlContext.setValue(undefined);
    } else {
      toggleGroupControlContext.setValue(value);
    }
  };
  const commonProps = {
    ...otherButtonProps,
    className: itemClasses,
    'data-value': value,
    ref: forwardedRef
  };
  return (0, _react.createElement)(LabelView, {
    className: labelViewClasses
  }, (0, _react.createElement)(WithToolTip, {
    showTooltip: showTooltip,
    text: otherButtonProps['aria-label']
  }, isDeselectable ? (0, _react.createElement)("button", {
    ...commonProps,
    onFocus: onFocusProp,
    "aria-pressed": isPressed,
    type: "button",
    onClick: buttonOnClick
  }, (0, _react.createElement)(ButtonContentView, null, children)) : (0, _react.createElement)(Ariakit.Radio, {
    render: (0, _react.createElement)("button", {
      type: "button",
      ...commonProps,
      onFocus: event => {
        onFocusProp?.(event);
        if (event.defaultPrevented) return;
        toggleGroupControlContext.setValue(value);
      }
    }),
    value: value
  }, (0, _react.createElement)(ButtonContentView, null, children))), isPressed ? (0, _react.createElement)(_framerMotion.motion.div, {
    className: backdropClasses,
    transition: shouldReduceMotion ? REDUCED_MOTION_TRANSITION_CONFIG : undefined,
    role: "presentation",
    layoutId: LAYOUT_ID
  }) : null);
}

/**
 * `ToggleGroupControlOptionBase` is a form component and is meant to be used as an internal,
 * generic component for any children of `ToggleGroupControl`.
 *
 * @example
 * ```jsx
 * import {
 *   __experimentalToggleGroupControl as ToggleGroupControl,
 *   __experimentalToggleGroupControlOptionBase as ToggleGroupControlOptionBase,
 * } from '@wordpress/components';
 *
 * function Example() {
 *   return (
 *     <ToggleGroupControl label="my label" value="vertical" isBlock>
 *       <ToggleGroupControlOption value="horizontal" label="Horizontal" />
 *       <ToggleGroupControlOption value="vertical" label="Vertical" />
 *     </ToggleGroupControl>
 *   );
 * }
 * ```
 */
const ConnectedToggleGroupControlOptionBase = (0, _context.contextConnect)(ToggleGroupControlOptionBase, 'ToggleGroupControlOptionBase');
var _default = exports.default = ConnectedToggleGroupControlOptionBase;
//# sourceMappingURL=component.js.map