"use client";
import {
  useFormContext
} from "../__chunks/V4ZFXDFK.js";
import {
  useCollectionItem
} from "../__chunks/UH3I23HL.js";
import "../__chunks/4UUKJZ4V.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/3ORBWXWF.js";
import {
  useId,
  useMergeRefs
} from "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/form/form-error.ts
import { useCallback, useRef } from "react";
import { invariant } from "@ariakit/core/utils/misc";
var useFormError = createHook(
  (_a) => {
    var _b = _a, { store, name: nameProp, getItem: getItemProp } = _b, props = __objRest(_b, ["store", "name", "getItem"]);
    const context = useFormContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormError must be wrapped in a Form component."
    );
    const id = useId(props.id);
    const ref = useRef(null);
    const name = `${nameProp}`;
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { id: id || item.id, name, type: "error" });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, name, getItemProp]
    );
    const children = store.useState(() => {
      const error = store == null ? void 0 : store.getError(name);
      if (error == null)
        return;
      if (!(store == null ? void 0 : store.getFieldTouched(name)))
        return;
      return error;
    });
    props = __spreadProps(__spreadValues({
      id,
      role: "alert",
      children
    }, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    props = useCollectionItem(__spreadProps(__spreadValues({ store }, props), { getItem }));
    return props;
  }
);
var FormError = createMemoComponent((props) => {
  const htmlProps = useFormError(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormError.displayName = "FormError";
}
export {
  FormError,
  useFormError
};
