/// <reference types="react" />
export declare const Wrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Navigator: import("@emotion/styled").StyledComponent<Omit<import("../../flex/types").FlexProps, "gap" | "align"> & {
    alignment?: "top" | "bottom" | "left" | "center" | "right" | "start" | "end" | (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "normal" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "edge" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | undefined;
    spacing?: import("csstype").Property.Width<string | number> | undefined;
} & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "children" | "direction" | "expanded" | "spacing" | "as" | "wrap" | "justify" | keyof import("react").RefAttributes<any> | "isReversed" | "alignment"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const NavigatorHeading: import("@emotion/styled").StyledComponent<Omit<import("../../text/types").Props, "color" | "size" | "weight" | "isBlock"> & {
    level?: import("../../heading/types").HeadingSize | undefined;
    isBlock?: boolean | undefined;
    color?: import("csstype").Property.Color | undefined;
    weight?: import("csstype").Property.FontWeight | (700 | 900 | 800 | 600 | 400 | 300 | 200 | 100 | 500) | undefined;
} & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "key" | keyof import("react").HTMLAttributes<HTMLHeadingElement>>, "children" | "variant" | "color" | "display" | "letterSpacing" | "lineHeight" | "as" | "align" | "ellipsis" | "weight" | keyof import("react").RefAttributes<any> | "isBlock" | "ellipsizeMode" | "limit" | "numberOfLines" | "adjustLineHeightForInnerControls" | "isDestructive" | "highlightEscape" | "highlightCaseSensitive" | "highlightSanitize" | "optimizeReadabilityFor" | "truncate" | "upperCase" | "highlightWords" | "level"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const Calendar: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const DayOfWeek: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const DayButton: import("@emotion/styled").StyledComponent<((import("../../button/types").ButtonProps & import("react").RefAttributes<any>) & {
    theme?: import("@emotion/react").Theme | undefined;
}) & {
    column: number;
    isSelected: boolean;
    isToday: boolean;
    hasEvents: boolean;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map