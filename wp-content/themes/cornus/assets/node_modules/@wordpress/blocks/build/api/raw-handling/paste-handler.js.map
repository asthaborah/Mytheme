{"version":3,"names":["_dom","require","_htmlToBlocks","_registration","_serializer","_parser","_interopRequireDefault","_normaliseBlocks","_specialCommentConverter","_commentRemover","_isInlineContent","_phrasingContentReducer","_headRemover","_msListConverter","_msListIgnore","_listReducer","_imageCorrector","_blockquoteNormaliser","_divNormaliser","_figureContentReducer","_shortcodeConverter","_markdownConverter","_iframeRemover","_googleDocsUidRemover","_htmlFormattingRemover","_brRemover","_utils","_emptyParagraphRemover","_slackParagraphCorrector","log","args","window","console","filterInlineHTML","HTML","deepFilterHTML","headRemover","googleDocsUIDRemover","msListIgnore","phrasingContentReducer","commentRemover","removeInvalidHTML","getPhrasingContentSchema","inline","htmlFormattingRemover","brRemover","pasteHandler","plainText","mode","tagName","replace","content","indexOf","parse","String","prototype","normalize","slackParagraphCorrector","isPlainText","isPlain","test","markdownConverter","pieces","shortcodeConverter","hasShortcodes","length","isInlineContent","phrasingContentSchema","blockContentSchema","getBlockContentSchema","blocks","map","piece","filters","msListConverter","listReducer","imageCorrector","specialCommentConverter","iframeRemover","figureContentReducer","blockquoteNormaliser","divNormaliser","schema","normaliseBlocks","emptyParagraphRemover","htmlToBlocks","flat","filter","Boolean","hasBlockSupport","name","trimRegex","trimmedPlainText","getBlockInnerHTML"],"sources":["@wordpress/blocks/src/api/raw-handling/paste-handler.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getPhrasingContentSchema, removeInvalidHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { htmlToBlocks } from './html-to-blocks';\nimport { hasBlockSupport } from '../registration';\nimport { getBlockInnerHTML } from '../serializer';\nimport parse from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport commentRemover from './comment-remover';\nimport isInlineContent from './is-inline-content';\nimport phrasingContentReducer from './phrasing-content-reducer';\nimport headRemover from './head-remover';\nimport msListConverter from './ms-list-converter';\nimport msListIgnore from './ms-list-ignore';\nimport listReducer from './list-reducer';\nimport imageCorrector from './image-corrector';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport divNormaliser from './div-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport markdownConverter from './markdown-converter';\nimport iframeRemover from './iframe-remover';\nimport googleDocsUIDRemover from './google-docs-uid-remover';\nimport htmlFormattingRemover from './html-formatting-remover';\nimport brRemover from './br-remover';\nimport { deepFilterHTML, isPlain, getBlockContentSchema } from './utils';\nimport emptyParagraphRemover from './empty-paragraph-remover';\nimport slackParagraphCorrector from './slack-paragraph-corrector';\n\nconst log = ( ...args ) => window?.console?.log?.( ...args );\n\n/**\n * Filters HTML to only contain phrasing content.\n *\n * @param {string} HTML The HTML to filter.\n *\n * @return {string} HTML only containing phrasing content.\n */\nfunction filterInlineHTML( HTML ) {\n\tHTML = deepFilterHTML( HTML, [\n\t\theadRemover,\n\t\tgoogleDocsUIDRemover,\n\t\tmsListIgnore,\n\t\tphrasingContentReducer,\n\t\tcommentRemover,\n\t] );\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema( 'paste' ), {\n\t\tinline: true,\n\t} );\n\n\tHTML = deepFilterHTML( HTML, [ htmlFormattingRemover, brRemover ] );\n\n\t// Allows us to ask for this information when we get a report.\n\tlog( 'Processed inline HTML:\\n\\n', HTML );\n\n\treturn HTML;\n}\n\n/**\n * Converts an HTML string to known blocks. Strips everything else.\n *\n * @param {Object} options\n * @param {string} [options.HTML]      The HTML to convert.\n * @param {string} [options.plainText] Plain text version.\n * @param {string} [options.mode]      Handle content as blocks or inline content.\n *                                     * 'AUTO': Decide based on the content passed.\n *                                     * 'INLINE': Always handle as inline content, and return string.\n *                                     * 'BLOCKS': Always handle as blocks, and return array of blocks.\n * @param {Array}  [options.tagName]   The tag into which content will be inserted.\n *\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\n */\nexport function pasteHandler( {\n\tHTML = '',\n\tplainText = '',\n\tmode = 'AUTO',\n\ttagName,\n} ) {\n\t// First of all, strip any meta tags.\n\tHTML = HTML.replace( /<meta[^>]+>/g, '' );\n\t// Strip Windows markers.\n\tHTML = HTML.replace(\n\t\t/^\\s*<html[^>]*>\\s*<body[^>]*>(?:\\s*<!--\\s*StartFragment\\s*-->)?/i,\n\t\t''\n\t);\n\tHTML = HTML.replace(\n\t\t/(?:<!--\\s*EndFragment\\s*-->\\s*)?<\\/body>\\s*<\\/html>\\s*$/i,\n\t\t''\n\t);\n\n\t// If we detect block delimiters in HTML, parse entirely as blocks.\n\tif ( mode !== 'INLINE' ) {\n\t\t// Check plain text if there is no HTML.\n\t\tconst content = HTML ? HTML : plainText;\n\n\t\tif ( content.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\t\treturn parse( content );\n\t\t}\n\t}\n\n\t// Normalize unicode to use composed characters.\n\t// This is unsupported in IE 11 but it's a nice-to-have feature, not mandatory.\n\t// Not normalizing the content will only affect older browsers and won't\n\t// entirely break the app.\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\t// See: https://core.trac.wordpress.org/ticket/30130\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\n\tif ( String.prototype.normalize ) {\n\t\tHTML = HTML.normalize();\n\t}\n\n\t// Must be run before checking if it's inline content.\n\tHTML = deepFilterHTML( HTML, [ slackParagraphCorrector ] );\n\n\t// Consider plain text if:\n\t// * There is a plain text version.\n\t// * There is no HTML version, or it has no formatting.\n\tconst isPlainText = plainText && ( ! HTML || isPlain( HTML ) );\n\n\t// Parse Markdown (and encoded HTML) if it's considered plain text.\n\tif ( isPlainText ) {\n\t\tHTML = plainText;\n\n\t\t// The markdown converter (Showdown) trims whitespace.\n\t\tif ( ! /^\\s+$/.test( plainText ) ) {\n\t\t\tHTML = markdownConverter( HTML );\n\t\t}\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\n\t// The call to shortcodeConverter will always return more than one element\n\t// if shortcodes are matched. The reason is when shortcodes are matched\n\t// empty HTML strings are included.\n\tconst hasShortcodes = pieces.length > 1;\n\n\tif ( isPlainText && ! hasShortcodes ) {\n\t\t// Switch to inline mode if:\n\t\t// * The current mode is AUTO.\n\t\t// * The original plain text had no line breaks.\n\t\t// * The original plain text was not an HTML paragraph.\n\t\t// * The converted text is just a paragraph.\n\t\tif (\n\t\t\tmode === 'AUTO' &&\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\n\t\t\tHTML.indexOf( '<p>' ) === 0\n\t\t) {\n\t\t\tmode = 'INLINE';\n\t\t}\n\t}\n\n\tif ( mode === 'INLINE' ) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tif (\n\t\tmode === 'AUTO' &&\n\t\t! hasShortcodes &&\n\t\tisInlineContent( HTML, tagName )\n\t) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tconst phrasingContentSchema = getPhrasingContentSchema( 'paste' );\n\tconst blockContentSchema = getBlockContentSchema( 'paste' );\n\n\tconst blocks = pieces\n\t\t.map( ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\tconst filters = [\n\t\t\t\tgoogleDocsUIDRemover,\n\t\t\t\tmsListConverter,\n\t\t\t\theadRemover,\n\t\t\t\tlistReducer,\n\t\t\t\timageCorrector,\n\t\t\t\tphrasingContentReducer,\n\t\t\t\tspecialCommentConverter,\n\t\t\t\tcommentRemover,\n\t\t\t\tiframeRemover,\n\t\t\t\tfigureContentReducer,\n\t\t\t\tblockquoteNormaliser,\n\t\t\t\tdivNormaliser,\n\t\t\t];\n\n\t\t\tconst schema = {\n\t\t\t\t...blockContentSchema,\n\t\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\n\t\t\t\t...phrasingContentSchema,\n\t\t\t};\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = removeInvalidHTML( piece, schema );\n\t\t\tpiece = normaliseBlocks( piece );\n\t\t\tpiece = deepFilterHTML(\n\t\t\t\tpiece,\n\t\t\t\t[ htmlFormattingRemover, brRemover, emptyParagraphRemover ],\n\t\t\t\tblockContentSchema\n\t\t\t);\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\tlog( 'Processed HTML piece:\\n\\n', piece );\n\n\t\t\treturn htmlToBlocks( piece, pasteHandler );\n\t\t} )\n\t\t.flat()\n\t\t.filter( Boolean );\n\n\t// If we're allowed to return inline content, and there is only one\n\t// inlineable block, and the original plain text content does not have any\n\t// line breaks, then treat it as inline paste.\n\tif (\n\t\tmode === 'AUTO' &&\n\t\tblocks.length === 1 &&\n\t\thasBlockSupport( blocks[ 0 ].name, '__unstablePasteTextInline', false )\n\t) {\n\t\tconst trimRegex = /^[\\n]+|[\\n]+$/g;\n\t\t// Don't catch line breaks at the start or end.\n\t\tconst trimmedPlainText = plainText.replace( trimRegex, '' );\n\n\t\tif (\n\t\t\ttrimmedPlainText !== '' &&\n\t\t\ttrimmedPlainText.indexOf( '\\n' ) === -1\n\t\t) {\n\t\t\treturn removeInvalidHTML(\n\t\t\t\tgetBlockInnerHTML( blocks[ 0 ] ),\n\t\t\t\tphrasingContentSchema\n\t\t\t).replace( trimRegex, '' );\n\t\t}\n\t}\n\n\treturn blocks;\n}\n"],"mappings":"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"}