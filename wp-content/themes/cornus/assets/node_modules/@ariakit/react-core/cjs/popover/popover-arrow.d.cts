import type { As, Options, Props } from "../utils/types.js";
import type { PopoverStore } from "./popover-store.js";
/**
 * Returns props to create a `PopoverArrow` component.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx
 * const store = usePopoverStore();
 * const props = usePopoverArrow({ store });
 * <Popover store={store}>
 *   <Role {...props} />
 *   Popover
 * </Popover>
 * ```
 */
export declare const usePopoverArrow: import("../utils/types.js").Hook<PopoverArrowOptions<"div">>;
/**
 * Renders an arrow inside a [`Popover`](https://ariakit.org/reference/popover)
 * component pointing to the anchor element.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx {4}
 * <PopoverProvider>
 *   <PopoverAnchor />
 *   <Popover>
 *     <PopoverArrow />
 *     Popover
 *   </Popover>
 * </PopoverProvider>
 * ```
 */
export declare const PopoverArrow: import("../utils/types.js").Component<PopoverArrowOptions<"div">>;
export interface PopoverArrowOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the
     * [`usePopoverStore`](https://ariakit.org/reference/use-popover-store) hook.
     * If not provided, the closest
     * [`Popover`](https://ariakit.org/reference/popover) or
     * [`PopoverProvider`](https://ariakit.org/reference/popover-provider)
     * components' context will be used.
     */
    store?: PopoverStore;
    /**
     * The size of the arrow.
     *
     * Live examples:
     * - [Selection Popover](https://ariakit.org/examples/popover-selection)
     * @default 30
     */
    size?: number;
}
export type PopoverArrowProps<T extends As = "div"> = Props<PopoverArrowOptions<T>>;
