import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { useEffect } from '@wordpress/element';
import { useDispatch, useSelect } from '@wordpress/data';
import { Modal, Button, __experimentalHStack as HStack } from '@wordpress/components';
import { __ } from '@wordpress/i18n';

/**
 * Internal dependencies
 */
import { store as blockEditorStore } from '../../store';
import { unlock } from '../../lock-unlock';
export function BlockRemovalWarningModal({
  rules
}) {
  const {
    clientIds,
    selectPrevious,
    message
  } = useSelect(select => unlock(select(blockEditorStore)).getRemovalPromptData());
  const {
    clearBlockRemovalPrompt,
    setBlockRemovalRules,
    privateRemoveBlocks
  } = unlock(useDispatch(blockEditorStore));

  // Load block removal rules, simultaneously signalling that the block
  // removal prompt is in place.
  useEffect(() => {
    setBlockRemovalRules(rules);
    return () => {
      setBlockRemovalRules();
    };
  }, [rules, setBlockRemovalRules]);
  if (!message) {
    return;
  }
  const onConfirmRemoval = () => {
    privateRemoveBlocks(clientIds, selectPrevious, /* force */true);
    clearBlockRemovalPrompt();
  };
  return createElement(Modal, {
    title: __('Be careful!'),
    onRequestClose: clearBlockRemovalPrompt,
    size: "medium"
  }, createElement("p", null, message), createElement(HStack, {
    justify: "right"
  }, createElement(Button, {
    variant: "tertiary",
    onClick: clearBlockRemovalPrompt
  }, __('Cancel')), createElement(Button, {
    variant: "primary",
    onClick: onConfirmRemoval
  }, __('Delete'))));
}
//# sourceMappingURL=index.js.map