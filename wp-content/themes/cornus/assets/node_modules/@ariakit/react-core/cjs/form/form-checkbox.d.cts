import type { CheckboxOptions } from "../checkbox/checkbox.js";
import type { As, Props } from "../utils/types.js";
import type { FormControlOptions } from "./form-control.js";
/**
 * Returns props to create a `FormCheckbox` component.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore({ defaultValues: { acceptTerms: false } });
 * const props = useFormCheckbox({ store, name: store.names.acceptTerms });
 * <Form store={store}>
 *   <label>
 *     <Role {...props} />
 *     Accept terms
 *   </label>
 * </Form>
 * ```
 */
export declare const useFormCheckbox: import("../utils/types.js").Hook<FormCheckboxOptions<"input">>;
/**
 * Renders a checkbox input as a form control, representing a boolean, string,
 * number, or array value.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx {9}
 * const form = useFormStore({
 *   defaultValues: {
 *     acceptTerms: false,
 *   },
 * });
 *
 * <Form store={form}>
 *   <label>
 *     <FormCheckbox name={form.names.acceptTerms} />
 *     Accept terms
 *   </label>
 * </Form>
 * ```
 */
export declare const FormCheckbox: import("../utils/types.js").Component<FormCheckboxOptions<"input">>;
export interface FormCheckboxOptions<T extends As = "input"> extends FormControlOptions<T>, Omit<CheckboxOptions<T>, "store" | "name"> {
}
export type FormCheckboxProps<T extends As = "input"> = Props<FormCheckboxOptions<T>>;
