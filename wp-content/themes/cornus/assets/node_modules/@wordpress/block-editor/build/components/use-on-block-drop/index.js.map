{"version":3,"names":["_element","require","_blocks","_data","_dom","_store","parseDropEvent","event","result","srcRootClientId","srcClientIds","srcIndex","type","blocks","dataTransfer","Object","assign","JSON","parse","getData","err","onBlockDrop","targetRootClientId","targetBlockIndex","getBlockIndex","getClientIdsOfDescendants","moveBlocks","insertOrReplaceBlocks","clearSelectedBlock","operation","getBlock","sourceRootClientId","sourceClientIds","dropType","blocksToInsert","map","block","cloneBlock","sourceBlockIndex","includes","some","id","clientId","isAtSameLevel","draggedBlockCount","length","insertIndex","onFilesDrop","getSettings","updateBlockAttributes","canInsertBlockType","files","mediaUpload","transformation","findTransform","getBlockTransforms","transform","blockName","isMatch","onHTMLDrop","HTML","pasteHandler","mode","useOnBlockDrop","options","nearestSide","getBlockOrder","getBlocksByClientId","isGroupable","useSelect","blockEditorStore","getGroupingBlockName","blocksStore","insertBlocks","moveBlocksToPosition","replaceBlocks","removeBlocks","useDispatch","registry","useRegistry","useCallback","updateSelection","initialPosition","clientIdsToReplace","Array","isArray","clientIds","blocksClientIds","areGroupableBlocks","undefined","targetBlock","push","unshift","groupInnerBlocks","createBlock","name","attributes","innerBlocks","areAllImages","every","galleryBlock","wrappedBlocks","layout","flexWrap","sourceBlocks","targetBlockClientIds","targetBlockClientId","batch","_onDrop","_onFilesDrop","_onHTMLDrop","getFilesFromDataTransfer","html"],"sources":["@wordpress/block-editor/src/components/use-on-block-drop/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport {\n\tcloneBlock,\n\tcreateBlock,\n\tfindTransform,\n\tgetBlockTransforms,\n\tpasteHandler,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\nimport { getFilesFromDataTransfer } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('react').SyntheticEvent} SyntheticEvent */\n/** @typedef {import('./types').WPDropOperation} WPDropOperation */\n\n/**\n * Retrieve the data for a block drop event.\n *\n * @param {SyntheticEvent} event The drop event.\n *\n * @return {Object} An object with block drag and drop data.\n */\nexport function parseDropEvent( event ) {\n\tlet result = {\n\t\tsrcRootClientId: null,\n\t\tsrcClientIds: null,\n\t\tsrcIndex: null,\n\t\ttype: null,\n\t\tblocks: null,\n\t};\n\n\tif ( ! event.dataTransfer ) {\n\t\treturn result;\n\t}\n\n\ttry {\n\t\tresult = Object.assign(\n\t\t\tresult,\n\t\t\tJSON.parse( event.dataTransfer.getData( 'wp-blocks' ) )\n\t\t);\n\t} catch ( err ) {\n\t\treturn result;\n\t}\n\n\treturn result;\n}\n\n/**\n * A function that returns an event handler function for block drop events.\n *\n * @param {string}   targetRootClientId        The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex          The index where the block(s) will be inserted.\n * @param {Function} getBlockIndex             A function that gets the index of a block.\n * @param {Function} getClientIdsOfDescendants A function that gets the client ids of descendant blocks.\n * @param {Function} moveBlocks                A function that moves blocks.\n * @param {Function} insertOrReplaceBlocks     A function that inserts or replaces blocks.\n * @param {Function} clearSelectedBlock        A function that clears block selection.\n * @param {string}   operation                 The type of operation to perform on drop. Could be `insert` or `replace` or `group`.\n * @param {Function} getBlock                  A function that returns a block given its client id.\n * @return {Function} The event handler for a block drop event.\n */\nexport function onBlockDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\tgetBlockIndex,\n\tgetClientIdsOfDescendants,\n\tmoveBlocks,\n\tinsertOrReplaceBlocks,\n\tclearSelectedBlock,\n\toperation,\n\tgetBlock\n) {\n\treturn ( event ) => {\n\t\tconst {\n\t\t\tsrcRootClientId: sourceRootClientId,\n\t\t\tsrcClientIds: sourceClientIds,\n\t\t\ttype: dropType,\n\t\t\tblocks,\n\t\t} = parseDropEvent( event );\n\n\t\t// If the user is inserting a block.\n\t\tif ( dropType === 'inserter' ) {\n\t\t\tclearSelectedBlock();\n\t\t\tconst blocksToInsert = blocks.map( ( block ) =>\n\t\t\t\tcloneBlock( block )\n\t\t\t);\n\t\t\tinsertOrReplaceBlocks( blocksToInsert, true, null );\n\t\t}\n\n\t\t// If the user is moving a block.\n\t\tif ( dropType === 'block' ) {\n\t\t\tconst sourceBlockIndex = getBlockIndex( sourceClientIds[ 0 ] );\n\n\t\t\t// If the user is dropping to the same position, return early.\n\t\t\tif (\n\t\t\t\tsourceRootClientId === targetRootClientId &&\n\t\t\t\tsourceBlockIndex === targetBlockIndex\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the user is attempting to drop a block within its own\n\t\t\t// nested blocks, return early as this would create infinite\n\t\t\t// recursion.\n\t\t\tif (\n\t\t\t\tsourceClientIds.includes( targetRootClientId ) ||\n\t\t\t\tgetClientIdsOfDescendants( sourceClientIds ).some(\n\t\t\t\t\t( id ) => id === targetRootClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the user is dropping a block over another block, replace both blocks\n\t\t\t// with a group block containing them\n\t\t\tif ( operation === 'group' ) {\n\t\t\t\tconst blocksToInsert = sourceClientIds.map( ( clientId ) =>\n\t\t\t\t\tgetBlock( clientId )\n\t\t\t\t);\n\t\t\t\tinsertOrReplaceBlocks(\n\t\t\t\t\tblocksToInsert,\n\t\t\t\t\ttrue,\n\t\t\t\t\tnull,\n\t\t\t\t\tsourceClientIds\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isAtSameLevel = sourceRootClientId === targetRootClientId;\n\t\t\tconst draggedBlockCount = sourceClientIds.length;\n\n\t\t\t// If the block is kept at the same level and moved downwards,\n\t\t\t// subtract to take into account that the blocks being dragged\n\t\t\t// were removed from the block list above the insertion point.\n\t\t\tconst insertIndex =\n\t\t\t\tisAtSameLevel && sourceBlockIndex < targetBlockIndex\n\t\t\t\t\t? targetBlockIndex - draggedBlockCount\n\t\t\t\t\t: targetBlockIndex;\n\n\t\t\tmoveBlocks( sourceClientIds, sourceRootClientId, insertIndex );\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related file drop events.\n *\n * @param {string}   targetRootClientId    The root client id where the block(s) will be inserted.\n * @param {Function} getSettings           A function that gets the block editor settings.\n * @param {Function} updateBlockAttributes A function that updates a block's attributes.\n * @param {Function} canInsertBlockType    A function that returns checks whether a block type can be inserted.\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\n *\n * @return {Function} The event handler for a block-related file drop event.\n */\nexport function onFilesDrop(\n\ttargetRootClientId,\n\tgetSettings,\n\tupdateBlockAttributes,\n\tcanInsertBlockType,\n\tinsertOrReplaceBlocks\n) {\n\treturn ( files ) => {\n\t\tif ( ! getSettings().mediaUpload ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst transformation = findTransform(\n\t\t\tgetBlockTransforms( 'from' ),\n\t\t\t( transform ) =>\n\t\t\t\ttransform.type === 'files' &&\n\t\t\t\tcanInsertBlockType( transform.blockName, targetRootClientId ) &&\n\t\t\t\ttransform.isMatch( files )\n\t\t);\n\n\t\tif ( transformation ) {\n\t\t\tconst blocks = transformation.transform(\n\t\t\t\tfiles,\n\t\t\t\tupdateBlockAttributes\n\t\t\t);\n\t\t\tinsertOrReplaceBlocks( blocks );\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related HTML drop events.\n *\n * @param {Function} insertOrReplaceBlocks A function that inserts or replaces blocks.\n *\n * @return {Function} The event handler for a block-related HTML drop event.\n */\nexport function onHTMLDrop( insertOrReplaceBlocks ) {\n\treturn ( HTML ) => {\n\t\tconst blocks = pasteHandler( { HTML, mode: 'BLOCKS' } );\n\n\t\tif ( blocks.length ) {\n\t\t\tinsertOrReplaceBlocks( blocks );\n\t\t}\n\t};\n}\n\n/**\n * A React hook for handling block drop events.\n *\n * @param {string}          targetRootClientId  The root client id where the block(s) will be inserted.\n * @param {number}          targetBlockIndex    The index where the block(s) will be inserted.\n * @param {Object}          options             The optional options.\n * @param {WPDropOperation} [options.operation] The type of operation to perform on drop. Could be `insert` or `replace` for now.\n *\n * @return {Function} A function to be passed to the onDrop handler.\n */\nexport default function useOnBlockDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\toptions = {}\n) {\n\tconst { operation = 'insert', nearestSide = 'right' } = options;\n\tconst {\n\t\tcanInsertBlockType,\n\t\tgetBlockIndex,\n\t\tgetClientIdsOfDescendants,\n\t\tgetBlockOrder,\n\t\tgetBlocksByClientId,\n\t\tgetSettings,\n\t\tgetBlock,\n\t\tisGroupable,\n\t} = useSelect( blockEditorStore );\n\tconst { getGroupingBlockName } = useSelect( blocksStore );\n\tconst {\n\t\tinsertBlocks,\n\t\tmoveBlocksToPosition,\n\t\tupdateBlockAttributes,\n\t\tclearSelectedBlock,\n\t\treplaceBlocks,\n\t\tremoveBlocks,\n\t} = useDispatch( blockEditorStore );\n\tconst registry = useRegistry();\n\n\tconst insertOrReplaceBlocks = useCallback(\n\t\t(\n\t\t\tblocks,\n\t\t\tupdateSelection = true,\n\t\t\tinitialPosition = 0,\n\t\t\tclientIdsToReplace = []\n\t\t) => {\n\t\t\tif ( ! Array.isArray( blocks ) ) blocks = [ blocks ];\n\n\t\t\tconst clientIds = getBlockOrder( targetRootClientId );\n\t\t\tconst clientId = clientIds[ targetBlockIndex ];\n\t\t\tconst blocksClientIds = blocks.map( ( block ) => block.clientId );\n\t\t\tconst areGroupableBlocks = isGroupable( [\n\t\t\t\t...blocksClientIds,\n\t\t\t\tclientId,\n\t\t\t] );\n\t\t\tif ( operation === 'replace' ) {\n\t\t\t\treplaceBlocks( clientId, blocks, undefined, initialPosition );\n\t\t\t} else if ( operation === 'group' && areGroupableBlocks ) {\n\t\t\t\tconst targetBlock = getBlock( clientId );\n\t\t\t\tif ( nearestSide === 'left' ) {\n\t\t\t\t\tblocks.push( targetBlock );\n\t\t\t\t} else {\n\t\t\t\t\tblocks.unshift( targetBlock );\n\t\t\t\t}\n\n\t\t\t\tconst groupInnerBlocks = blocks.map( ( block ) => {\n\t\t\t\t\treturn createBlock(\n\t\t\t\t\t\tblock.name,\n\t\t\t\t\t\tblock.attributes,\n\t\t\t\t\t\tblock.innerBlocks\n\t\t\t\t\t);\n\t\t\t\t} );\n\n\t\t\t\tconst areAllImages = blocks.every( ( block ) => {\n\t\t\t\t\treturn block.name === 'core/image';\n\t\t\t\t} );\n\n\t\t\t\tconst galleryBlock = canInsertBlockType(\n\t\t\t\t\t'core/gallery',\n\t\t\t\t\ttargetRootClientId\n\t\t\t\t);\n\n\t\t\t\tconst wrappedBlocks = createBlock(\n\t\t\t\t\tareAllImages && galleryBlock\n\t\t\t\t\t\t? 'core/gallery'\n\t\t\t\t\t\t: getGroupingBlockName(),\n\t\t\t\t\t{\n\t\t\t\t\t\tlayout: {\n\t\t\t\t\t\t\ttype: 'flex',\n\t\t\t\t\t\t\tflexWrap:\n\t\t\t\t\t\t\t\tareAllImages && galleryBlock ? null : 'nowrap',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tgroupInnerBlocks\n\t\t\t\t);\n\t\t\t\t// Need to make sure both the target block and the block being dragged are replaced\n\t\t\t\t// otherwise the dragged block will be duplicated.\n\t\t\t\treplaceBlocks(\n\t\t\t\t\t[ clientId, ...clientIdsToReplace ],\n\t\t\t\t\twrappedBlocks,\n\t\t\t\t\tundefined,\n\t\t\t\t\tinitialPosition\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tinsertBlocks(\n\t\t\t\t\tblocks,\n\t\t\t\t\ttargetBlockIndex,\n\t\t\t\t\ttargetRootClientId,\n\t\t\t\t\tupdateSelection,\n\t\t\t\t\tinitialPosition\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tgetBlockOrder,\n\t\t\ttargetRootClientId,\n\t\t\ttargetBlockIndex,\n\t\t\tisGroupable,\n\t\t\toperation,\n\t\t\treplaceBlocks,\n\t\t\tgetBlock,\n\t\t\tnearestSide,\n\t\t\tcanInsertBlockType,\n\t\t\tgetGroupingBlockName,\n\t\t\tinsertBlocks,\n\t\t]\n\t);\n\n\tconst moveBlocks = useCallback(\n\t\t( sourceClientIds, sourceRootClientId, insertIndex ) => {\n\t\t\tif ( operation === 'replace' ) {\n\t\t\t\tconst sourceBlocks = getBlocksByClientId( sourceClientIds );\n\t\t\t\tconst targetBlockClientIds =\n\t\t\t\t\tgetBlockOrder( targetRootClientId );\n\t\t\t\tconst targetBlockClientId =\n\t\t\t\t\ttargetBlockClientIds[ targetBlockIndex ];\n\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\t// Remove the source blocks.\n\t\t\t\t\tremoveBlocks( sourceClientIds, false );\n\t\t\t\t\t// Replace the target block with the source blocks.\n\t\t\t\t\treplaceBlocks(\n\t\t\t\t\t\ttargetBlockClientId,\n\t\t\t\t\t\tsourceBlocks,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tmoveBlocksToPosition(\n\t\t\t\t\tsourceClientIds,\n\t\t\t\t\tsourceRootClientId,\n\t\t\t\t\ttargetRootClientId,\n\t\t\t\t\tinsertIndex\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\toperation,\n\t\t\tgetBlockOrder,\n\t\t\tgetBlocksByClientId,\n\t\t\tmoveBlocksToPosition,\n\t\t\tregistry,\n\t\t\tremoveBlocks,\n\t\t\treplaceBlocks,\n\t\t\ttargetBlockIndex,\n\t\t\ttargetRootClientId,\n\t\t]\n\t);\n\n\tconst _onDrop = onBlockDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex,\n\t\tgetBlockIndex,\n\t\tgetClientIdsOfDescendants,\n\t\tmoveBlocks,\n\t\tinsertOrReplaceBlocks,\n\t\tclearSelectedBlock,\n\t\toperation,\n\t\tgetBlock\n\t);\n\tconst _onFilesDrop = onFilesDrop(\n\t\ttargetRootClientId,\n\t\tgetSettings,\n\t\tupdateBlockAttributes,\n\t\tcanInsertBlockType,\n\t\tinsertOrReplaceBlocks\n\t);\n\tconst _onHTMLDrop = onHTMLDrop( insertOrReplaceBlocks );\n\n\treturn ( event ) => {\n\t\tconst files = getFilesFromDataTransfer( event.dataTransfer );\n\t\tconst html = event.dataTransfer.getData( 'text/html' );\n\n\t\t/**\n\t\t * From Windows Chrome 96, the `event.dataTransfer` returns both file object and HTML.\n\t\t * The order of the checks is important to recognise the HTML drop.\n\t\t */\n\t\tif ( html ) {\n\t\t\t_onHTMLDrop( html );\n\t\t} else if ( files.length ) {\n\t\t\t_onFilesDrop( files );\n\t\t} else {\n\t\t\t_onDrop( event );\n\t\t}\n\t};\n}\n"],"mappings":"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"}