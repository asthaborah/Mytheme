{"version":3,"names":["_rememo","_interopRequireDefault","require","_data","_selectors","_utils","_utils2","_constants","_lockUnlock","_privateKeys","_getBlockSettings","isBlockInterfaceHidden","state","getLastInsertedBlocksClientIds","lastBlockInserted","clientIds","getBlockWithoutAttributes","clientId","blocks","byClientId","get","isBlockSubtreeDisabled","isChildSubtreeDisabled","childClientId","getBlockEditingMode","getBlockOrder","every","exports","getEnabledClientIdsTreeUnmemoized","rootClientId","blockOrder","result","innerBlocks","push","getEnabledClientIdsTree","createSelector","order","blockEditingModes","settings","templateLock","blockListSettings","getEnabledBlockParents","ascending","getBlockParents","filter","parent","parents","getRemovalPromptData","removalPromptData","getBlockRemovalRules","blockRemovalRules","getOpenedBlockSettingsMenu","openedBlockSettingsMenu","getStyleOverrides","styleOverrides","getRegisteredInserterMediaCategories","registeredInserterMediaCategories","getInserterMediaCategories","inserterMediaCategories","allowedMimeTypes","enableOpenverseMediaCategory","length","coreInserterMediaCategoriesNames","map","name","mergedCategories","includes","category","Object","values","some","mimeType","startsWith","mediaType","hasAllowedPatterns","createRegistrySelector","select","getAllPatterns","__experimentalGetParsedPattern","unlock","STORE_NAME","patterns","allowedBlockTypes","getSettings","inserter","checkAllowListRecursive","blockName","canInsertBlockType","getAllPatternsDependants","_state$settings$selec","__experimentalBlockPatterns","__experimentalUserPatternCategories","__experimentalReusableBlocks","userPatterns","userPattern","id","type","INSERTER_PATTERN_TYPES","user","title","raw","categories","wp_pattern_category","catId","find","slug","content","syncStatus","wp_pattern_sync_status","selectBlockPatternsKey","x","index","arr","findIndex","y","getLastFocus","lastFocus","isDragging"],"sources":["@wordpress/block-editor/src/store/private-selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockOrder,\n\tgetBlockParents,\n\tgetBlockEditingMode,\n\tgetSettings,\n\tcanInsertBlockType,\n} from './selectors';\nimport { checkAllowListRecursive, getAllPatternsDependants } from './utils';\nimport { INSERTER_PATTERN_TYPES } from '../components/inserter/block-patterns-tab/utils';\nimport { STORE_NAME } from './constants';\nimport { unlock } from '../lock-unlock';\nimport { selectBlockPatternsKey } from './private-keys';\n\nexport { getBlockSettings } from './get-block-settings';\n\n/**\n * Returns true if the block interface is hidden, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the block toolbar is hidden.\n */\nexport function isBlockInterfaceHidden( state ) {\n\treturn state.isBlockInterfaceHidden;\n}\n\n/**\n * Gets the client ids of the last inserted blocks.\n *\n * @param {Object} state Global application state.\n * @return {Array|undefined} Client Ids of the last inserted block(s).\n */\nexport function getLastInsertedBlocksClientIds( state ) {\n\treturn state?.lastBlockInserted?.clientIds;\n}\n\nexport function getBlockWithoutAttributes( state, clientId ) {\n\treturn state.blocks.byClientId.get( clientId );\n}\n\n/**\n * Returns true if all of the descendants of a block with the given client ID\n * have an editing mode of 'disabled', or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID.\n *\n * @return {boolean} Whether the block descendants are disabled.\n */\nexport const isBlockSubtreeDisabled = ( state, clientId ) => {\n\tconst isChildSubtreeDisabled = ( childClientId ) => {\n\t\treturn (\n\t\t\tgetBlockEditingMode( state, childClientId ) === 'disabled' &&\n\t\t\tgetBlockOrder( state, childClientId ).every(\n\t\t\t\tisChildSubtreeDisabled\n\t\t\t)\n\t\t);\n\t};\n\treturn getBlockOrder( state, clientId ).every( isChildSubtreeDisabled );\n};\n\nfunction getEnabledClientIdsTreeUnmemoized( state, rootClientId ) {\n\tconst blockOrder = getBlockOrder( state, rootClientId );\n\tconst result = [];\n\n\tfor ( const clientId of blockOrder ) {\n\t\tconst innerBlocks = getEnabledClientIdsTreeUnmemoized(\n\t\t\tstate,\n\t\t\tclientId\n\t\t);\n\t\tif ( getBlockEditingMode( state, clientId ) !== 'disabled' ) {\n\t\t\tresult.push( { clientId, innerBlocks } );\n\t\t} else {\n\t\t\tresult.push( ...innerBlocks );\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Returns a tree of block objects with only clientID and innerBlocks set.\n * Blocks with a 'disabled' editing mode are not included.\n *\n * @param {Object}  state        Global application state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Tree of block objects with only clientID and innerBlocks set.\n */\nexport const getEnabledClientIdsTree = createSelector(\n\tgetEnabledClientIdsTreeUnmemoized,\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Returns a list of a given block's ancestors, from top to bottom. Blocks with\n * a 'disabled' editing mode are excluded.\n *\n * @see getBlockParents\n *\n * @param {Object}  state     Global application state.\n * @param {string}  clientId  The block client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top\n *                            to bottom (false).\n */\nexport const getEnabledBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\treturn getBlockParents( state, clientId, ascending ).filter(\n\t\t\t( parent ) => getBlockEditingMode( state, parent ) !== 'disabled'\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.parents,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Selector that returns the data needed to display a prompt when certain\n * blocks are removed, or `false` if no such prompt is requested.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nexport function getRemovalPromptData( state ) {\n\treturn state.removalPromptData;\n}\n\n/**\n * Returns true if removal prompt exists, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether removal prompt exists.\n */\nexport function getBlockRemovalRules( state ) {\n\treturn state.blockRemovalRules;\n}\n\n/**\n * Returns the client ID of the block settings menu that is currently open.\n *\n * @param {Object} state Global application state.\n * @return {string|null} The client ID of the block menu that is currently open.\n */\nexport function getOpenedBlockSettingsMenu( state ) {\n\treturn state.openedBlockSettingsMenu;\n}\n\n/**\n * Returns all style overrides, intended to be merged with global editor styles.\n *\n * @param {Object} state Global application state.\n *\n * @return {Map} A map of style IDs to style overrides.\n */\nexport function getStyleOverrides( state ) {\n\treturn state.styleOverrides;\n}\n\n/** @typedef {import('./actions').InserterMediaCategory} InserterMediaCategory */\n/**\n * Returns the registered inserter media categories through the public API.\n *\n * @param {Object} state Editor state.\n *\n * @return {InserterMediaCategory[]} Inserter media categories.\n */\nexport function getRegisteredInserterMediaCategories( state ) {\n\treturn state.registeredInserterMediaCategories;\n}\n\n/**\n * Returns an array containing the allowed inserter media categories.\n * It merges the registered media categories from extenders with the\n * core ones. It also takes into account the allowed `mime_types`, which\n * can be altered by `upload_mimes` filter and restrict some of them.\n *\n * @param {Object} state Global application state.\n *\n * @return {InserterMediaCategory[]} Client IDs of descendants.\n */\nexport const getInserterMediaCategories = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tsettings: {\n\t\t\t\tinserterMediaCategories,\n\t\t\t\tallowedMimeTypes,\n\t\t\t\tenableOpenverseMediaCategory,\n\t\t\t},\n\t\t\tregisteredInserterMediaCategories,\n\t\t} = state;\n\t\t// The allowed `mime_types` can be altered by `upload_mimes` filter and restrict\n\t\t// some of them. In this case we shouldn't add the category to the available media\n\t\t// categories list in the inserter.\n\t\tif (\n\t\t\t( ! inserterMediaCategories &&\n\t\t\t\t! registeredInserterMediaCategories.length ) ||\n\t\t\t! allowedMimeTypes\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst coreInserterMediaCategoriesNames =\n\t\t\tinserterMediaCategories?.map( ( { name } ) => name ) || [];\n\t\tconst mergedCategories = [\n\t\t\t...( inserterMediaCategories || [] ),\n\t\t\t...( registeredInserterMediaCategories || [] ).filter(\n\t\t\t\t( { name } ) =>\n\t\t\t\t\t! coreInserterMediaCategoriesNames.includes( name )\n\t\t\t),\n\t\t];\n\t\treturn mergedCategories.filter( ( category ) => {\n\t\t\t// Check if Openverse category is enabled.\n\t\t\tif (\n\t\t\t\t! enableOpenverseMediaCategory &&\n\t\t\t\tcategory.name === 'openverse'\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Object.values( allowedMimeTypes ).some( ( mimeType ) =>\n\t\t\t\tmimeType.startsWith( `${ category.mediaType }/` )\n\t\t\t);\n\t\t} );\n\t},\n\t( state ) => [\n\t\tstate.settings.inserterMediaCategories,\n\t\tstate.settings.allowedMimeTypes,\n\t\tstate.settings.enableOpenverseMediaCategory,\n\t\tstate.registeredInserterMediaCategories,\n\t]\n);\n\n/**\n * Returns whether there is at least one allowed pattern for inner blocks children.\n * This is useful for deferring the parsing of all patterns until needed.\n *\n * @param {Object} state               Editor state.\n * @param {string} [rootClientId=null] Target root client ID.\n *\n * @return {boolean} If there is at least one allowed pattern.\n */\nexport const hasAllowedPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst { getAllPatterns, __experimentalGetParsedPattern } = unlock(\n\t\t\t\tselect( STORE_NAME )\n\t\t\t);\n\t\t\tconst patterns = getAllPatterns();\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\t\treturn patterns.some( ( { name, inserter = true } ) => {\n\t\t\t\tif ( ! inserter ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst { blocks } = __experimentalGetParsedPattern( name );\n\t\t\t\treturn (\n\t\t\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes ) &&\n\t\t\t\t\tblocks.every( ( { name: blockName } ) =>\n\t\t\t\t\t\tcanInsertBlockType( state, blockName, rootClientId )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} );\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\tgetAllPatternsDependants( select )( state ),\n\t\t\tstate.settings.allowedBlockTypes,\n\t\t\tstate.settings.templateLock,\n\t\t\tstate.blockListSettings[ rootClientId ],\n\t\t\tstate.blocks.byClientId.get( rootClientId ),\n\t\t]\n\t)\n);\n\nexport const getAllPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector( ( state ) => {\n\t\t// This setting is left for back compat.\n\t\tconst {\n\t\t\t__experimentalBlockPatterns = [],\n\t\t\t__experimentalUserPatternCategories = [],\n\t\t\t__experimentalReusableBlocks = [],\n\t\t} = state.settings;\n\t\tconst userPatterns = ( __experimentalReusableBlocks ?? [] ).map(\n\t\t\t( userPattern ) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: `core/block/${ userPattern.id }`,\n\t\t\t\t\tid: userPattern.id,\n\t\t\t\t\ttype: INSERTER_PATTERN_TYPES.user,\n\t\t\t\t\ttitle: userPattern.title.raw,\n\t\t\t\t\tcategories: userPattern.wp_pattern_category.map(\n\t\t\t\t\t\t( catId ) => {\n\t\t\t\t\t\t\tconst category = (\n\t\t\t\t\t\t\t\t__experimentalUserPatternCategories ?? []\n\t\t\t\t\t\t\t).find( ( { id } ) => id === catId );\n\t\t\t\t\t\t\treturn category ? category.slug : catId;\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\tcontent: userPattern.content.raw,\n\t\t\t\t\tsyncStatus: userPattern.wp_pattern_sync_status,\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\treturn [\n\t\t\t...userPatterns,\n\t\t\t...__experimentalBlockPatterns,\n\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ?? [] ),\n\t\t].filter(\n\t\t\t( x, index, arr ) =>\n\t\t\t\tindex === arr.findIndex( ( y ) => x.name === y.name )\n\t\t);\n\t}, getAllPatternsDependants( select ) )\n);\n\n/**\n * Returns the element of the last element that had focus when focus left the editor canvas.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object} Element.\n */\nexport function getLastFocus( state ) {\n\treturn state.lastFocus;\n}\n\n/**\n * Returns true if the user is dragging anything, or false otherwise. It is possible for a\n * user to be dragging data from outside of the editor, so this selector is separate from\n * the `isDraggingBlocks` selector which only returns true if the user is dragging blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging.\n */\nexport function isDragging( state ) {\n\treturn state.isDragging;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAKA,IAAAC,KAAA,GAAAD,OAAA;AAKA,IAAAE,UAAA,GAAAF,OAAA;AAOA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,UAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AAEA,IAAAQ,iBAAA,GAAAR,OAAA;AA1BA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASS,sBAAsBA,CAAEC,KAAK,EAAG;EAC/C,OAAOA,KAAK,CAACD,sBAAsB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,8BAA8BA,CAAED,KAAK,EAAG;EACvD,OAAOA,KAAK,EAAEE,iBAAiB,EAAEC,SAAS;AAC3C;AAEO,SAASC,yBAAyBA,CAAEJ,KAAK,EAAEK,QAAQ,EAAG;EAC5D,OAAOL,KAAK,CAACM,MAAM,CAACC,UAAU,CAACC,GAAG,CAAEH,QAAS,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMI,sBAAsB,GAAGA,CAAET,KAAK,EAAEK,QAAQ,KAAM;EAC5D,MAAMK,sBAAsB,GAAKC,aAAa,IAAM;IACnD,OACC,IAAAC,8BAAmB,EAAEZ,KAAK,EAAEW,aAAc,CAAC,KAAK,UAAU,IAC1D,IAAAE,wBAAa,EAAEb,KAAK,EAAEW,aAAc,CAAC,CAACG,KAAK,CAC1CJ,sBACD,CAAC;EAEH,CAAC;EACD,OAAO,IAAAG,wBAAa,EAAEb,KAAK,EAAEK,QAAS,CAAC,CAACS,KAAK,CAAEJ,sBAAuB,CAAC;AACxE,CAAC;AAACK,OAAA,CAAAN,sBAAA,GAAAA,sBAAA;AAEF,SAASO,iCAAiCA,CAAEhB,KAAK,EAAEiB,YAAY,EAAG;EACjE,MAAMC,UAAU,GAAG,IAAAL,wBAAa,EAAEb,KAAK,EAAEiB,YAAa,CAAC;EACvD,MAAME,MAAM,GAAG,EAAE;EAEjB,KAAM,MAAMd,QAAQ,IAAIa,UAAU,EAAG;IACpC,MAAME,WAAW,GAAGJ,iCAAiC,CACpDhB,KAAK,EACLK,QACD,CAAC;IACD,IAAK,IAAAO,8BAAmB,EAAEZ,KAAK,EAAEK,QAAS,CAAC,KAAK,UAAU,EAAG;MAC5Dc,MAAM,CAACE,IAAI,CAAE;QAAEhB,QAAQ;QAAEe;MAAY,CAAE,CAAC;IACzC,CAAC,MAAM;MACND,MAAM,CAACE,IAAI,CAAE,GAAGD,WAAY,CAAC;IAC9B;EACD;EAEA,OAAOD,MAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,uBAAuB,GAAAP,OAAA,CAAAO,uBAAA,GAAG,IAAAC,eAAc,EACpDP,iCAAiC,EAC/BhB,KAAK,IAAM,CACZA,KAAK,CAACM,MAAM,CAACkB,KAAK,EAClBxB,KAAK,CAACyB,iBAAiB,EACvBzB,KAAK,CAAC0B,QAAQ,CAACC,YAAY,EAC3B3B,KAAK,CAAC4B,iBAAiB,CAEzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,sBAAsB,GAAAd,OAAA,CAAAc,sBAAA,GAAG,IAAAN,eAAc,EACnD,CAAEvB,KAAK,EAAEK,QAAQ,EAAEyB,SAAS,GAAG,KAAK,KAAM;EACzC,OAAO,IAAAC,0BAAe,EAAE/B,KAAK,EAAEK,QAAQ,EAAEyB,SAAU,CAAC,CAACE,MAAM,CACxDC,MAAM,IAAM,IAAArB,8BAAmB,EAAEZ,KAAK,EAAEiC,MAAO,CAAC,KAAK,UACxD,CAAC;AACF,CAAC,EACCjC,KAAK,IAAM,CACZA,KAAK,CAACM,MAAM,CAAC4B,OAAO,EACpBlC,KAAK,CAACyB,iBAAiB,EACvBzB,KAAK,CAAC0B,QAAQ,CAACC,YAAY,EAC3B3B,KAAK,CAAC4B,iBAAiB,CAEzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,oBAAoBA,CAAEnC,KAAK,EAAG;EAC7C,OAAOA,KAAK,CAACoC,iBAAiB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,CAAErC,KAAK,EAAG;EAC7C,OAAOA,KAAK,CAACsC,iBAAiB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,0BAA0BA,CAAEvC,KAAK,EAAG;EACnD,OAAOA,KAAK,CAACwC,uBAAuB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAAEzC,KAAK,EAAG;EAC1C,OAAOA,KAAK,CAAC0C,cAAc;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oCAAoCA,CAAE3C,KAAK,EAAG;EAC7D,OAAOA,KAAK,CAAC4C,iCAAiC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,0BAA0B,GAAA9B,OAAA,CAAA8B,0BAAA,GAAG,IAAAtB,eAAc,EACrDvB,KAAK,IAAM;EACZ,MAAM;IACL0B,QAAQ,EAAE;MACToB,uBAAuB;MACvBC,gBAAgB;MAChBC;IACD,CAAC;IACDJ;EACD,CAAC,GAAG5C,KAAK;EACT;EACA;EACA;EACA,IACG,CAAE8C,uBAAuB,IAC1B,CAAEF,iCAAiC,CAACK,MAAM,IAC3C,CAAEF,gBAAgB,EACjB;IACD;EACD;EACA,MAAMG,gCAAgC,GACrCJ,uBAAuB,EAAEK,GAAG,CAAE,CAAE;IAAEC;EAAK,CAAC,KAAMA,IAAK,CAAC,IAAI,EAAE;EAC3D,MAAMC,gBAAgB,GAAG,CACxB,IAAKP,uBAAuB,IAAI,EAAE,CAAE,EACpC,GAAG,CAAEF,iCAAiC,IAAI,EAAE,EAAGZ,MAAM,CACpD,CAAE;IAAEoB;EAAK,CAAC,KACT,CAAEF,gCAAgC,CAACI,QAAQ,CAAEF,IAAK,CACpD,CAAC,CACD;EACD,OAAOC,gBAAgB,CAACrB,MAAM,CAAIuB,QAAQ,IAAM;IAC/C;IACA,IACC,CAAEP,4BAA4B,IAC9BO,QAAQ,CAACH,IAAI,KAAK,WAAW,EAC5B;MACD,OAAO,KAAK;IACb;IACA,OAAOI,MAAM,CAACC,MAAM,CAAEV,gBAAiB,CAAC,CAACW,IAAI,CAAIC,QAAQ,IACxDA,QAAQ,CAACC,UAAU,CAAG,GAAGL,QAAQ,CAACM,SAAW,GAAG,CACjD,CAAC;EACF,CAAE,CAAC;AACJ,CAAC,EACC7D,KAAK,IAAM,CACZA,KAAK,CAAC0B,QAAQ,CAACoB,uBAAuB,EACtC9C,KAAK,CAAC0B,QAAQ,CAACqB,gBAAgB,EAC/B/C,KAAK,CAAC0B,QAAQ,CAACsB,4BAA4B,EAC3ChD,KAAK,CAAC4C,iCAAiC,CAEzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMkB,kBAAkB,GAAA/C,OAAA,CAAA+C,kBAAA,GAAG,IAAAC,4BAAsB,EAAIC,MAAM,IACjE,IAAAzC,eAAc,EACb,CAAEvB,KAAK,EAAEiB,YAAY,GAAG,IAAI,KAAM;EACjC,MAAM;IAAEgD,cAAc;IAAEC;EAA+B,CAAC,GAAG,IAAAC,kBAAM,EAChEH,MAAM,CAAEI,qBAAW,CACpB,CAAC;EACD,MAAMC,QAAQ,GAAGJ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEK;EAAkB,CAAC,GAAG,IAAAC,sBAAW,EAAEvE,KAAM,CAAC;EAClD,OAAOqE,QAAQ,CAACX,IAAI,CAAE,CAAE;IAAEN,IAAI;IAAEoB,QAAQ,GAAG;EAAK,CAAC,KAAM;IACtD,IAAK,CAAEA,QAAQ,EAAG;MACjB,OAAO,KAAK;IACb;IACA,MAAM;MAAElE;IAAO,CAAC,GAAG4D,8BAA8B,CAAEd,IAAK,CAAC;IACzD,OACC,IAAAqB,8BAAuB,EAAEnE,MAAM,EAAEgE,iBAAkB,CAAC,IACpDhE,MAAM,CAACQ,KAAK,CAAE,CAAE;MAAEsC,IAAI,EAAEsB;IAAU,CAAC,KAClC,IAAAC,6BAAkB,EAAE3E,KAAK,EAAE0E,SAAS,EAAEzD,YAAa,CACpD,CAAC;EAEH,CAAE,CAAC;AACJ,CAAC,EACD,CAAEjB,KAAK,EAAEiB,YAAY,KAAM,CAC1B,IAAA2D,+BAAwB,EAAEZ,MAAO,CAAC,CAAEhE,KAAM,CAAC,EAC3CA,KAAK,CAAC0B,QAAQ,CAAC4C,iBAAiB,EAChCtE,KAAK,CAAC0B,QAAQ,CAACC,YAAY,EAC3B3B,KAAK,CAAC4B,iBAAiB,CAAEX,YAAY,CAAE,EACvCjB,KAAK,CAACM,MAAM,CAACC,UAAU,CAACC,GAAG,CAAES,YAAa,CAAC,CAE7C,CACD,CAAC;AAEM,MAAMgD,cAAc,GAAAlD,OAAA,CAAAkD,cAAA,GAAG,IAAAF,4BAAsB,EAAIC,MAAM,IAC7D,IAAAzC,eAAc,EAAIvB,KAAK,IAAM;EAAA,IAAA6E,qBAAA;EAC5B;EACA,MAAM;IACLC,2BAA2B,GAAG,EAAE;IAChCC,mCAAmC,GAAG,EAAE;IACxCC,4BAA4B,GAAG;EAChC,CAAC,GAAGhF,KAAK,CAAC0B,QAAQ;EAClB,MAAMuD,YAAY,GAAG,CAAED,4BAA4B,aAA5BA,4BAA4B,cAA5BA,4BAA4B,GAAI,EAAE,EAAG7B,GAAG,CAC5D+B,WAAW,IAAM;IAClB,OAAO;MACN9B,IAAI,EAAG,cAAc8B,WAAW,CAACC,EAAI,EAAC;MACtCA,EAAE,EAAED,WAAW,CAACC,EAAE;MAClBC,IAAI,EAAEC,8BAAsB,CAACC,IAAI;MACjCC,KAAK,EAAEL,WAAW,CAACK,KAAK,CAACC,GAAG;MAC5BC,UAAU,EAAEP,WAAW,CAACQ,mBAAmB,CAACvC,GAAG,CAC5CwC,KAAK,IAAM;QACZ,MAAMpC,QAAQ,GAAG,CAChBwB,mCAAmC,aAAnCA,mCAAmC,cAAnCA,mCAAmC,GAAI,EAAE,EACxCa,IAAI,CAAE,CAAE;UAAET;QAAG,CAAC,KAAMA,EAAE,KAAKQ,KAAM,CAAC;QACpC,OAAOpC,QAAQ,GAAGA,QAAQ,CAACsC,IAAI,GAAGF,KAAK;MACxC,CACD,CAAC;MACDG,OAAO,EAAEZ,WAAW,CAACY,OAAO,CAACN,GAAG;MAChCO,UAAU,EAAEb,WAAW,CAACc;IACzB,CAAC;EACF,CACD,CAAC;EACD,OAAO,CACN,GAAGf,YAAY,EACf,GAAGH,2BAA2B,EAC9B,KAAAD,qBAAA,GAAK7E,KAAK,CAAC0B,QAAQ,CAAEuE,mCAAsB,CAAE,GAAIjC,MAAO,CAAC,cAAAa,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAE,CACjE,CAAC7C,MAAM,CACP,CAAEkE,CAAC,EAAEC,KAAK,EAAEC,GAAG,KACdD,KAAK,KAAKC,GAAG,CAACC,SAAS,CAAIC,CAAC,IAAMJ,CAAC,CAAC9C,IAAI,KAAKkD,CAAC,CAAClD,IAAK,CACtD,CAAC;AACF,CAAC,EAAE,IAAAwB,+BAAwB,EAAEZ,MAAO,CAAE,CACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASuC,YAAYA,CAAEvG,KAAK,EAAG;EACrC,OAAOA,KAAK,CAACwG,SAAS;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CAAEzG,KAAK,EAAG;EACnC,OAAOA,KAAK,CAACyG,UAAU;AACxB"}