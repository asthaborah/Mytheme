"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _label = _interopRequireDefault(require("./label"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ResponsiveBlockControl(props) {
  const {
    title,
    property,
    toggleLabel,
    onIsResponsiveChange,
    renderDefaultControl,
    renderResponsiveControls,
    isResponsive = false,
    defaultLabel = {
      id: 'all',
      label: (0, _i18n._x)('All', 'screen sizes')
    },
    viewports = [{
      id: 'small',
      label: (0, _i18n.__)('Small screens')
    }, {
      id: 'medium',
      label: (0, _i18n.__)('Medium screens')
    }, {
      id: 'large',
      label: (0, _i18n.__)('Large screens')
    }]
  } = props;
  if (!title || !property || !renderDefaultControl) {
    return null;
  }
  const toggleControlLabel = toggleLabel || (0, _i18n.sprintf)( /* translators: %s: Property value for the control (eg: margin, padding, etc.). */
  (0, _i18n.__)('Use the same %s on all screen sizes.'), property);
  const toggleHelpText = (0, _i18n.__)('Toggle between using the same value for all screen sizes or using a unique value per screen size.');
  const defaultControl = renderDefaultControl((0, _react.createElement)(_label.default, {
    property: property,
    viewport: defaultLabel
  }), defaultLabel);
  const defaultResponsiveControls = () => {
    return viewports.map(viewport => (0, _react.createElement)(_element.Fragment, {
      key: viewport.id
    }, renderDefaultControl((0, _react.createElement)(_label.default, {
      property: property,
      viewport: viewport
    }), viewport)));
  };
  return (0, _react.createElement)("fieldset", {
    className: "block-editor-responsive-block-control"
  }, (0, _react.createElement)("legend", {
    className: "block-editor-responsive-block-control__title"
  }, title), (0, _react.createElement)("div", {
    className: "block-editor-responsive-block-control__inner"
  }, (0, _react.createElement)(_components.ToggleControl, {
    __nextHasNoMarginBottom: true,
    className: "block-editor-responsive-block-control__toggle",
    label: toggleControlLabel,
    checked: !isResponsive,
    onChange: onIsResponsiveChange,
    help: toggleHelpText
  }), (0, _react.createElement)("div", {
    className: (0, _classnames.default)('block-editor-responsive-block-control__group', {
      'is-responsive': isResponsive
    })
  }, !isResponsive && defaultControl, isResponsive && (renderResponsiveControls ? renderResponsiveControls(viewports) : defaultResponsiveControls()))));
}
var _default = exports.default = ResponsiveBlockControl;
//# sourceMappingURL=index.js.map