import type { ButtonOptions } from "../button/button.js";
import type { As, Props } from "../utils/types.js";
import type { FormStore } from "./form-store.js";
/**
 * Returns props to create a `FormReset` component.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore();
 * const props = useFormReset({ store });
 * <Form store={store}>
 *   <Role {...props}>Reset</Role>
 * </Form>
 * ```
 */
export declare const useFormReset: import("../utils/types.js").Hook<FormResetOptions<"button">>;
/**
 * Renders a button that resets the form to its initial values, as defined by
 * the
 * [`defaultValues`](https://ariakit.org/reference/use-form-store#defaultvalues)
 * prop given to the form store.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx {4}
 * const form = useFormStore();
 *
 * <Form store={form}>
 *   <FormReset>Reset</FormReset>
 * </Form>
 * ```
 */
export declare const FormReset: import("../utils/types.js").Component<FormResetOptions<"button">>;
export interface FormResetOptions<T extends As = "button"> extends ButtonOptions<T> {
    /**
     * Object returned by the
     * [`useFormStore`](https://ariakit.org/reference/use-form-store) hook. If not
     * provided, the closest [`Form`](https://ariakit.org/reference/form) or
     * [`FormProvider`](https://ariakit.org/reference/form-provider) components'
     * context will be used.
     */
    store?: FormStore;
}
export type FormResetProps<T extends As = "button"> = Props<FormResetOptions<T>>;
