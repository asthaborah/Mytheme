"use client";
import {
  useComboboxProviderContext
} from "../__chunks/W76OTZCC.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/3ORBWXWF.js";
import "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/combobox/combobox-label.ts
import { invariant } from "@ariakit/core/utils/misc";
var useComboboxLabel = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxLabel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = __spreadValues({
      htmlFor: comboboxId
    }, props);
    return props;
  }
);
var ComboboxLabel = createMemoComponent(
  (props) => {
    const htmlProps = useComboboxLabel(props);
    return createElement("label", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxLabel.displayName = "ComboboxLabel";
}
export {
  ComboboxLabel,
  useComboboxLabel
};
