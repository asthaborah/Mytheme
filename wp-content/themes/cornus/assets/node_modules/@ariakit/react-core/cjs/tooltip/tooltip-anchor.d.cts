import type { HovercardAnchorOptions } from "../hovercard/hovercard-anchor.js";
import type { As, Props } from "../utils/types.js";
import type { TooltipStore } from "./tooltip-store.js";
/**
 * Returns props to create a `TooltipAnchor` component.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const store = useToolTipStore();
 * const props = useTooltipAnchor({ store });
 * <Role {...props}>Anchor</Role>
 * <Tooltip store={store}>Tooltip</Tooltip>
 * ```
 */
export declare const useTooltipAnchor: import("../utils/types.js").Hook<TooltipAnchorOptions<"div">>;
/**
 * Renders a reference element for a
 * [`Tooltip`](https://ariakit.org/reference/tooltip), which is triggered by
 * focusing or hovering over the anchor.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx {2}
 * <TooltipProvider>
 *   <TooltipAnchor>Anchor</TooltipAnchor>
 *   <Tooltip>Tooltip</Tooltip>
 * </TooltipProvider>
 * ```
 */
export declare const TooltipAnchor: import("../utils/types.js").Component<TooltipAnchorOptions<"div">>;
export interface TooltipAnchorOptions<T extends As = "div"> extends HovercardAnchorOptions<T> {
    /**
     * Object returned by the
     * [`useTooltipStore`](https://ariakit.org/reference/use-tooltip-store) hook.
     * If not provided, the closest
     * [`TooltipProvider`](https://ariakit.org/reference/tooltip-provider)
     * component's context will be used.
     */
    store?: TooltipStore;
}
export type TooltipAnchorProps<T extends As = "div"> = Props<TooltipAnchorOptions<T>>;
