import { createElement, Fragment } from "react";
/**
 * External dependencies
 */
import classnames from 'classnames';

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { Button, ExternalLink, __experimentalTruncate as Truncate } from '@wordpress/components';
import { useCopyToClipboard } from '@wordpress/compose';
import { filterURLForDisplay, safeDecodeURI } from '@wordpress/url';
import { Icon, globe, info, linkOff, edit, copySmall } from '@wordpress/icons';
import { __unstableStripHTML as stripHTML } from '@wordpress/dom';
import { useDispatch, useSelect } from '@wordpress/data';
import { store as noticesStore } from '@wordpress/notices';
import { store as preferencesStore } from '@wordpress/preferences';

/**
 * Internal dependencies
 */
import { ViewerSlot } from './viewer-slot';
import useRichUrlData from './use-rich-url-data';
export default function LinkPreview({
  value,
  onEditClick,
  hasRichPreviews = false,
  hasUnlinkControl = false,
  onRemove
}) {
  const showIconLabels = useSelect(select => select(preferencesStore).get('core', 'showIconLabels'), []);

  // Avoid fetching if rich previews are not desired.
  const showRichPreviews = hasRichPreviews ? value?.url : null;
  const {
    richData,
    isFetching
  } = useRichUrlData(showRichPreviews);

  // Rich data may be an empty object so test for that.
  const hasRichData = richData && Object.keys(richData).length;
  const displayURL = value && filterURLForDisplay(safeDecodeURI(value.url), 24) || '';

  // url can be undefined if the href attribute is unset
  const isEmptyURL = !value?.url?.length;
  const displayTitle = !isEmptyURL && stripHTML(richData?.title || value?.title || displayURL);
  let icon;
  if (richData?.icon) {
    icon = createElement("img", {
      src: richData?.icon,
      alt: ""
    });
  } else if (isEmptyURL) {
    icon = createElement(Icon, {
      icon: info,
      size: 32
    });
  } else {
    icon = createElement(Icon, {
      icon: globe
    });
  }
  const {
    createNotice
  } = useDispatch(noticesStore);
  const ref = useCopyToClipboard(value.url, () => {
    createNotice('info', __('Link copied to clipboard.'), {
      isDismissible: true,
      type: 'snackbar'
    });
  });
  return createElement("div", {
    "aria-label": __('Currently selected'),
    className: classnames('block-editor-link-control__search-item', {
      'is-current': true,
      'is-rich': hasRichData,
      'is-fetching': !!isFetching,
      'is-preview': true,
      'is-error': isEmptyURL,
      'is-url-title': displayTitle === displayURL
    })
  }, createElement("div", {
    className: "block-editor-link-control__search-item-top"
  }, createElement("span", {
    className: "block-editor-link-control__search-item-header"
  }, createElement("span", {
    className: classnames('block-editor-link-control__search-item-icon', {
      'is-image': richData?.icon
    })
  }, icon), createElement("span", {
    className: "block-editor-link-control__search-item-details"
  }, !isEmptyURL ? createElement(Fragment, null, createElement(ExternalLink, {
    className: "block-editor-link-control__search-item-title",
    href: value.url
  }, createElement(Truncate, {
    numberOfLines: 1
  }, displayTitle)), value?.url && displayTitle !== displayURL && createElement("span", {
    className: "block-editor-link-control__search-item-info"
  }, createElement(Truncate, {
    numberOfLines: 1
  }, displayURL))) : createElement("span", {
    className: "block-editor-link-control__search-item-error-notice"
  }, __('Link is empty')))), createElement(Button, {
    icon: edit,
    label: __('Edit link'),
    onClick: onEditClick,
    size: "compact"
  }), hasUnlinkControl && createElement(Button, {
    icon: linkOff,
    label: __('Remove link'),
    onClick: onRemove,
    size: "compact"
  }), createElement(Button, {
    icon: copySmall,
    label: sprintf(
    // Translators: %s is a placeholder for the link URL and an optional colon, (if a Link URL is present).
    __('Copy link%s'),
    // Ends up looking like "Copy link: https://example.com".
    isEmptyURL || showIconLabels ? '' : ': ' + value.url),
    ref: ref,
    disabled: isEmptyURL,
    size: "compact"
  }), createElement(ViewerSlot, {
    fillProps: value
  })));
}
//# sourceMappingURL=link-preview.js.map