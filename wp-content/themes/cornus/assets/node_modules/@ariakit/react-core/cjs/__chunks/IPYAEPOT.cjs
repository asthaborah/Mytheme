"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _UZNYSPKPcjs = require('./UZNYSPKP.cjs');




var _RNZNGEL4cjs = require('./RNZNGEL4.cjs');





var _EO6LS72Hcjs = require('./EO6LS72H.cjs');




var _AV6KTKLEcjs = require('./AV6KTKLE.cjs');

// src/composite/composite-hover.ts
var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
function getMouseDestination(event) {
  const relatedTarget = event.relatedTarget;
  if ((relatedTarget == null ? void 0 : relatedTarget.nodeType) === Node.ELEMENT_NODE) {
    return relatedTarget;
  }
  return null;
}
function hoveringInside(event) {
  const nextElement = getMouseDestination(event);
  if (!nextElement)
    return false;
  return _dom.contains.call(void 0, event.currentTarget, nextElement);
}
var symbol = Symbol("composite-hover");
function movingToAnotherItem(event) {
  let dest = getMouseDestination(event);
  if (!dest)
    return false;
  do {
    if (_misc.hasOwnProperty.call(void 0, dest, symbol) && dest[symbol])
      return true;
    dest = dest.parentElement;
  } while (dest);
  return false;
}
var useCompositeHover = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      focusOnHover = true,
      blurOnHoverEnd = !!focusOnHover
    } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, [
      "store",
      "focusOnHover",
      "blurOnHoverEnd"
    ]);
    const context = _UZNYSPKPcjs.useCompositeContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "CompositeHover must be wrapped in a Composite component."
    );
    const isMouseMoving = _EO6LS72Hcjs.useIsMouseMoving.call(void 0, );
    const onMouseMoveProp = props.onMouseMove;
    const focusOnHoverProp = _EO6LS72Hcjs.useBooleanEvent.call(void 0, focusOnHover);
    const onMouseMove = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
      if (event.defaultPrevented)
        return;
      if (!isMouseMoving())
        return;
      if (!focusOnHoverProp(event))
        return;
      if (!_focus.hasFocusWithin.call(void 0, event.currentTarget)) {
        const baseElement = store == null ? void 0 : store.getState().baseElement;
        if (baseElement && !_focus.hasFocus.call(void 0, baseElement)) {
          baseElement.focus();
        }
      }
      store == null ? void 0 : store.setActiveId(event.currentTarget.id);
    });
    const onMouseLeaveProp = props.onMouseLeave;
    const blurOnHoverEndProp = _EO6LS72Hcjs.useBooleanEvent.call(void 0, blurOnHoverEnd);
    const onMouseLeave = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      var _a2;
      onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
      if (event.defaultPrevented)
        return;
      if (!isMouseMoving())
        return;
      if (hoveringInside(event))
        return;
      if (movingToAnotherItem(event))
        return;
      if (!focusOnHoverProp(event))
        return;
      if (!blurOnHoverEndProp(event))
        return;
      store == null ? void 0 : store.setActiveId(null);
      (_a2 = store == null ? void 0 : store.getState().baseElement) == null ? void 0 : _a2.focus();
    });
    const ref = _react.useCallback.call(void 0, (element) => {
      if (!element)
        return;
      element[symbol] = true;
    }, []);
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {}, props), {
      ref: _EO6LS72Hcjs.useMergeRefs.call(void 0, ref, props.ref),
      onMouseMove,
      onMouseLeave
    });
    return props;
  }
);
var CompositeHover = _RNZNGEL4cjs.createMemoComponent.call(void 0, 
  (props) => {
    const htmlProps = useCompositeHover(props);
    return _RNZNGEL4cjs.createElement.call(void 0, "div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  CompositeHover.displayName = "CompositeHover";
}




exports.useCompositeHover = useCompositeHover; exports.CompositeHover = CompositeHover;
