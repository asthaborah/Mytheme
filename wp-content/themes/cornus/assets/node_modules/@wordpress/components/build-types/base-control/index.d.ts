/// <reference types="react" />
import type { BaseControlProps, BaseControlVisualLabelProps } from './types';
import type { WordPressComponentProps } from '../context';
export { useBaseControlProps } from './hooks';
/**
 * `BaseControl.VisualLabel` is used to render a purely visual label inside a `BaseControl` component.
 *
 * It should only be used in cases where the children being rendered inside `BaseControl` are already accessibly labeled,
 * e.g., a button, but we want an additional visual label for that section equivalent to the labels `BaseControl` would
 * otherwise use if the `label` prop was passed.
 *
 * @example
 * import { BaseControl } from '@wordpress/components';
 *
 * const MyBaseControl = () => (
 * 	<BaseControl help="This button is already accessibly labeled.">
 * 		<BaseControl.VisualLabel>Author</BaseControl.VisualLabel>
 * 		<Button>Select an author</Button>
 * 	</BaseControl>
 * );
 */
export declare const VisualLabel: ({ className, children, ...props }: WordPressComponentProps<BaseControlVisualLabelProps, 'span'>) => JSX.Element;
export declare const BaseControl: import("../context").WordPressComponent<null, BaseControlProps, true> & {
    VisualLabel: ({ className, children, ...props }: WordPressComponentProps<BaseControlVisualLabelProps, 'span'>) => JSX.Element;
};
export default BaseControl;
//# sourceMappingURL=index.d.ts.map