{"version":3,"names":["_element","require","Context","createContext","BlockContextProvider","value","children","context","useContext","nextValue","useMemo","_react","createElement","Provider","_default","exports","default"],"sources":["@wordpress/block-editor/src/components/block-context/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext, useContext, useMemo } from '@wordpress/element';\n\n/** @typedef {import('react').ReactNode} ReactNode */\n\n/**\n * @typedef BlockContextProviderProps\n *\n * @property {Record<string,*>} value    Context value to merge with current\n *                                       value.\n * @property {ReactNode}        children Component children.\n */\n\n/** @type {import('react').Context<Record<string,*>>} */\nconst Context = createContext( {} );\n\n/**\n * Component which merges passed value with current consumed block context.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-context/README.md\n *\n * @param {BlockContextProviderProps} props\n */\nexport function BlockContextProvider( { value, children } ) {\n\tconst context = useContext( Context );\n\tconst nextValue = useMemo(\n\t\t() => ( { ...context, ...value } ),\n\t\t[ context, value ]\n\t);\n\n\treturn <Context.Provider value={ nextValue } children={ children } />;\n}\n\nexport default Context;\n"],"mappings":";;;;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AAHA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,OAAO,GAAG,IAAAC,sBAAa,EAAE,CAAC,CAAE,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAoBA,CAAE;EAAEC,KAAK;EAAEC;AAAS,CAAC,EAAG;EAC3D,MAAMC,OAAO,GAAG,IAAAC,mBAAU,EAAEN,OAAQ,CAAC;EACrC,MAAMO,SAAS,GAAG,IAAAC,gBAAO,EACxB,OAAQ;IAAE,GAAGH,OAAO;IAAE,GAAGF;EAAM,CAAC,CAAE,EAClC,CAAEE,OAAO,EAAEF,KAAK,CACjB,CAAC;EAED,OAAO,IAAAM,MAAA,CAAAC,aAAA,EAACV,OAAO,CAACW,QAAQ;IAACR,KAAK,EAAGI,SAAW;IAACH,QAAQ,EAAGA;EAAU,CAAE,CAAC;AACtE;AAAC,IAAAQ,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEcd,OAAO"}