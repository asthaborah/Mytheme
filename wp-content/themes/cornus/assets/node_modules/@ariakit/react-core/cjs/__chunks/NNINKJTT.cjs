"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _NGEKJJDHcjs = require('./NGEKJJDH.cjs');


var _7LBZXSLYcjs = require('./7LBZXSLY.cjs');


var _IPYAEPOTcjs = require('./IPYAEPOT.cjs');


var _IO6J4PANcjs = require('./IO6J4PAN.cjs');




var _RNZNGEL4cjs = require('./RNZNGEL4.cjs');


var _OLOZ5JT2cjs = require('./OLOZ5JT2.cjs');



var _EO6LS72Hcjs = require('./EO6LS72H.cjs');




var _AV6KTKLEcjs = require('./AV6KTKLE.cjs');

// src/menu/menu-item.ts
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
function menuHasFocus(baseElement, items, currentTarget) {
  var _a;
  if (!baseElement)
    return false;
  if (_focus.hasFocusWithin.call(void 0, baseElement))
    return true;
  const expandedItem = items == null ? void 0 : items.find((item) => {
    var _a2;
    if (item.element === currentTarget)
      return false;
    return ((_a2 = item.element) == null ? void 0 : _a2.getAttribute("aria-expanded")) === "true";
  });
  const expandedMenuId = (_a = expandedItem == null ? void 0 : expandedItem.element) == null ? void 0 : _a.getAttribute("aria-controls");
  if (!expandedMenuId)
    return false;
  const doc = _dom.getDocument.call(void 0, baseElement);
  const expandedMenu = doc.getElementById(expandedMenuId);
  if (!expandedMenu)
    return false;
  if (_focus.hasFocusWithin.call(void 0, expandedMenu))
    return true;
  return !!expandedMenu.querySelector("[role=menuitem][aria-expanded=true]");
}
var useMenuItem = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      hideOnClick = true,
      preventScrollOnKeyDown = true,
      focusOnHover,
      blurOnHoverEnd
    } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, [
      "store",
      "hideOnClick",
      "preventScrollOnKeyDown",
      "focusOnHover",
      "blurOnHoverEnd"
    ]);
    const menuContext = _NGEKJJDHcjs.useMenuScopedContext.call(void 0, true);
    const menubarContext = _7LBZXSLYcjs.useMenubarScopedContext.call(void 0, );
    store = store || menuContext || menubarContext;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "MenuItem must be wrapped in a MenuList, Menu or Menubar component"
    );
    const onClickProp = props.onClick;
    const hideOnClickProp = _EO6LS72Hcjs.useBooleanEvent.call(void 0, hideOnClick);
    const hideMenu = "hideAll" in store ? store.hideAll : void 0;
    const isWithinMenu = !!hideMenu;
    const onClick = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (_events.isDownloading.call(void 0, event))
        return;
      if (_events.isOpeningInNewTab.call(void 0, event))
        return;
      if (!hideMenu)
        return;
      const popupType = event.currentTarget.getAttribute("aria-haspopup");
      if (popupType === "menu")
        return;
      if (!hideOnClickProp(event))
        return;
      hideMenu();
    });
    const contentElement = _OLOZ5JT2cjs.useStoreState.call(void 0, 
      store,
      (state) => "contentElement" in state ? state.contentElement : null
    );
    const role = _dom.getPopupItemRole.call(void 0, contentElement, "menuitem");
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      role
    }, props), {
      onClick
    });
    props = _IO6J4PANcjs.useCompositeItem.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, { store, preventScrollOnKeyDown }, props));
    props = _IPYAEPOTcjs.useCompositeHover.call(void 0, _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      store
    }, props), {
      focusOnHover(event) {
        const getFocusOnHover = () => {
          if (typeof focusOnHover === "function")
            return focusOnHover(event);
          if (focusOnHover != null)
            return focusOnHover;
          return true;
        };
        if (!store)
          return false;
        if (!getFocusOnHover())
          return false;
        const { baseElement, items } = store.getState();
        if (isWithinMenu) {
          if (event.currentTarget.hasAttribute("aria-expanded")) {
            event.currentTarget.focus();
          }
          return true;
        }
        if (menuHasFocus(baseElement, items, event.currentTarget)) {
          event.currentTarget.focus();
          return true;
        }
        return false;
      },
      blurOnHoverEnd(event) {
        if (typeof blurOnHoverEnd === "function")
          return blurOnHoverEnd(event);
        if (blurOnHoverEnd != null)
          return blurOnHoverEnd;
        return isWithinMenu;
      }
    }));
    return props;
  }
);
var MenuItem = _RNZNGEL4cjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useMenuItem(props);
  return _RNZNGEL4cjs.createElement.call(void 0, "div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuItem.displayName = "MenuItem";
}




exports.useMenuItem = useMenuItem; exports.MenuItem = MenuItem;
