/// <reference types="react" />
/**
 * External dependencies
 */
import type { Meta } from '@storybook/react';
/**
 * Internal dependencies
 */
import BoxControl from '../';
declare const meta: Meta<typeof BoxControl>;
export default meta;
export declare const Default: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
export declare const Controlled: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
export declare const ArbitrarySides: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
export declare const SingleSide: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
export declare const AxialControls: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
export declare const AxialControlsWithSingleSide: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../../unit-control/types").UnitControlProps, "onMouseOut" | "onMouseOver" | "units"> & {
    allowReset?: boolean | undefined;
    id?: string | undefined;
    inputProps?: {
        className?: string | undefined;
        id?: string | undefined;
        prefix?: import("react").ReactNode;
        slot?: string | undefined;
        role?: import("react").AriaRole | undefined;
        form?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        help?: import("react").ReactNode;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        max?: number | undefined;
        min?: number | undefined;
        name?: string | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "false" | "true") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "false" | "true") | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "false" | "true") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "false" | "true") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "false" | "true") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: (boolean | "false" | "true") | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "false" | "true") | undefined;
        'aria-multiline'?: (boolean | "false" | "true") | undefined;
        'aria-multiselectable'?: (boolean | "false" | "true") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: (boolean | "false" | "true") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "false" | "true") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "false" | "true") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: (import("react").FocusEventHandler<HTMLInputElement> & import("react").FocusEventHandler<HTMLInputElement | HTMLSelectElement>) | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: ((dragProps: Omit<import("@use-gesture/react").FullGestureState<"drag">, "event"> & {
            event: unknown;
        }) => void) | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
        size?: import("../../input-control/types").Size | undefined;
        value?: string | number | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "next" | "done" | "enter" | "go" | "previous" | "send" | undefined;
        list?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        __next36pxDefaultSize?: boolean | undefined;
        __next40pxDefaultSize?: boolean | undefined;
        __unstableInputWidth?: import("csstype").Property.Width<string | number> | undefined;
        hideLabelFromVision?: boolean | undefined;
        labelPosition?: import("../../input-control/types").LabelPosition | undefined;
        dragDirection?: import("../../input-control/types").DragDirection | undefined;
        dragThreshold?: number | undefined;
        isDragEnabled?: boolean | undefined;
        isPressEnterToChange?: boolean | undefined;
        onValidate?: ((nextValue: string, event?: import("react").SyntheticEvent<HTMLInputElement, Event> | undefined) => void) | undefined;
        __unstableStateReducer?: import("../../input-control/reducer/state").StateReducer | undefined;
        hideHTMLArrows?: boolean | undefined;
        isShiftStepEnabled?: boolean | undefined;
        shiftStep?: number | undefined;
        spinFactor?: number | undefined;
        disableUnits?: boolean | undefined;
        unit?: string | undefined;
        isUnitSelectTabbable?: boolean | undefined;
        isResetValueOnUnitChange?: boolean | undefined;
        onUnitChange?: import("../../unit-control/types").UnitControlOnChangeCallback | undefined;
    } | undefined;
    label?: string | undefined;
    onChange: (next: import("../types").BoxControlValue) => void;
    resetValues?: import("../types").BoxControlValue | undefined;
    sides?: readonly ("horizontal" | "vertical" | keyof import("../types").BoxControlValue)[] | undefined;
    splitOnAxis?: boolean | undefined;
    values?: import("../types").BoxControlValue | undefined;
    __next40pxDefaultSize?: boolean | undefined;
}>;
//# sourceMappingURL=index.story.d.ts.map