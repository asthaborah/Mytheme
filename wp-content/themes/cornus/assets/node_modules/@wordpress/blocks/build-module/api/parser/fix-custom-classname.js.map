{"version":3,"names":["hasBlockSupport","getSaveContent","parseWithAttributeSchema","CLASS_ATTR_SCHEMA","type","source","selector","attribute","getHTMLRootElementClasses","innerHTML","parsed","trim","split","fixCustomClassname","blockAttributes","blockType","className","omittedClassName","attributesSansClassName","serialized","defaultClasses","actualClasses","customClasses","filter","includes","length","join"],"sources":["@wordpress/blocks/src/api/parser/fix-custom-classname.js"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { hasBlockSupport } from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { parseWithAttributeSchema } from './get-block-attributes';\n\nconst CLASS_ATTR_SCHEMA = {\n\ttype: 'string',\n\tsource: 'attribute',\n\tselector: '[data-custom-class-name] > *',\n\tattribute: 'class',\n};\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tconst parsed = parseWithAttributeSchema(\n\t\t`<div data-custom-class-name>${ innerHTML }</div>`,\n\t\tCLASS_ATTR_SCHEMA\n\t);\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function fixCustomClassname( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes, with the exception of `className`. This will determine\n\t\t// the default set of classes. From there, any difference in innerHTML\n\t\t// can be considered as custom classes.\n\t\tconst { className: omittedClassName, ...attributesSansClassName } =\n\t\t\tblockAttributes;\n\t\tconst serialized = getSaveContent( blockType, attributesSansClassName );\n\t\tconst defaultClasses = getHTMLRootElementClasses( serialized );\n\t\tconst actualClasses = getHTMLRootElementClasses( innerHTML );\n\n\t\tconst customClasses = actualClasses.filter(\n\t\t\t( className ) => ! defaultClasses.includes( className )\n\t\t);\n\n\t\tif ( customClasses.length ) {\n\t\t\tblockAttributes.className = customClasses.join( ' ' );\n\t\t} else if ( serialized ) {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,iBAAiB;AACjD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,wBAAwB,QAAQ,wBAAwB;AAEjE,MAAMC,iBAAiB,GAAG;EACzBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,WAAW;EACnBC,QAAQ,EAAE,8BAA8B;EACxCC,SAAS,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAAEC,SAAS,EAAG;EACtD,MAAMC,MAAM,GAAGR,wBAAwB,CACrC,+BAA+BO,SAAW,QAAO,EAClDN,iBACD,CAAC;EAED,OAAOO,MAAM,GAAGA,MAAM,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAE,KAAM,CAAC,GAAG,EAAE;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAEC,eAAe,EAAEC,SAAS,EAAEN,SAAS,EAAG;EAC3E,IAAKT,eAAe,CAAEe,SAAS,EAAE,iBAAiB,EAAE,IAAK,CAAC,EAAG;IAC5D;IACA;IACA;IACA;IACA,MAAM;MAAEC,SAAS,EAAEC,gBAAgB;MAAE,GAAGC;IAAwB,CAAC,GAChEJ,eAAe;IAChB,MAAMK,UAAU,GAAGlB,cAAc,CAAEc,SAAS,EAAEG,uBAAwB,CAAC;IACvE,MAAME,cAAc,GAAGZ,yBAAyB,CAAEW,UAAW,CAAC;IAC9D,MAAME,aAAa,GAAGb,yBAAyB,CAAEC,SAAU,CAAC;IAE5D,MAAMa,aAAa,GAAGD,aAAa,CAACE,MAAM,CACvCP,SAAS,IAAM,CAAEI,cAAc,CAACI,QAAQ,CAAER,SAAU,CACvD,CAAC;IAED,IAAKM,aAAa,CAACG,MAAM,EAAG;MAC3BX,eAAe,CAACE,SAAS,GAAGM,aAAa,CAACI,IAAI,CAAE,GAAI,CAAC;IACtD,CAAC,MAAM,IAAKP,UAAU,EAAG;MACxB,OAAOL,eAAe,CAACE,SAAS;IACjC;EACD;EAEA,OAAOF,eAAe;AACvB"}