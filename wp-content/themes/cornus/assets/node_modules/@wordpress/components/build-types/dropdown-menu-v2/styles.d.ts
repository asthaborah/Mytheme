/// <reference types="react" />
/**
 * External dependencies
 */
import * as Ariakit from '@ariakit/react';
import type { DropdownMenuContext } from './types';
export declare const DropdownMenu: import("@emotion/styled").StyledComponent<Ariakit.MenuOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.MenuOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
} & Pick<DropdownMenuContext, "variant">, {}, {}>;
export declare const DropdownMenuItem: import("@emotion/styled").StyledComponent<Ariakit.MenuItemOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.MenuItemOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const DropdownMenuCheckboxItem: import("@emotion/styled").StyledComponent<Ariakit.MenuItemCheckboxOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.MenuItemCheckboxOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const DropdownMenuRadioItem: import("@emotion/styled").StyledComponent<Ariakit.MenuItemRadioOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.MenuItemRadioOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const ItemPrefixWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const DropdownMenuItemContentWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const DropdownMenuItemChildrenWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const ItemSuffixWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const DropdownMenuGroup: import("@emotion/styled").StyledComponent<Ariakit.MenuGroupOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.MenuGroupOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const DropdownMenuSeparator: import("@emotion/styled").StyledComponent<Ariakit.MenuSeparatorOptions<"hr"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHRElement>, HTMLHRElement>, "key" | keyof import("react").HTMLAttributes<HTMLHRElement>> & {
    ref?: ((instance: HTMLHRElement | null) => void) | import("react").RefObject<HTMLHRElement> | null | undefined;
}, "children" | keyof Ariakit.MenuSeparatorOptions<"hr">> & {
    theme?: import("@emotion/react").Theme | undefined;
} & Pick<DropdownMenuContext, "variant">, {}, {}>;
export declare const SubmenuChevronIcon: import("@emotion/styled").StyledComponent<import("../icon").Props & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const DropdownMenuItemLabel: import("@emotion/styled").StyledComponent<import("../truncate/types").TruncateProps & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "key" | keyof import("react").HTMLAttributes<HTMLSpanElement>>, "as" | keyof import("react").RefAttributes<any> | keyof import("../truncate/types").TruncateProps> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const DropdownMenuItemHelpText: import("@emotion/styled").StyledComponent<import("../truncate/types").TruncateProps & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "key" | keyof import("react").HTMLAttributes<HTMLSpanElement>>, "as" | keyof import("react").RefAttributes<any> | keyof import("../truncate/types").TruncateProps> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map