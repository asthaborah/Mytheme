"use client";
import {
  useCommand
} from "./NWCBQ4CV.js";
import {
  createComponent,
  createElement,
  createHook
} from "./3ORBWXWF.js";
import {
  useMergeRefs,
  useTagName
} from "./6O5OEQGF.js";
import {
  __spreadProps,
  __spreadValues
} from "./4R3V3JGP.js";

// src/button/button.ts
import { useEffect, useRef, useState } from "react";
import { isButton } from "@ariakit/core/utils/dom";
var useButton = createHook((props) => {
  const ref = useRef(null);
  const tagName = useTagName(ref, props.as || "button");
  const [isNativeButton, setIsNativeButton] = useState(
    () => !!tagName && isButton({ tagName, type: props.type })
  );
  useEffect(() => {
    if (!ref.current)
      return;
    setIsNativeButton(isButton(ref.current));
  }, []);
  props = __spreadProps(__spreadValues({
    role: !isNativeButton && tagName !== "a" ? "button" : void 0
  }, props), {
    ref: useMergeRefs(ref, props.ref)
  });
  props = useCommand(props);
  return props;
});
var Button = createComponent((props) => {
  const htmlProps = useButton(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Button.displayName = "Button";
}

export {
  useButton,
  Button
};
