import type { CompositeOptions } from "../composite/composite.js";
import type { As, Props } from "../utils/types.js";
import type { RadioStore } from "./radio-store.js";
/**
 * Returns props to create a `RadioGroup` component.
 * @see https://ariakit.org/components/radio
 * @example
 * ```jsx
 * const store = useRadioStore();
 * const props = useRadioGroup({ store });
 * <Role {...props}>
 *   <Radio value="Apple" />
 *   <Radio value="Orange" />
 * </Role>
 * ```
 */
export declare const useRadioGroup: import("../utils/types.js").Hook<RadioGroupOptions<"div">>;
/**
 * Renders a [`radiogroup`](https://w3c.github.io/aria/#radiogroup) element that
 * manages a group of [`Radio`](https://ariakit.org/reference/radio) elements.
 * @see https://ariakit.org/components/radio
 * @example
 * ```jsx
 * <RadioProvider>
 *   <RadioGroup>
 *     <Radio value="Apple" />
 *     <Radio value="Orange" />
 *   </RadioGroup>
 * </RadioProvider>
 * ```
 */
export declare const RadioGroup: import("../utils/types.js").Component<RadioGroupOptions<"div">>;
export interface RadioGroupOptions<T extends As = "div"> extends CompositeOptions<T> {
    /**
     * Object returned by the
     * [`useRadioStore`](https://ariakit.org/reference/use-radio-store) hook. If
     * not provided, the closest
     * [`RadioProvider`](https://ariakit.org/reference/radio-provider) component's
     * context will be used.
     */
    store?: RadioStore;
}
export type RadioGroupProps<T extends As = "div"> = Props<RadioGroupOptions<T>>;
