"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PreferencesModalTabs;
var _react = require("react");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _i18n = require("@wordpress/i18n");
var _lockUnlock = require("../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  Tabs
} = (0, _lockUnlock.unlock)(_components.privateApis);
const PREFERENCES_MENU = 'preferences-menu';
function PreferencesModalTabs({
  sections
}) {
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');

  // This is also used to sync the two different rendered components
  // between small and large viewports.
  const [activeMenu, setActiveMenu] = (0, _element.useState)(PREFERENCES_MENU);
  /**
   * Create helper objects from `sections` for easier data handling.
   * `tabs` is used for creating the `Tabs` and `sectionsContentMap`
   * is used for easier access to active tab's content.
   */
  const {
    tabs,
    sectionsContentMap
  } = (0, _element.useMemo)(() => {
    let mappedTabs = {
      tabs: [],
      sectionsContentMap: {}
    };
    if (sections.length) {
      mappedTabs = sections.reduce((accumulator, {
        name,
        tabLabel: title,
        content
      }) => {
        accumulator.tabs.push({
          name,
          title
        });
        accumulator.sectionsContentMap[name] = content;
        return accumulator;
      }, {
        tabs: [],
        sectionsContentMap: {}
      });
    }
    return mappedTabs;
  }, [sections]);
  let modalContent;
  // We render different components based on the viewport size.
  if (isLargeViewport) {
    modalContent = (0, _react.createElement)("div", {
      className: "preferences__tabs"
    }, (0, _react.createElement)(Tabs, {
      defaultTabId: activeMenu !== PREFERENCES_MENU ? activeMenu : undefined,
      onSelect: setActiveMenu,
      orientation: "vertical"
    }, (0, _react.createElement)(Tabs.TabList, {
      className: "preferences__tabs-tablist"
    }, tabs.map(tab => (0, _react.createElement)(Tabs.Tab, {
      tabId: tab.name,
      key: tab.name,
      className: "preferences__tabs-tab"
    }, tab.title))), tabs.map(tab => (0, _react.createElement)(Tabs.TabPanel, {
      tabId: tab.name,
      key: tab.name,
      className: "preferences__tabs-tabpanel",
      focusable: false
    }, sectionsContentMap[tab.name] || null))));
  } else {
    modalContent = (0, _react.createElement)(_components.__experimentalNavigatorProvider, {
      initialPath: "/",
      className: "preferences__provider"
    }, (0, _react.createElement)(_components.__experimentalNavigatorScreen, {
      path: "/"
    }, (0, _react.createElement)(_components.Card, {
      isBorderless: true,
      size: "small"
    }, (0, _react.createElement)(_components.CardBody, null, (0, _react.createElement)(_components.__experimentalItemGroup, null, tabs.map(tab => {
      return (0, _react.createElement)(_components.__experimentalNavigatorButton, {
        key: tab.name,
        path: tab.name,
        as: _components.__experimentalItem,
        isAction: true
      }, (0, _react.createElement)(_components.__experimentalHStack, {
        justify: "space-between"
      }, (0, _react.createElement)(_components.FlexItem, null, (0, _react.createElement)(_components.__experimentalTruncate, null, tab.title)), (0, _react.createElement)(_components.FlexItem, null, (0, _react.createElement)(_icons.Icon, {
        icon: (0, _i18n.isRTL)() ? _icons.chevronLeft : _icons.chevronRight
      }))));
    }))))), sections.length && sections.map(section => {
      return (0, _react.createElement)(_components.__experimentalNavigatorScreen, {
        key: `${section.name}-menu`,
        path: section.name
      }, (0, _react.createElement)(_components.Card, {
        isBorderless: true,
        size: "large"
      }, (0, _react.createElement)(_components.CardHeader, {
        isBorderless: false,
        justify: "left",
        size: "small",
        gap: "6"
      }, (0, _react.createElement)(_components.__experimentalNavigatorBackButton, {
        icon: (0, _i18n.isRTL)() ? _icons.chevronRight : _icons.chevronLeft,
        "aria-label": (0, _i18n.__)('Navigate to the previous view')
      }), (0, _react.createElement)(_components.__experimentalText, {
        size: "16"
      }, section.tabLabel)), (0, _react.createElement)(_components.CardBody, null, section.content)));
    }));
  }
  return modalContent;
}
//# sourceMappingURL=index.js.map