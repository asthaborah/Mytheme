import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { createContext, useMemo } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { Icon, chevronDown } from '@wordpress/icons';

/**
 * Internal dependencies
 */
import { VisuallyHidden } from '..';
import * as Styled from './styles';
import { contextConnectWithoutRef, useContextSystem } from '../context';
export const CustomSelectContext = createContext(undefined);
function defaultRenderSelectedValue(value) {
  const isValueEmpty = Array.isArray(value) ? value.length === 0 : value === undefined || value === null;
  if (isValueEmpty) {
    return __('Select an item');
  }
  if (Array.isArray(value)) {
    return value.length === 1 ? value[0] :
    // translators: %s: number of items selected (it will always be 2 or more items)
    sprintf(__('%s items selected'), value.length);
  }
  return value;
}
const UnconnectedCustomSelectButton = props => {
  const {
    renderSelectedValue,
    size = 'default',
    store,
    ...restProps
  } = useContextSystem(props, 'CustomSelectControlButton');
  const {
    value: currentValue
  } = store.useState();
  const computedRenderSelectedValue = useMemo(() => renderSelectedValue !== null && renderSelectedValue !== void 0 ? renderSelectedValue : defaultRenderSelectedValue, [renderSelectedValue]);
  return createElement(Styled.Select, {
    ...restProps,
    size: size,
    hasCustomRenderProp: !!renderSelectedValue,
    store: store
    // to match legacy behavior where using arrow keys
    // move selection rather than open the popover
    ,
    showOnKeyDown: false
  }, createElement("div", null, computedRenderSelectedValue(currentValue)), createElement(Icon, {
    icon: chevronDown,
    size: 18
  }));
};
const CustomSelectButton = contextConnectWithoutRef(UnconnectedCustomSelectButton, 'CustomSelectControlButton');
function _CustomSelect(props) {
  const {
    children,
    hideLabelFromVision = false,
    label,
    store,
    ...restProps
  } = props;
  return createElement(Fragment, null, hideLabelFromVision ?
  // TODO: Replace with BaseControl
  createElement(VisuallyHidden, {
    as: "label"
  }, label) : createElement(Styled.SelectLabel, {
    store: store
  }, label), createElement(CustomSelectButton, {
    ...restProps,
    store: store
  }), createElement(Styled.SelectPopover, {
    gutter: 12,
    store: store,
    sameWidth: true
  }, createElement(CustomSelectContext.Provider, {
    value: {
      store
    }
  }, children)));
}
export default _CustomSelect;
//# sourceMappingURL=custom-select.js.map