{"version":3,"names":["_es","_interopRequireDefault","require","_compose","_data","_blocks","_defaults","_array","identity","x","mapBlockOrder","blocks","rootClientId","result","Map","current","set","forEach","block","clientId","innerBlocks","push","order","subClientId","mapBlockParents","stack","length","parent","currentBlocks","shift","flattenBlocks","transform","getFlattenedClientIds","getFlattenedBlocksWithoutAttributes","attributes","restBlock","getFlattenedBlockAttributes","hasSameKeys","a","b","fastDeepEqual","Object","keys","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","updateBlockTreeForBlocks","state","treeToUpdate","tree","flattenedBlocks","assign","get","byClientId","map","subBlock","updateParentInnerBlocksInTree","updatedClientIds","updateChildrenOfUpdatedClientIds","uncontrolledParents","Set","controlledParents","parents","controlledInnerBlocks","add","withBlockTree","reducer","newState","inserterClientIds","replacedClientIds","concat","filter","key","delete","parentsOfRemovedBlocks","removedClientIds","updatedBlockUids","fromRootClientId","toRootClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","explicitPersistent","nextState","nextIsPersistentChange","_state$isPersistentCh","isPersistentChange","isExplicitPersistentChange","_state$isPersistentCh2","withIgnoredBlockChange","IGNORED_ACTION_TYPES","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","keepControlledInnerBlocks","withBlockReset","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","stateAfterInsertOrder","_key","withSaveReusableBlock","id","withResetControlledBlocks","tempState","exports","pipe","combineReducers","value","changes","updates","values","every","hasChange","_action$attributes","updatedAttributeEntries","entries","uniqueByBlock","hasUpdatedAttributes","existingAttributes","newAttributes","_state$get","blockOrder","subState","mappedBlocks","insertAt","_state$get$filter","fromIndex","indexOf","moveTo","includes","firstClientId","firstIndex","lastClientId","newSubOrder","reduce","_order$filter","hasControlledInnerBlocks","isBlockInterfaceHidden","isTyping","isDragging","draggedBlocks","blockVisibility","selectionHelper","updateSelection","blockToSelect","indexToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","removalPromptData","selectPrevious","message","blockRemovalRules","rules","initialPosition","blocksMode","insertionPoint","__unstableWithInserter","operation","nearestSide","template","isValid","settings","SETTINGS_DEFAULTS","reset","preferences","PREFERENCES_DEFAULTS","prevState","blockName","match","select","blocksStore","getActiveBlockVariation","insertUsage","time","count","blockListSettings","fromEntries","hasOwnProperty","removedBlock","restBlocks","editorMode","mode","hasBlockMovingClientId","lastBlockAttributesChange","accumulator","highlightedBlock","isHighlighted","lastBlockInserted","source","meta","temporarilyEditingAsBlocks","temporarilyEditingFocusModeRevert","focusModeToRevert","blockEditingModes","openedBlockSettingsMenu","_action$clientId","styleOverrides","style","registeredInserterMediaCategories","category","lastFocus","combinedReducers","withAutomaticChangeReset","automaticChangeStatus","_default","default"],"sources":["@wordpress/block-editor/src/store/reducer.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\nimport { combineReducers, select } from '@wordpress/data';\nimport { store as blocksStore } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\nconst identity = ( x ) => x;\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = new Map();\n\tconst current = [];\n\tresult.set( rootClientId, current );\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\t\tcurrent.push( clientId );\n\t\tmapBlockOrder( innerBlocks, clientId ).forEach(\n\t\t\t( order, subClientId ) => {\n\t\t\t\tresult.set( subClientId, order );\n\t\t\t}\n\t\t);\n\t} );\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\tconst result = [];\n\tconst stack = [ [ rootClientId, blocks ] ];\n\twhile ( stack.length ) {\n\t\tconst [ parent, currentBlocks ] = stack.shift();\n\t\tcurrentBlocks.forEach( ( { innerBlocks, ...block } ) => {\n\t\t\tresult.push( [ block.clientId, parent ] );\n\t\t\tif ( innerBlocks?.length ) {\n\t\t\t\tstack.push( [ block.clientId, innerBlocks ] );\n\t\t\t}\n\t\t} );\n\t}\n\treturn result;\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array}    blocks    Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Array} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = [];\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult.push( [ block.clientId, transform( block ) ] );\n\t}\n\n\treturn result;\n}\n\nfunction getFlattenedClientIds( blocks ) {\n\tconst result = {};\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = true;\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => {\n\t\tconst { attributes, ...restBlock } = block;\n\t\treturn restBlock;\n\t} );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn fastDeepEqual( Object.keys( a ), Object.keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tfastDeepEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\nfunction updateBlockTreeForBlocks( state, blocks ) {\n\tconst treeToUpdate = state.tree;\n\tconst stack = [ ...blocks ];\n\tconst flattenedBlocks = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst block = stack.shift();\n\t\tstack.push( ...block.innerBlocks );\n\t\tflattenedBlocks.push( ...block.innerBlocks );\n\t}\n\t// Create objects before mutating them, that way it's always defined.\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set( block.clientId, {} );\n\t}\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set(\n\t\t\tblock.clientId,\n\t\t\tObject.assign( treeToUpdate.get( block.clientId ), {\n\t\t\t\t...state.byClientId.get( block.clientId ),\n\t\t\t\tattributes: state.attributes.get( block.clientId ),\n\t\t\t\tinnerBlocks: block.innerBlocks.map( ( subBlock ) =>\n\t\t\t\t\ttreeToUpdate.get( subBlock.clientId )\n\t\t\t\t),\n\t\t\t} )\n\t\t);\n\t}\n}\n\nfunction updateParentInnerBlocksInTree(\n\tstate,\n\tupdatedClientIds,\n\tupdateChildrenOfUpdatedClientIds = false\n) {\n\tconst treeToUpdate = state.tree;\n\tconst uncontrolledParents = new Set( [] );\n\tconst controlledParents = new Set();\n\tfor ( const clientId of updatedClientIds ) {\n\t\tlet current = updateChildrenOfUpdatedClientIds\n\t\t\t? clientId\n\t\t\t: state.parents.get( clientId );\n\t\tdo {\n\t\t\tif ( state.controlledInnerBlocks[ current ] ) {\n\t\t\t\t// Should stop on controlled blocks.\n\t\t\t\t// If we reach a controlled parent, break out of the loop.\n\t\t\t\tcontrolledParents.add( current );\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// Else continue traversing up through parents.\n\t\t\t\tuncontrolledParents.add( current );\n\t\t\t\tcurrent = state.parents.get( current );\n\t\t\t}\n\t\t} while ( current !== undefined );\n\t}\n\n\t// To make sure the order of assignments doesn't matter,\n\t// we first create empty objects and mutates the inner blocks later.\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.set( clientId, { ...treeToUpdate.get( clientId ) } );\n\t}\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.get( clientId ).innerBlocks = (\n\t\t\tstate.order.get( clientId ) || []\n\t\t).map( ( subClientId ) => treeToUpdate.get( subClientId ) );\n\t}\n\n\t// Controlled parent blocks, need a dedicated key for their inner blocks\n\t// to be used when doing getBlocks( controlledBlockClientId ).\n\tfor ( const clientId of controlledParents ) {\n\t\ttreeToUpdate.set( 'controlled||' + clientId, {\n\t\t\tinnerBlocks: ( state.order.get( clientId ) || [] ).map(\n\t\t\t\t( subClientId ) => treeToUpdate.get( subClientId )\n\t\t\t),\n\t\t} );\n\t}\n}\n\n/**\n * Higher-order reducer intended to compute full block objects key for each block in the post.\n * This is a denormalization to optimize the performance of the getBlock selectors and avoid\n * recomputing the block objects and avoid heavy memoization.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockTree =\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\tconst newState = reducer( state, action );\n\n\t\tif ( newState === state ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tnewState.tree = state.tree ? state.tree : new Map();\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.rootClientId ? [ action.rootClientId ] : [ '' ],\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tnewState.tree.set( action.clientId, {\n\t\t\t\t\t...newState.tree.get( action.clientId ),\n\t\t\t\t\t...newState.byClientId.get( action.clientId ),\n\t\t\t\t\tattributes: newState.attributes.get( action.clientId ),\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t[ action.clientId ],\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.clientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.tree.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.clientIds,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst inserterClientIds = getFlattenedClientIds(\n\t\t\t\t\taction.blocks\n\t\t\t\t);\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.replacedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\t// Controlled inner blocks are only removed\n\t\t\t\t\t\t// if the block doesn't move to another position\n\t\t\t\t\t\t// otherwise their content will be lost.\n\t\t\t\t\t\taction.replacedClientIds\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t( clientId ) => ! inserterClientIds[ clientId ]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.map( ( clientId ) => 'controlled||' + clientId )\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.blocks.map( ( b ) => b.clientId ),\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\t// If there are no replaced blocks, it means we're removing blocks so we need to update their parent.\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.removedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\taction.removedClientIds.map(\n\t\t\t\t\t\t\t( clientId ) => 'controlled||' + clientId\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t\t} else {\n\t\t\t\t\tupdatedBlockUids.push( '' );\n\t\t\t\t}\n\t\t\t\tif ( action.toRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_UP':\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst updatedBlockUids = [\n\t\t\t\t\taction.rootClientId ? action.rootClientId : '',\n\t\t\t\t];\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tnewState.attributes.forEach( ( attributes, clientId ) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnewState.byClientId.get( clientId ).name ===\n\t\t\t\t\t\t\t'core/block' &&\n\t\t\t\t\t\tattributes.ref === action.updatedId\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdatedBlockUids.push( clientId );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdatedBlockUids.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.byClientId.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t\tinnerBlocks: newState.tree.get( clientId ).innerBlocks,\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn newState;\n\t};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\tlet explicitPersistent;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tlet nextIsPersistentChange;\n\t\tif ( action.type === 'SET_EXPLICIT_PERSISTENT' ) {\n\t\t\texplicitPersistent = action.isPersistentChange;\n\t\t\tnextIsPersistentChange = state.isPersistentChange ?? true;\n\t\t}\n\n\t\tif ( explicitPersistent !== undefined ) {\n\t\t\tnextIsPersistentChange = explicitPersistent;\n\t\t\treturn nextIsPersistentChange === nextState.isPersistentChange\n\t\t\t\t? nextState\n\t\t\t\t: {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t\t  };\n\t\t}\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tnextIsPersistentChange = state?.isPersistentChange ?? true;\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order.get( result[ i ] ) ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order.get( result[ i ] ) );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'RESET_BLOCKS' ) {\n\t\tconst newState = {\n\t\t\t...state,\n\t\t\tbyClientId: new Map(\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks )\n\t\t\t),\n\t\t\tattributes: new Map( getFlattenedBlockAttributes( action.blocks ) ),\n\t\t\torder: mapBlockOrder( action.blocks ),\n\t\t\tparents: new Map( mapBlockParents( action.blocks ) ),\n\t\t\tcontrolledInnerBlocks: {},\n\t\t};\n\n\t\tnewState.tree = new Map( state?.tree );\n\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\tnewState.tree.set( '', {\n\t\t\tinnerBlocks: action.blocks.map( ( subBlock ) =>\n\t\t\t\tnewState.tree.get( subBlock.clientId )\n\t\t\t),\n\t\t} );\n\n\t\treturn newState;\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order.get( action.rootClientId ) ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order.get( action.rootClientId ),\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the controlled inner blocks to the blocks tree and\n\t\t// preserve their block order. Otherwise, an inner block controller's blocks\n\t\t// will be deleted entirely from its entity.\n\t\tconst stateAfterInsertOrder = new Map( stateAfterInsert.order );\n\t\tObject.keys( nestedControllers ).forEach( ( key ) => {\n\t\t\tif ( state.order.get( key ) ) {\n\t\t\t\tstateAfterInsertOrder.set( key, state.order.get( key ) );\n\t\t\t}\n\t\t} );\n\t\tstateAfterInsert.order = stateAfterInsertOrder;\n\t\tstateAfterInsert.tree = new Map( stateAfterInsert.tree );\n\t\tObject.keys( nestedControllers ).forEach( ( _key ) => {\n\t\t\tconst key = `controlled||${ _key }`;\n\t\t\tif ( state.tree.has( key ) ) {\n\t\t\t\tstateAfterInsert.tree.set( key, state.tree.get( key ) );\n\t\t\t}\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one.\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\t\tstate.attributes = new Map( state.attributes );\n\t\tstate.attributes.forEach( ( attributes, clientId ) => {\n\t\t\tconst { name } = state.byClientId.get( clientId );\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\tstate.attributes.set( clientId, {\n\t\t\t\t\t...attributes,\n\t\t\t\t\tref: updatedId,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn reducer( state, action );\n};\n/**\n * Higher-order reducer which removes blocks from state when switching parent block controlled state.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withResetControlledBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t// when switching a block from controlled to uncontrolled or inverse,\n\t\t// we need to remove its content first.\n\t\tconst tempState = reducer( state, {\n\t\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\t\trootClientId: action.clientId,\n\t\t\tblocks: [],\n\t\t} );\n\t\treturn reducer( tempState, action );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = pipe(\n\tcombineReducers,\n\twithSaveReusableBlock, // Needs to be before withBlockCache.\n\twithBlockTree, // Needs to be before withInnerBlocksRemoveCascade.\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // Needs to be after withInnerBlocksRemoveCascade.\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange,\n\twithResetControlledBlocks\n)( {\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tbyClientId( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known.\n\t\t\t\tif ( ! state.has( action.clientId ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst { attributes, ...changes } = action.updates;\n\t\t\t\tif ( Object.values( changes ).length === 0 ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...changes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tattributes( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state.get( action.clientId ) ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'SYNC_DERIVED_BLOCK_ATTRIBUTES':\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state.get( id ) ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tlet hasChange = false;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tconst updatedAttributeEntries = Object.entries(\n\t\t\t\t\t\taction.uniqueByBlock\n\t\t\t\t\t\t\t? action.attributes[ clientId ]\n\t\t\t\t\t\t\t: action.attributes ?? {}\n\t\t\t\t\t);\n\t\t\t\t\tif ( updatedAttributeEntries.length === 0 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet hasUpdatedAttributes = false;\n\t\t\t\t\tconst existingAttributes = state.get( clientId );\n\t\t\t\t\tconst newAttributes = {};\n\t\t\t\t\tupdatedAttributeEntries.forEach( ( [ key, value ] ) => {\n\t\t\t\t\t\tif ( existingAttributes[ key ] !== value ) {\n\t\t\t\t\t\t\thasUpdatedAttributes = true;\n\t\t\t\t\t\t\tnewAttributes[ key ] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\thasChange = hasChange || hasUpdatedAttributes;\n\t\t\t\t\tif ( hasUpdatedAttributes ) {\n\t\t\t\t\t\tnewState.set( clientId, {\n\t\t\t\t\t\t\t...existingAttributes,\n\t\t\t\t\t\t\t...newAttributes,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn hasChange ? newState : state;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\torder( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst blockOrder = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tblockOrder.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\t'',\n\t\t\t\t\t( state.get( '' ) ?? [] ).concat( blockOrder[ '' ] )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state.get( rootClientId ) || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tinsertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks.get( rootClientId ),\n\t\t\t\t\t\tindex\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state.get( toRootClientId ).length } = action;\n\n\t\t\t\t// Moving inside the same parent block.\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state.get( toRootClientId );\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\tconst newState = new Map( state );\n\t\t\t\t\tnewState.set(\n\t\t\t\t\t\ttoRootClientId,\n\t\t\t\t\t\tmoveTo(\n\t\t\t\t\t\t\tstate.get( toRootClientId ),\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn newState;\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another.\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\tfromRootClientId,\n\t\t\t\t\tstate\n\t\t\t\t\t\t.get( fromRootClientId )\n\t\t\t\t\t\t?.filter( ( id ) => ! clientIds.includes( id ) ) ?? []\n\t\t\t\t);\n\t\t\t\tnewState.set(\n\t\t\t\t\ttoRootClientId,\n\t\t\t\t\tinsertAt( state.get( toRootClientId ), clientIds, index )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif ( ! subState.length || firstClientId === subState[ 0 ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst lastClientId = clientIds[ clientIds.length - 1 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tlastClientId === subState[ subState.length - 1 ]\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder = Object.values( order ).reduce(\n\t\t\t\t\t\t( result, subClientId ) => {\n\t\t\t\t\t\t\tif ( subClientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\treturn [ ...result, ...mappedBlocks.get( '' ) ];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( clientIds.indexOf( subClientId ) === -1 ) {\n\t\t\t\t\t\t\t\tresult.push( subClientId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[]\n\t\t\t\t\t);\n\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\t// Remove inner block ordering for removed blocks.\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder =\n\t\t\t\t\t\torder?.filter(\n\t\t\t\t\t\t\t( id ) => ! action.removedClientIds.includes( id )\n\t\t\t\t\t\t) ?? [];\n\t\t\t\t\tif ( newSubOrder.length !== order.length ) {\n\t\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.clientIds.forEach( ( id ) => {\n\t\t\t\t\tnewState.set( id, action.toRootClientId || '' );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\tstate.get( action.clientIds[ 0 ] )\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning visibility status of block interface.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isBlockInterfaceHidden( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'HIDE_BLOCK_INTERFACE':\n\t\t\treturn true;\n\n\t\tcase 'SHOW_BLOCK_INTERFACE':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragging state. It is possible for a user to be dragging\n * data from outside of the editor, so this state is separate from `draggedBlocks`.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isDragging( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_DRAGGING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}   action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking the visible blocks.\n *\n * @param {Record<string,boolean>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string,boolean>} Block visibility.\n */\nexport function blockVisibility( state = {}, action ) {\n\tif ( action.type === 'SET_BLOCK_VISIBILITY' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.updates,\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selectionHelper( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst blockToSelect =\n\t\t\t\taction.blocks[ action.indexToSelect ] ||\n\t\t\t\taction.blocks[ action.blocks.length - 1 ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the selection state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\tif ( action.clientId ) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t\t},\n\t\t\t\t\tselectionEnd: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: action.start || state.selectionStart,\n\t\t\t\tselectionEnd: action.end || state.selectionEnd,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\tconst { selectionStart, selectionEnd } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart,\n\t\t\t\tselectionEnd,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\tconst { start, end } = action;\n\n\t\t\tif (\n\t\t\t\tstart === state.selectionStart?.clientId &&\n\t\t\t\tend === state.selectionEnd?.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: { clientId: start },\n\t\t\t\tselectionEnd: { clientId: end },\n\t\t\t};\n\t\tcase 'RESET_BLOCKS':\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\n\n\t\t\t// Do nothing if there's no selected block.\n\t\t\tif ( ! startClientId && ! endClientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === startClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {},\n\t\t\t\t\tselectionEnd: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === endClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tselectionEnd: state.selectionStart,\n\t\t\t\t};\n\t\t\t}\n\t}\n\n\tconst selectionStart = selectionHelper( state.selectionStart, action );\n\tconst selectionEnd = selectionHelper( state.selectionEnd, action );\n\n\tif (\n\t\tselectionStart === state.selectionStart &&\n\t\tselectionEnd === state.selectionEnd\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\tselectionStart,\n\t\tselectionEnd,\n\t};\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the data needed to display a prompt when certain blocks\n * are removed, or `false` if no such prompt is requested.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nfunction removalPromptData( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'DISPLAY_BLOCK_REMOVAL_PROMPT':\n\t\t\tconst { clientIds, selectPrevious, message } = action;\n\t\t\treturn {\n\t\t\t\tclientIds,\n\t\t\t\tselectPrevious,\n\t\t\t\tmessage,\n\t\t\t};\n\t\tcase 'CLEAR_BLOCK_REMOVAL_PROMPT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning any rules that a block editor may provide in order to\n * prevent a user from accidentally removing certain blocks. These rules are\n * then used to display a confirmation prompt to the user. For instance, in the\n * Site Editor, the Query Loop block is important enough to warrant such\n * confirmation.\n *\n * The data is a record whose keys are block types (e.g. 'core/query') and\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\n * displays a list of posts or pages.').\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {Record<string,string>} Updated state.\n */\nfunction blockRemovalRules( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_BLOCK_REMOVAL_RULES':\n\t\t\treturn action.rules;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the initial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {number|null} Initial position: 0, -1 or null.\n */\nexport function initialPosition( state = null, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\taction.initialPosition !== undefined\n\t) {\n\t\treturn action.initialPosition;\n\t} else if (\n\t\t[\n\t\t\t'MULTI_SELECT',\n\t\t\t'SELECT_BLOCK',\n\t\t\t'RESET_SELECTION',\n\t\t\t'INSERT_BLOCKS',\n\t\t\t'REPLACE_INNER_BLOCKS',\n\t\t].includes( action.type )\n\t) {\n\t\treturn action.initialPosition;\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT': {\n\t\t\tconst {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t\tnearestSide,\n\t\t\t} = action;\n\t\t\tconst nextState = {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t\tnearestSide,\n\t\t\t};\n\n\t\t\t// Bail out updates if the states are the same.\n\t\t\treturn fastDeepEqual( state, nextState ) ? state : nextState;\n\t\t}\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\tif ( action.reset ) {\n\t\t\t\treturn {\n\t\t\t\t\t...SETTINGS_DEFAULTS,\n\t\t\t\t\t...action.settings,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tconst { attributes, name: blockName } = block;\n\t\t\t\tlet id = blockName;\n\t\t\t\t// If a block variation match is found change the name to be the same with the\n\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\n\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\n\t\t\t\t\tblockName,\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\tif ( match?.name ) {\n\t\t\t\t\tid += '/' + match.name;\n\t\t\t\t}\n\t\t\t\tif ( blockName === 'core/block' ) {\n\t\t\t\t\tid += '/' + attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).filter(\n\t\t\t\t\t( [ id ] ) => ! action.clientIds.includes( id )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\tconst { [ clientId ]: removedBlock, ...restBlocks } = state;\n\t\t\t\t\treturn restBlocks;\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( fastDeepEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning which mode is enabled.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function editorMode( state = 'edit', action ) {\n\t// Let inserting block in navigation mode always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' && state === 'navigation' ) {\n\t\treturn 'edit';\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn action.mode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.uniqueByBlock\n\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion event list state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function lastBlockInserted( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst clientIds = action.blocks.map( ( block ) => {\n\t\t\t\treturn block.clientId;\n\t\t\t} );\n\n\t\t\tconst source = action.meta?.source;\n\n\t\t\treturn { clientIds, source };\n\t\tcase 'RESET_BLOCKS':\n\t\t\treturn {};\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the block that is eding temporarily edited as blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingAsBlocks( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.temporarilyEditingAsBlocks;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the focus mode that should be used when temporarily edit as blocks finishes.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingFocusModeRevert( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.focusModeToRevert;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of block client IDs to block editing modes.\n *\n * @param {Map}    state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Map} Updated state.\n */\nexport function blockEditingModes( state = new Map(), action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_BLOCK_EDITING_MODE':\n\t\t\treturn new Map( state ).set( action.clientId, action.mode );\n\t\tcase 'UNSET_BLOCK_EDITING_MODE': {\n\t\t\tconst newState = new Map( state );\n\t\t\tnewState.delete( action.clientId );\n\t\t\treturn newState;\n\t\t}\n\t\tcase 'RESET_BLOCKS': {\n\t\t\treturn state.has( '' )\n\t\t\t\t? new Map().set( '', state.get( '' ) )\n\t\t\t\t: state;\n\t\t}\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the clientId of the block settings menu that is currently open.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function openedBlockSettingsMenu( state = null, action ) {\n\tif ( 'SET_OPENED_BLOCK_SETTINGS_MENU' === action.type ) {\n\t\treturn action?.clientId ?? null;\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of style IDs to style overrides.\n *\n * @param {Map}    state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Map} Updated state.\n */\nexport function styleOverrides( state = new Map(), action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_STYLE_OVERRIDE':\n\t\t\treturn new Map( state ).set( action.id, action.style );\n\t\tcase 'DELETE_STYLE_OVERRIDE': {\n\t\t\tconst newState = new Map( state );\n\t\t\tnewState.delete( action.id );\n\t\t\treturn newState;\n\t\t}\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning a map of the registered inserter media categories.\n *\n * @param {Array}  state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Array} Updated state.\n */\nexport function registeredInserterMediaCategories( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REGISTER_INSERTER_MEDIA_CATEGORY':\n\t\t\treturn [ ...state, action.category ];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer setting last focused element\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function lastFocus( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LAST_FOCUS':\n\t\t\treturn action.lastFocus;\n\t}\n\n\treturn state;\n}\n\nconst combinedReducers = combineReducers( {\n\tblocks,\n\tisDragging,\n\tisTyping,\n\tisBlockInterfaceHidden,\n\tdraggedBlocks,\n\tselection,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tlastFocus,\n\teditorMode,\n\thasBlockMovingClientId,\n\thighlightedBlock,\n\tlastBlockInserted,\n\ttemporarilyEditingAsBlocks,\n\ttemporarilyEditingFocusModeRevert,\n\tblockVisibility,\n\tblockEditingModes,\n\tstyleOverrides,\n\tremovalPromptData,\n\tblockRemovalRules,\n\topenedBlockSettingsMenu,\n\tregisteredInserterMediaCategories,\n} );\n\nfunction withAutomaticChangeReset( reducer ) {\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( ! state ) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Take over the last value without creating a new reference.\n\t\tnextState.automaticChangeStatus = state.automaticChangeStatus;\n\n\t\tif ( action.type === 'MARK_AUTOMATIC_CHANGE' ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'pending',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\taction.type === 'MARK_AUTOMATIC_CHANGE_FINAL' &&\n\t\t\tstate.automaticChangeStatus === 'pending'\n\t\t) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'final',\n\t\t\t};\n\t\t}\n\n\t\t// If there's a change that doesn't affect blocks or selection, maintain\n\t\t// the current status.\n\t\tif (\n\t\t\tnextState.blocks === state.blocks &&\n\t\t\tnextState.selection === state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// As long as the state is not final, ignore any selection changes.\n\t\tif (\n\t\t\tnextState.automaticChangeStatus !== 'final' &&\n\t\t\tnextState.selection !== state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Reset the status if blocks change or selection changes (when status is final).\n\t\treturn {\n\t\t\t...nextState,\n\t\t\tautomaticChangeStatus: undefined,\n\t\t};\n\t};\n}\n\nexport default withAutomaticChangeReset( combinedReducers );\n"],"mappings":"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"}