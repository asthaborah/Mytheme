"use strict";Object.defineProperty(exports, "__esModule", {value: true});"use client";


var _N3XK7EAHcjs = require('../__chunks/N3XK7EAH.cjs');


var _FROYTN4Bcjs = require('../__chunks/FROYTN4B.cjs');
require('../__chunks/R5A2WTWB.cjs');
require('../__chunks/BZTDJIVT.cjs');


var _Z3GCTNW4cjs = require('../__chunks/Z3GCTNW4.cjs');
require('../__chunks/75KXQZJX.cjs');




var _RNZNGEL4cjs = require('../__chunks/RNZNGEL4.cjs');


var _EO6LS72Hcjs = require('../__chunks/EO6LS72H.cjs');
require('../__chunks/CJDHQUBR.cjs');




var _AV6KTKLEcjs = require('../__chunks/AV6KTKLE.cjs');

// src/form/form-input.ts
var _misc = require('@ariakit/core/utils/misc');
var useFormInput = _RNZNGEL4cjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, name: nameProp } = _b, props = _AV6KTKLEcjs.__objRest.call(void 0, _b, ["store", "name"]);
    const context = _FROYTN4Bcjs.useFormContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormInput must be wrapped in a Form component."
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = _EO6LS72Hcjs.useEvent.call(void 0, (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue(name, event.target.value);
    });
    const value = store.useValue(name);
    props = _AV6KTKLEcjs.__spreadProps.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, {
      value
    }, props), {
      onChange
    });
    props = _Z3GCTNW4cjs.useFocusable.call(void 0, props);
    props = _N3XK7EAHcjs.useFormControl.call(void 0, _AV6KTKLEcjs.__spreadValues.call(void 0, { store, name }, props));
    return props;
  }
);
var FormInput = _RNZNGEL4cjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useFormInput(props);
  return _RNZNGEL4cjs.createElement.call(void 0, "input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormInput.displayName = "FormInput";
}



exports.FormInput = FormInput; exports.useFormInput = useFormInput;
