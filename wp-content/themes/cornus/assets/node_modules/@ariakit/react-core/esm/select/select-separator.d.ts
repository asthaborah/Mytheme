import type { CompositeSeparatorOptions } from "../composite/composite-separator.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectSeparator` component.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelectSeparator({ store });
 * <SelectPopover store={store}>
 *   <SelectItem value="Item 1" />
 *   <Role {...props} />
 *   <SelectItem value="Item 2" />
 *   <SelectItem value="Item 3" />
 * </SelectPopover>
 * ```
 */
export declare const useSelectSeparator: import("../utils/types.js").Hook<SelectSeparatorOptions<"hr">>;
/**
 * Renders a divider between
 * [`SelectItem`](https://ariakit.org/reference/select-item) elements.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx {5}
 * <SelectProvider>
 *   <Select />
 *   <SelectPopover>
 *     <SelectItem value="Item 1" />
 *     <SelectSeparator />
 *     <SelectItem value="Item 2" />
 *     <SelectItem value="Item 3" />
 *   </SelectPopover>
 * </SelectProvider>
 * ```
 */
export declare const SelectSeparator: import("../utils/types.js").Component<SelectSeparatorOptions<"hr">>;
export interface SelectSeparatorOptions<T extends As = "hr"> extends CompositeSeparatorOptions<T> {
    /**
     * Object returned by the
     * [`useSelectStore`](https://ariakit.org/reference/use-select-store) hook. If
     * not provided, the parent
     * [`SelectList`](https://ariakit.org/reference/select-list) or
     * [`SelectPopover`](https://ariakit.org/reference/select-popover) components'
     * context will be used.
     */
    store?: SelectStore;
}
export type SelectSeparatorProps<T extends As = "hr"> = Props<SelectSeparatorOptions<T>>;
